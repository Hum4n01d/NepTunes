//
// This code was generated by RECEIGEN 3.4.0.0 and will use:
//
// Platform                   : OSX
// CFBundleIdentifier         : pl.micropixels.NepTunes
// CFBundleShortVersionString : 1.50
// Prefix                     :
// Success Behavior           : RunApplication
// Failure Behavior           : ExitWith173
//
// This generated code has to be linked to OpenSSL (either statically or dynamically)
// Refer to the website for more details and specific cases.
//

// C++ prologue
#ifdef __cplusplus
extern "C" {
#endif
    
    // Headers for general purpose functions
#import <AvailabilityMacros.h>
#import <objc/objc.h>
#import <CoreFoundation/CoreFoundation.h>
    // Headers for system calls
#import <dlfcn.h>
#import <setjmp.h>
#import <glob.h>
    
    // Headers for bundle security checks
#import <Security/Security.h>
#import <CommonCrypto/CommonDigest.h>
    
    // Headers from OpenSSL
#import <openssl/bio.h>
#import <openssl/err.h>
#import <openssl/objects.h>
#import <openssl/pkcs7.h>
#import <openssl/sha.h>
#import <openssl/x509.h>
    
    // Define this if you are linking a pre-1.0.0 OpenSSL (like the one found on OS X)
#ifdef RECEIGEN_USE_PRE_1_0_0_OPENSSL
#ifndef _STACK
#define _STACK STACK
#endif
#endif
    
    // Headers for network checks
#import <IOKit/IOKitLib.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <net/if.h>
#import <net/if_dl.h>
    
    // Some compilers provide the capability to test if certain attributes are available.
    // This macro provides a compatibility path for other compilers.
#ifndef __has_feature
#define __has_feature(X)    0
#endif
    
    // Define macros that deal with ARC if enable.
#ifndef __SAFE_CAST
#if __has_feature(objc_arc)
#define __SAFE_CAST(T,X)    (__bridge T) X
#define __RETURN_RETAINED   __attribute__((ns_returns_retained))
#else
#define __SAFE_CAST(T,X)    (T) X
#define __RETURN_RETAINED
#endif
#endif
    
    // Define to turn-off debug logs
#ifndef RECEIGEN_QUIET_DEBUG
#define RECEIGEN_QUIET_DEBUG 0
#endif
    
    // Log statement for debugging purpose
#if RECEIGEN_QUIET_DEBUG
#define ___RECEIPT_LOG(...)
#elif defined DEBUG
#if __OBJC__
#define ___RECEIPT_LOG(...)    NSLog(@__VA_ARGS__)
#else
#define ___RECEIPT_LOG(...)    fprintf(stderr, __VA_ARGS__); fprintf(stderr, "\n")
#endif
#else
#define ___RECEIPT_LOG(...)
#endif
    
    // Otherwise specified, check the entitlements
#ifndef RECEIGEN_CHECK_ENTITLEMENTS
#define RECEIGEN_CHECK_ENTITLEMENTS 1
#endif
    
    // Function pointer for string decryption
    typedef void (*_decrypt)(const char *, char *, int, int);
    
    // Keys for each receipt attribute
    typedef enum __ReceiptAttributeType {
        
        // Bundle identifier
        _ReceiptAttributeTypeBundleId = 2,
        // Application version
        _ReceiptAttributeTypeBundleVersion = 3,
        // Opaque value
        _ReceiptAttributeTypeOpaqueValue = 4,
        // Hash value
        _ReceiptAttributeTypeHash = 5,
        // In-app purchase receipt
        _ReceiptAttributeTypeInAppPurchase = 17,
        // Original Application Version
        _ReceiptAttributeTypeOriginalApplicationVersion = 19,
        // Receipt Expiration Date
        _ReceiptAttributeTypeExpirationDate = 21,
        // Quantity
        _InAppAttributeTypeQuantity = 1701,
        // Product identifier
        _InAppAttributeTypeProductIdentifer = 1702,
        // Transaction identifier
        _InAppAttributeTypeTransactionIdentifer = 1703,
        // Purchase date
        _InAppAttributeTypePurchaseDate = 1704,
        // Original transaction identifier
        _InAppAttributeTypeOriginalTransactionIdentifer = 1705,
        // Original purchase date
        _InAppAttributeTypeOriginalPurchaseDate = 1706,
        // Subscription Expiration Date
        _InAppAttributeTypeSubscriptionExpirationDate = 1708,
        // Web Order Line Item ID
        _InAppAttributeTypeWebOrderLineItemId = 1711,
        // Cancellation Date
        _InAppAttributeTypeCancellationDate = 1712,
        
        // Storage key base value
        _StoreNone = 1737,
        // Bundle identifier
        _StoreReceiptAttributeTypeBundleId = _StoreNone + (_ReceiptAttributeTypeBundleId << 1),
        _StoreReceiptAttributeTypeBundleIdData = _StoreNone + (_ReceiptAttributeTypeBundleId << 1) + 1,
        // Application version
        _StoreReceiptAttributeTypeBundleVersion = _StoreNone + (_ReceiptAttributeTypeBundleVersion << 1),
        _StoreReceiptAttributeTypeBundleVersionData = _StoreNone + (_ReceiptAttributeTypeBundleId << 1) + 1,
        // Opaque value
        _StoreReceiptAttributeTypeOpaqueValue = _StoreNone + (_ReceiptAttributeTypeOpaqueValue << 1),
        // Hash value
        _StoreReceiptAttributeTypeHash = _StoreNone + (_ReceiptAttributeTypeHash << 1),
        // In-app purchase receipt
        _StoreReceiptAttributeTypeInAppPurchase = _StoreNone + (_ReceiptAttributeTypeInAppPurchase << 1),
        // Original Application Version
        _StoreReceiptAttributeTypeOriginalApplicationVersion = _StoreNone + (_ReceiptAttributeTypeOriginalApplicationVersion << 1),
        // Receipt Expiration Date
        _StoreReceiptAttributeTypeExpirationDate = _StoreNone + (_ReceiptAttributeTypeExpirationDate << 1),
        // Quantity
        _StoreInAppAttributeTypeQuantity = _StoreNone + (_InAppAttributeTypeQuantity << 1),
        // Product identifier
        _StoreInAppAttributeTypeProductIdentifer = _StoreNone + (_InAppAttributeTypeProductIdentifer << 1),
        // Transaction identifier
        _StoreInAppAttributeTypeTransactionIdentifer = _StoreNone + (_InAppAttributeTypeTransactionIdentifer << 1),
        // Purchase date
        _StoreInAppAttributeTypePurchaseDate = _StoreNone + (_InAppAttributeTypePurchaseDate << 1),
        // Original transaction identifier
        _StoreInAppAttributeTypeOriginalTransactionIdentifer = _StoreNone + (_InAppAttributeTypeOriginalTransactionIdentifer << 1),
        // Original purchase date
        _StoreInAppAttributeTypeOriginalPurchaseDate = _StoreNone + (_InAppAttributeTypeOriginalPurchaseDate << 1),
        // Subscription Expiration Date
        _StoreInAppAttributeTypeSubscriptionExpirationDate = _StoreNone + (_InAppAttributeTypeSubscriptionExpirationDate << 1),
        // Web Order Line Item ID
        _StoreInAppAttributeTypeWebOrderLineItemId = _StoreNone + (_InAppAttributeTypeWebOrderLineItemId << 1),
        // Cancellation Date
        _StoreInAppAttributeTypeCancellationDate = _StoreNone + (_InAppAttributeTypeCancellationDate << 1)
        
    } _ReceiptAttributeType;
    
    // Constants for Receipt info query
#define _RECEIPT_ATTRIBUTETYPE_BUNDLE_ID                        [NSNumber numberWithInt:_StoreReceiptAttributeTypeBundleId]
#define _RECEIPT_ATTRIBUTETYPE_BUNDLE_VERSION                   [NSNumber numberWithInt:_StoreReceiptAttributeTypeBundleVersion]
#define _RECEIPT_ATTRIBUTETYPE_ORIGINAL_APPLICATION_VERSION     [NSNumber numberWithInt:_StoreReceiptAttributeTypeOriginalApplicationVersion]
#define _RECEIPT_ATTRIBUTETYPE_EXPIRATION_DATE                  [NSNumber numberWithInt:_StoreReceiptAttributeTypeExpirationDate]
    
    // Constants for InApp info query
#define _INAPP_ATTRIBUTETYPE_QUANTITY                           [NSNumber numberWithInt:_StoreInAppAttributeTypeQuantity]
#define _INAPP_ATTRIBUTETYPE_PRODUCTIDENTIFER                   [NSNumber numberWithInt:_StoreInAppAttributeTypeProductIdentifer]
#define _INAPP_ATTRIBUTETYPE_TRANSACTIONIDENTIFER               [NSNumber numberWithInt:_StoreInAppAttributeTypeTransactionIdentifer]
#define _INAPP_ATTRIBUTETYPE_PURCHASEDATE                       [NSNumber numberWithInt:_StoreInAppAttributeTypePurchaseDate]
#define _INAPP_ATTRIBUTETYPE_ORIGINALTRANSACTIONIDENTIFER       [NSNumber numberWithInt:_StoreInAppAttributeTypeOriginalTransactionIdentifer]
#define _INAPP_ATTRIBUTETYPE_ORIGINALPURCHASEDATE               [NSNumber numberWithInt:_StoreInAppAttributeTypeOriginalPurchaseDate]
#define _INAPP_ATTRIBUTETYPE_SUBSCRIPTIONEXPIRATIONDATE         [NSNumber numberWithInt:_StoreInAppAttributeTypeSubscriptionExpirationDate]
#define _INAPP_ATTRIBUTETYPE_WEBORDERLINEITEMID                 [NSNumber numberWithInt:_StoreInAppAttributeTypeWebOrderLineItemId]
#define _INAPP_ATTRIBUTETYPE_CANCELLATIONDATE                   [NSNumber numberWithInt:_StoreInAppAttributeTypeCancellationDate]
    
    // Shared context for receipt validation
    typedef struct __CheckingContext {
        CFTypeRef dummy0001;
        const char ** argv;
        CFTypeRef dummy0008;
        CFTypeRef ca_data;
        CFTypeRef dummy000A;
        CFTypeRef dummy0009;
        CFTypeRef receipt_data;
        CFTypeRef dummy0005;
        CFTypeRef receipt_dict;
        CFTypeRef dummy000C;
        long argc;
        CFTypeRef dummy0007;
        CFTypeRef guid_data;
        CFTypeRef dummy0006;
        CFTypeRef dummy0004;
        CFTypeRef dummy0002;
        CFTypeRef dummy000B;
        CFTypeRef main_bundle;
        CFTypeRef dummy0003;
        CFTypeRef dummy0000;
    } _CheckingContext;
    
    // Shared context for receipt parsing
    typedef struct __ParsingContext {
        CFTypeRef dummy000A;
        CFTypeRef dummy0006;
        CFTypeRef dummy0003;
        CFTypeRef dummy0000;
        struct __ParsingContext * parent;
        CFTypeRef dummy0009;
        CFTypeRef dummy0002;
        CFTypeRef dummy0001;
        CFTypeRef dummy0007;
        CFTypeRef dummy000C;
        CFTypeRef dictionary;
        CFTypeRef dummy000B;
        CFTypeRef dummy0008;
        const unsigned char * ptr;
        const unsigned char * end;
        CFTypeRef dummy0005;
        CFTypeRef dummy0004;
    } _ParsingContext;
    
    // Symbol ASN1_get_object
    typedef int (*___ASN1_get_object)(const unsigned char **pp, long *plength, int *ptag, int *pclass, long omax);
    // Symbol ASN1_INTEGER_free
    typedef void (*___ASN1_INTEGER_free)(ASN1_INTEGER *a);
    // Symbol ASN1_INTEGER_get
    typedef long (*___ASN1_INTEGER_get)(const ASN1_INTEGER *a);
    // Symbol ASN1_OBJECT_free
    typedef void (*___ASN1_OBJECT_free)(ASN1_OBJECT *a);
    // Symbol BIO_free
    typedef int (*___BIO_free)(BIO *a);
    // Symbol BIO_new
    typedef BIO *(*___BIO_new)(BIO_METHOD *type);
    // Symbol BIO_s_mem
    typedef BIO_METHOD *(*___BIO_s_mem)(void);
    // Symbol BIO_write
    typedef int (*___BIO_write)(BIO *b, const void *buf, int len);
    // Symbol c2i_ASN1_INTEGER
    typedef ASN1_INTEGER *(*___c2i_ASN1_INTEGER)(ASN1_INTEGER **a,const unsigned char **pp, long length);
    // Symbol CC_SHA1
    typedef unsigned char *(*___CC_SHA1)(const void *data, CC_LONG len, unsigned char *md);
    // Symbol CC_SHA1_Final
    typedef int (*___CC_SHA1_Final)(unsigned char *md, CC_SHA1_CTX *c);
    // Symbol CC_SHA1_Init
    typedef int (*___CC_SHA1_Init)(CC_SHA1_CTX *c);
    // Symbol CC_SHA1_Update
    typedef int (*___CC_SHA1_Update)(CC_SHA1_CTX *c, const void *data, CC_LONG len);
    // Symbol CFAbsoluteTimeGetCurrent
    typedef CFAbsoluteTime (*___CFAbsoluteTimeGetCurrent)();
    // Symbol CFArrayAppendValue
    typedef void (*___CFArrayAppendValue)(CFMutableArrayRef theArray, const void *value);
    // Symbol CFArrayCreateMutable
    typedef CFMutableArrayRef (*___CFArrayCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
    // Symbol CFArrayGetCount
    typedef CFIndex (*___CFArrayGetCount)(CFArrayRef theArray);
    // Symbol CFArrayGetValueAtIndex
    typedef const void *(*___CFArrayGetValueAtIndex)(CFArrayRef theArray, CFIndex idx);
    // Symbol CFBundleCopyBundleURL
    typedef CFURLRef (*___CFBundleCopyBundleURL)(CFBundleRef bundle);
    // Symbol CFBundleGetIdentifier
    typedef CFStringRef (*___CFBundleGetIdentifier)(CFBundleRef bundle);
    // Symbol CFBundleGetMainBundle
    typedef CFBundleRef (*___CFBundleGetMainBundle)();
    // Symbol CFBundleGetValueForInfoDictionaryKey
    typedef CFTypeRef (*___CFBundleGetValueForInfoDictionaryKey)(CFBundleRef bundle, CFStringRef key);
    // Symbol CFBundleUnloadExecutable
    typedef void (*___CFBundleUnloadExecutable)(CFBundleRef bundle);
    // Symbol CFDataAppendBytes
    typedef void (*___CFDataAppendBytes)(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
    // Symbol CFDataCreate
    typedef CFDataRef (*___CFDataCreate)(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
    // Symbol CFDataCreateMutable
    typedef CFMutableDataRef (*___CFDataCreateMutable)(CFAllocatorRef allocator, CFIndex capacity);
    // Symbol CFDataGetBytePtr
    typedef const UInt8 *(*___CFDataGetBytePtr)(CFDataRef theData);
    // Symbol CFDataGetLength
    typedef CFIndex (*___CFDataGetLength)(CFDataRef theData);
    // Symbol CFDateCompare
    typedef CFComparisonResult (*___CFDateCompare)(CFDateRef theString1, CFDateRef theString2, CFStringCompareFlags compareOptions);
    // Symbol CFDateCreate
    typedef CFDateRef (*___CFDateCreate)(CFAllocatorRef allocator, CFAbsoluteTime at);
    // Symbol CFDateFormatterCreate
    typedef CFDateFormatterRef (*___CFDateFormatterCreate)(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
    // Symbol CFDateFormatterCreateDateFromString
    typedef CFDateRef (*___CFDateFormatterCreateDateFromString)(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
    // Symbol CFDateFormatterSetFormat
    typedef void (*___CFDateFormatterSetFormat)(CFDateFormatterRef formatter, CFStringRef formatString);
    // Symbol CFDateFormatterSetProperty
    typedef void (*___CFDateFormatterSetProperty)(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value);
    // Symbol CFDictionaryAddValue
    typedef void (*___CFDictionaryAddValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Symbol CFDictionaryCreateMutable
    typedef CFMutableDictionaryRef (*___CFDictionaryCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
    // Symbol CFDictionaryGetValue
    typedef const void *(*___CFDictionaryGetValue)(CFDictionaryRef theDict, const void *key);
    // Symbol CFDictionarySetValue
    typedef void (*___CFDictionarySetValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Symbol CFEqual
    typedef Boolean (*___CFEqual)(CFTypeRef cf1, CFTypeRef cf2);
    // Symbol CFNumberCreate
    typedef CFNumberRef (*___CFNumberCreate)(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
    // Symbol CFReadStreamClose
    typedef void (*___CFReadStreamClose)(CFReadStreamRef stream);
    // Symbol CFReadStreamCreateWithFile
    typedef CFReadStreamRef (*___CFReadStreamCreateWithFile)(CFAllocatorRef alloc, CFURLRef fileURL);
    // Symbol CFReadStreamOpen
    typedef Boolean (*___CFReadStreamOpen)(CFReadStreamRef stream);
    // Symbol CFReadStreamRead
    typedef CFIndex (*___CFReadStreamRead)(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength);
    // Symbol CFRelease
    typedef void (*___CFRelease)(CFTypeRef cf);
    // Symbol CFStringCompare
    typedef CFComparisonResult (*___CFStringCompare)(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
    // Symbol CFStringCreateWithBytes
    typedef CFStringRef (*___CFStringCreateWithBytes)(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
    // Symbol CFStringCreateWithCString
    typedef CFStringRef (*___CFStringCreateWithCString)(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
    // Symbol CFStringGetFileSystemRepresentation
    typedef Boolean (*___CFStringGetFileSystemRepresentation)(CFStringRef string, char *buffer, CFIndex maxBufLen);
    // Symbol CFTimeZoneCreateWithTimeIntervalFromGMT
    typedef CFTimeZoneRef (*___CFTimeZoneCreateWithTimeIntervalFromGMT)(CFAllocatorRef allocator, CFTimeInterval ti);
    // Symbol CFURLCreateCopyAppendingPathComponent
    typedef CFURLRef (*___CFURLCreateCopyAppendingPathComponent)(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
    // Symbol CFURLCreateFromFileSystemRepresentation
    typedef CFURLRef (*___CFURLCreateFromFileSystemRepresentation)(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory);
    // Symbol CFURLCreateWithFileSystemPathRelativeToBase
    typedef CFURLRef (*___CFURLCreateWithFileSystemPathRelativeToBase)(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
    // Symbol d2i_PKCS7_bio
    typedef PKCS7 *(*___d2i_PKCS7_bio)(BIO *bp,PKCS7 **p7);
    // Symbol d2i_X509_bio
    typedef X509 *(*___d2i_X509_bio)(BIO *bp,X509 **x509);
    // Symbol dlopen
    typedef void *(*___dlopen)(const char * __path, int __mode);
    // Symbol dlsym
    typedef void *(*___dlsym)(void * __handle, const char * __symbol);
    // Symbol EVP_DigestFinal
    typedef int (*___EVP_DigestFinal)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
    // Symbol EVP_DigestInit
    typedef int (*___EVP_DigestInit)(EVP_MD_CTX *ctx, const EVP_MD *type);
    // Symbol EVP_DigestUpdate
    typedef int (*___EVP_DigestUpdate)(EVP_MD_CTX *ctx, const void *d, size_t cnt);
    // Symbol EVP_get_digestbyname
    typedef const EVP_MD *(*___EVP_get_digestbyname)(const char *name);
    // Symbol EVP_MD_CTX_init
    typedef void (*___EVP_MD_CTX_init)(EVP_MD_CTX *ctx);
    // Symbol exit
    typedef void (*___exit)(int status);
    // Symbol freeifaddrs
    typedef void (*___freeifaddrs)(struct ifaddrs *ifp);
    // Symbol getifaddrs
    typedef int (*___getifaddrs)(struct ifaddrs **ifap);
    // Symbol glob
    typedef int (*___glob)(const char * __restrict, int, int (*)(const char *, int), glob_t * __restrict);
    // Symbol glob_b
    typedef int (*___glob_b)(const char * __restrict, int, int (^)(const char *, int), glob_t * __restrict);
    // Symbol globfree
    typedef void (*___globfree)(glob_t *);
    // Symbol kCFBundleIdentifierKey
    typedef const CFStringRef *___kCFBundleIdentifierKey;
    // Symbol kCFDateFormatterTimeZone
    typedef const CFStringRef *___kCFDateFormatterTimeZone;
    // Symbol kCFTypeArrayCallBacks
    typedef const CFArrayCallBacks *___kCFTypeArrayCallBacks;
    // Symbol kCFTypeDictionaryKeyCallBacks
    typedef const CFDictionaryKeyCallBacks *___kCFTypeDictionaryKeyCallBacks;
    // Symbol kCFTypeDictionaryValueCallBacks
    typedef const CFDictionaryValueCallBacks *___kCFTypeDictionaryValueCallBacks;
    // Symbol kSecClass
    typedef const CFTypeRef *___kSecClass;
    // Symbol kSecClassCertificate
    typedef const CFTypeRef *___kSecClassCertificate;
    // Symbol kSecMatchLimit
    typedef const CFTypeRef *___kSecMatchLimit;
    // Symbol kSecMatchLimitAll
    typedef const CFTypeRef *___kSecMatchLimitAll;
    // Symbol kSecMatchSearchList
    typedef const CFTypeRef *___kSecMatchSearchList;
    // Symbol kSecMatchSubjectContains
    typedef const CFTypeRef *___kSecMatchSubjectContains;
    // Symbol kSecReturnRef
    typedef const CFTypeRef *___kSecReturnRef;
    // Symbol longjmp
    typedef void (*___longjmp)(jmp_buf buf, int ret);
    // Symbol NSApplicationMain
    typedef int (*___NSApplicationMain)(int argc, const char *argv[]);
    // Symbol OBJ_txt2obj
    typedef ASN1_OBJECT *(*___OBJ_txt2obj)(const char *s, int no_name);
    // Symbol objc_getClass
    typedef id (*___objc_getClass)(const char *name);
    // Symbol objc_msgSend
    typedef id (*___objc_msgSend)(id theReceiver, SEL theSelector, ...);
    // Symbol OpenSSL_add_all_digests
    typedef void (*___OpenSSL_add_all_digests)();
    // Symbol PKCS7_free
    typedef void (*___PKCS7_free)(PKCS7 *a);
    // Symbol PKCS7_get0_signers
    typedef STACK_OF(X509) *(*___PKCS7_get0_signers)(PKCS7 *p7, STACK_OF(X509) *certs, int flags);
    // Symbol PKCS7_verify
    typedef int (*___PKCS7_verify)(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store, BIO *indata, BIO *out, int flags);
    // Symbol SecCertificateCopyData
    typedef CFDataRef (*___SecCertificateCopyData)(SecCertificateRef certificate);
    // Symbol SecItemCopyMatching
    typedef OSStatus (*___SecItemCopyMatching)(CFDictionaryRef query, CFTypeRef *result);
    // Symbol SecKeychainOpen
    typedef OSStatus (*___SecKeychainOpen)(const char *pathName, SecKeychainRef *keychain);
    // Symbol SecKeychainSearchCopyNext
    typedef OSStatus (*___SecKeychainSearchCopyNext)(SecKeychainSearchRef searchRef, SecKeychainItemRef *itemRef);
    // Symbol SecKeychainSearchCreateFromAttributes
    typedef OSStatus (*___SecKeychainSearchCreateFromAttributes)(CFTypeRef keychainOrArray, SecItemClass itemClass, const SecKeychainAttributeList *attrList, SecKeychainSearchRef *searchRef);
    // Symbol sel_registerName
    typedef SEL (*___sel_registerName)(const char *str);
    // Symbol setjmp
    typedef int (*___setjmp)(jmp_buf buf);
    // Symbol SHA1
    typedef unsigned char *(*___SHA1)(const unsigned char *d, unsigned long n, unsigned char *md);
    // Symbol SHA1_Final
    typedef int (*___SHA1_Final)(unsigned char *md, SHA_CTX *c);
    // Symbol SHA1_Init
    typedef int (*___SHA1_Init)(SHA_CTX *c);
    // Symbol SHA1_Update
    typedef int (*___SHA1_Update)(SHA_CTX *c, const void *data, unsigned long len);
    // Symbol sk_free
    typedef void (*___sk_free)(_STACK *);
    // Symbol sk_num
    typedef int (*___sk_num)(const _STACK *);
    // Symbol sk_value
    typedef void *(*___sk_value)(const _STACK *, int);
    // Symbol strcmp
    typedef int (*___strcmp)(const char *s1, const char *s2);
    // Symbol strlen
    typedef size_t (*___strlen)(const char *);
    // Symbol strncmp
    typedef int (*___strncmp)(const char *, const char *, size_t);
    // Symbol X509_digest
    typedef int (*___X509_digest)(const X509 *data,const EVP_MD *type,unsigned char *md, unsigned int *len);
    // Symbol X509_free
    typedef void (*___X509_free)(X509 *a);
    // Symbol X509_get_ext_by_OBJ
    typedef int (*___X509_get_ext_by_OBJ)(X509 *x,ASN1_OBJECT *obj,int lastpos);
    // Symbol X509_NAME_get_text_by_NID
    typedef int (*___X509_NAME_get_text_by_NID)(X509_NAME *name, int nid, char *buf,int len);
    // Symbol X509_STORE_add_cert
    typedef int (*___X509_STORE_add_cert)(X509_STORE *ctx, X509 *x);
    // Symbol X509_STORE_free
    typedef void (*___X509_STORE_free)(X509_STORE *v);
    // Symbol X509_STORE_new
    typedef X509_STORE *(*___X509_STORE_new)();
    
    
    // Table for storing strings
    static const char *_Strings[585] = {
        // "" / M(None) / S(0) / L(0)
        "\x71\x73\xf6\xc2\xf0\x23\xb6\xaf\xc3\xd4\xb0\x25\x40\x76\x49\x3d\xc3\xb0\x08\xb6\x52\xbd\x21\x22\xfd\x01\x84\x8a\x4f\x46\x8d\x95",
        // "dlsym" / M(Xor2) / S(165) / L(5)
        "\xd1\xd9\xc6\xcc\xd8\xb5\x88\x32\x69\xf4\x94\xca\x05\xbd\xa8\xce",
        // "kSecMatchSearchList" / M(Xor1) / S(251) / L(19)
        "\x90\xa8\x9e\x98\xb6\x9a\x8f\x98\x93\xa8\x9e\x9a\x89\x98\x93\xb7\x92\x88\x8f\xfb",
        // "CFDataAppendBytes" / M(Xor4) / S(147) / L(17)
        "\x15\x10\x12\x37\x22\x37\x17\x26\x26\x33\x38\x32\x14\x2f\x22\x33\x25\x56",
        // "sk_free" / M(Xor3) / S(6) / L(7)
        "\x65\x7d\x49\x70\x64\x73\x73\x16\x0b\xc6\x58\xb8\x37\xe5\x7b\xd3",
        // "RTLD_MAIN_ONLY" / M(Xor3) / S(149) / L(14)
        "\xf7\xf1\xe9\xe1\xfa\xe8\xe4\xec\xeb\xfa\xea\xeb\xe9\xfc\xa5\x20",
        // "1.50" / M(Xor1) / S(125) / L(4)
        "\x4c\x53\x48\x4d\x7d\xe4\xe8\x05\xda\x95\x92\x44\x6e\x37\x50\x58",
        // "" / M(None) / S(0) / L(0)
        "\xa5\x69\xef\x33\xc2\xa8\x44\x47\x9d\x8c\x67\x22\x8e\xa9\xb2\xf6\x8e\xa2\x52\x4a\x8f\xd1\x9f\x4b\x5e\x15\x04\x39\xd3\xb7\xaa\xd6",
        // "X509_STORE_new" / M(Xor1) / S(212) / L(14)
        "\x8c\xe1\xe4\xed\x8b\x87\x80\x9b\x86\x91\x8b\xba\xb1\xa3\xd4\xb1",
        // "X509_STORE_new" / M(Xor2) / S(143) / L(14)
        "\xc7\xaa\xaf\xa6\xc0\xcc\xcb\xd0\xcd\xda\xc0\xf1\xfa\xe8\x9f\x2f",
        // "" / M(None) / S(0) / L(0)
        "\xba\xa0\x6b\xaf\x1a\xe2\x95\x49\x36\x8a\x8f\x21\x25\xb7\xd1\x90\x04\x3e\xd9\x0f\x91\x06\xdd\xd2\x78\x08\xeb\x39\x1e\xdd\x9a\x47",
        // "X509_digest" / M(Rot) / S(132) / L(11)
        "\xdc\xb9\xb4\xbd\xe3\xe8\xed\xeb\xe9\xf7\xf8\x84\xac\x35\x43\xd8",
        // "X509_STORE_add_cert" / M(Xor4) / S(182) / L(19)
        "\x60\x0d\x08\x01\x67\x6b\x6c\x77\x6a\x7d\x67\x59\x5c\x5c\x67\x5b\x5d\x4a\x4c\x38",
        // "%02X:" / M(Xor4) / S(112) / L(5)
        "\x25\x30\x32\x58\x3a\x00\x51\xe2\x7d\xf1\x74\xae\x81\xf1\x15\x47",
        // "/usr/lib/libSystem.dylib" / M(Xor4) / S(40) / L(24)
        "\x07\x5d\x5b\x5a\x07\x44\x41\x4a\x07\x44\x41\x4a\x7b\x51\x5b\x5c\x4d\x45\x06\x4c\x51\x44\x41\x4a\x28\x49\x16\x48\x60\xfb\x2e\x05\x4b",
        // "X509_STORE_free" / M(Xor4) / S(56) / L(15)
        "\xd8\xb5\xb0\xb9\xdf\xd3\xd4\xcf\xd2\xc5\xdf\xe6\xf2\xe5\xe5\x80",
        // "" / M(None) / S(0) / L(0)
        "\x53\x2c\xa2\xce\xac\xb2\xb0\x31\xcf\xc3\x53\x1b\x6f\xff\x5f\x59\x21\x62\xda\x20\x10\x93\x74\xfd\x83\x9b\x7a\x4d\x53\x40\x0a\x73",
        // "CFStringCompare" / M(Xor1) / S(208) / L(15)
        "\x93\x96\x83\xa4\xa2\xb9\xbe\xb7\x93\xbf\xbd\xa0\xb1\xa2\xb5\xd0",
        // "%02X:" / M(Xor2) / S(9) / L(5)
        "\x3c\x29\x2b\x41\x23\x19\x85\x29\xba\x3f\xcb\x8e\x2e\x65\x37\xa9",
        // "setjmp" / M(Xor3) / S(15) / L(6)
        "\x6c\x7a\x6b\x75\x72\x6f\x1f\x14\xd2\xec\x90\x4f\x7b\x93\xe8\xe3",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor1) / S(0) / L(31)
        "\x6b\x43\x46\x54\x79\x70\x65\x44\x69\x63\x74\x69\x6f\x6e\x61\x72\x79\x56\x61\x6c\x75\x65\x43\x61\x6c\x6c\x42\x61\x63\x6b\x73\x00",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Xor3) / S(139) / L(54)
        "\xed\x91\xbb\xb1\xb6\xa7\xaf\xed\x8e\xab\xa0\xb0\xa3\xb0\xbb\xed\x84\xb0\xa3\xaf\xa7\xb5\xad\xb0\xa9\xb1\xed\x91\xa7\xa1\xb7\xb0\xab\xb6\xbb\xec\xa4\xb0\xa3\xaf\xa7\xb5\xad\xb0\xa9\xed\x91\xa7\xa1\xb7\xb0\xab\xb6\xbb\xc2",
        // "CFBundleShortVersionString" / M(Xor1) / S(191) / L(26)
        "\xfc\xf9\xfd\xca\xd1\xdb\xd3\xda\xec\xd7\xd0\xcd\xcb\xe9\xda\xcd\xcc\xd6\xd0\xd1\xec\xcb\xcd\xd6\xd1\xd8\xbf\xbb\x13\xd1\xda\x86\x71\x15\x4b",
        // "CFStringGetFileSystemRepresentation" / M(Xor3) / S(131) / L(35)
        "\xe4\xe1\xf4\xd3\xd5\xce\xc9\xc0\xe0\xc2\xd3\xe1\xce\xcb\xc2\xf4\xde\xd4\xd3\xc2\xca\xf5\xc2\xd7\xd5\xc2\xd4\xc2\xc9\xd3\xc6\xd3\xce\xc8\xc9\xa7",
        // "CFBundleIdentifier" / M(Xor2) / S(134) / L(18)
        "\xd6\xd3\xd7\xe0\xfb\xf1\xf9\xf0\xdc\xf1\xf0\xfb\xe1\xfc\xf3\xfc\xf0\xe7\x95",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor4) / S(207) / L(57)
        "\x71\x0d\x27\x2d\x2a\x3b\x33\x71\x12\x37\x3c\x2c\x3f\x2c\x27\x71\x15\x3b\x27\x3d\x36\x3f\x37\x30\x2d\x71\x0d\x27\x2d\x2a\x3b\x33\x0c\x31\x31\x2a\x1d\x3b\x2c\x2a\x37\x38\x37\x3d\x3f\x2a\x3b\x2d\x70\x35\x3b\x27\x3d\x36\x3f\x37\x30\x5e\x20\x56\xba\xdf\xf9\x11\x10\x4f",
        // "" / M(None) / S(0) / L(0)
        "\x8c\xd1\xb3\x99\xb2\x15\x70\xe4\x34\xd0\xbd\x00\x9f\x0f\x34\xa0\xe0\x2e\x8c\xee\x82\x67\xbc\xe2\x50\x37\xfc\x5d\xcf\xd8\x78\xbb",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor2) / S(209) / L(40)
        "\xd6\xd1\xd1\x85\xd5\x82\xd6\xd6\xd2\x83\xd5\xd9\xd3\x81\xd0\xd8\x86\x86\xd5\xd8\x84\xd1\xd4\x81\x85\xd2\xd2\xd4\xd5\xd2\x84\xd1\xd9\xd8\x84\x86\xd6\x83\xd6\xd0\xe0\x59\xbb\x5d\xdc\x57\xa6\xdd\xf5",
        // "%02X" / M(Rot) / S(48) / L(4)
        "\x55\x60\x62\x88\x30\x35\x80\x70\x15\x73\xef\xe3\x66\x50\x03\x99",
        // "" / M(None) / S(0) / L(0)
        "\xfd\x1b\x41\x1d\x35\xca\xb4\x18\xe6\xe0\xd4\xea\x5b\xe4\x10\x56\x14\xce\x7f\xf9\xb4\x92\xe6\xb8\x43\x29\x69\x1e\x36\xd9\x97\x4b",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor1) / S(103) / L(32)
        "\x1e\x1e\x1e\x1e\x40\x4a\x40\x2a\x2a\x40\x4a\x40\x03\x03\x40\x33\x40\x2f\x2f\x40\x5d\x40\x0a\x0a\x40\x5d\x40\x14\x14\x40\x3d\x40\x67",
        // "CFDateFormatterSetProperty" / M(Xor4) / S(61) / L(26)
        "\x14\x11\x13\x36\x23\x32\x11\x38\x25\x3a\x36\x23\x23\x32\x25\x04\x32\x23\x07\x25\x38\x27\x32\x25\x23\x2e\x57\x39\xef\x6d\x98\xae\xaa\xc1\xb1",
        // "/usr/lib/libSystem.dylib" / M(Xor1) / S(136) / L(24)
        "\xa7\xfd\xfb\xfa\xa7\xe4\xe1\xea\xa7\xe4\xe1\xea\xdb\xf1\xfb\xfc\xed\xe5\xa6\xec\xf1\xe4\xe1\xea\x88\xc5\x5e\x7e\x0c\xc6\xd1\xb2\xaf",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Xor2) / S(146) / L(54)
        "\x8a\xf6\xdc\xd6\xd1\xc0\xc8\x8a\xe9\xcc\xc7\xd7\xc4\xd7\xdc\x8a\xe3\xd7\xc4\xc8\xc0\xd2\xca\xd7\xce\xd6\x8a\xf6\xc0\xc6\xd0\xd7\xcc\xd1\xdc\x8b\xc3\xd7\xc4\xc8\xc0\xd2\xca\xd7\xce\x8a\xf6\xc0\xc6\xd0\xd7\xcc\xd1\xdc\xa5",
        // "CFReadStreamClose" / M(Xor1) / S(224) / L(17)
        "\xa3\xa6\xb2\x85\x81\x84\xb3\x94\x92\x85\x81\x8d\xa3\x8c\x8f\x93\x85\xe0",
        // "c2i_ASN1_INTEGER" / M(Xor4) / S(136) / L(16)
        "\x6b\x3a\x61\x57\x49\x5b\x46\x39\x57\x41\x46\x5c\x4d\x4f\x4d\x5a\x08",
        // "strlen" / M(Xor4) / S(153) / L(6)
        "\xe3\xe4\xe2\xfc\xf5\xfe\x90\x51\x22\xa9\xa4\x62\xf8\x74\x45\xaf",
        // "" / M(None) / S(0) / L(0)
        "\xbf\x9e\xbe\xfb\xc3\x3c\x92\x6a\x24\x1b\x26\x39\x47\x3c\xc2\x50\x04\x0c\xa4\x04\x2b\x9d\xd7\x9b\x05\x6f\x04\x20\x9c\x40\xf6\x5d",
        // "_MASReceipt/receipt" / M(Xor1) / S(240) / L(19)
        "\xaf\xbd\xb1\xa3\xa2\x95\x93\x95\x99\x80\x84\xdf\x82\x95\x93\x95\x99\x80\x84\xf0",
        // "" / M(None) / S(0) / L(0)
        "\x2e\x46\x85\x63\x39\x4d\xf6\x16\x78\xa7\xcc\x0b\xc3\x7f\xef\xd5\x2d\xd8\xa2\x2e\xb0\x19\x80\x32\x42\xf7\x7e\x09\xa8\xb7\x15\x13",
        // "" / M(None) / S(0) / L(0)
        "\x6c\x69\x5e\x84\xde\x89\x6f\x07\x13\xfa\xb5\x43\xf7\x1a\x82\xaa\x0a\xb1\x3b\xff\x53\x4f\x5a\x9a\xdc\x60\x12\xdc\xf6\xca\x68\x94",
        // "ASN1_INTEGER_get" / M(Rot) / S(121) / L(16)
        "\xba\xcc\xc7\xaa\xd8\xc2\xc7\xcd\xbe\xc0\xbe\xcb\xd8\xe0\xde\xed\x79",
        // "dlsym" / M(Xor4) / S(139) / L(5)
        "\xd4\xdc\xc3\xc9\xdd\xb0\x7c\x49\x06\x1e\x24\xee\x6e\xa7\x25\x9b",
        // "BIO_write" / M(Xor3) / S(116) / L(9)
        "\xc6\xcd\xcb\xdb\xf3\xf6\xed\xf0\xe1\x84\x82\x42\xa6\xb0\x3d\xe4",
        // "PKCS7_get0_signers" / M(Xor4) / S(167) / L(18)
        "\x35\x2e\x26\x36\x52\x3a\x02\x00\x11\x55\x3a\x16\x0c\x02\x0b\x00\x17\x16\x65",
        // "SHA1_Init" / M(Xor1) / S(232) / L(9)
        "\xbb\xa0\xa9\xd9\xb7\xa1\x86\x81\x9c\xe8\x84\x1f\x73\xb7\xcb\x86",
        // "CFArrayAppendValue" / M(Xor3) / S(49) / L(18)
        "\x07\x02\x05\x36\x36\x25\x3d\x05\x34\x34\x21\x2a\x20\x12\x25\x28\x31\x21\x44",
        // "%02x:" / M(Xor1) / S(247) / L(5)
        "\xd2\xc7\xc5\x8f\xcd\xf7\x5b\xb3\x19\xaa\x19\x2e\x34\xfd\xbc\x63",
        // "" / M(None) / S(0) / L(0)
        "\x92\x8a\xd4\x9a\x69\x6b\x8e\xe7\xd5\xb9\xcc\x7c\x07\xb2\x22\xef\x4b\x98\x89\x49\x9f\xdc\x6c\xe8\x88\x94\xe6\x32\x98\x05\x33\x2b",
        // "" / M(None) / S(0) / L(0)
        "\x7e\xc6\x48\x71\x03\x45\xaf\x59\xac\xcc\x4d\xd9\x28\x38\xe8\x30\xbf\x5e\xb9\x87\xc8\x5b\x9e\xb5\x77\x61\xc3\x9e\xd0\x6b\x09\x9b",
        // "" / M(None) / S(0) / L(0)
        "\xd4\x5c\xa8\xe5\xfb\x32\x33\x49\x56\xc1\x8b\x08\x44\xfa\xf7\x17\x8e\x1a\xf8\x42\x6d\xfa\x46\xaf\x5f\xbf\x6c\x04\xa0\x65\x3b\x36",
        // "X509_STORE_add_cert" / M(Xor2) / S(85) / L(19)
        "\x19\x74\x71\x78\x1e\x12\x15\x0e\x13\x04\x1e\x20\x25\x25\x1e\x22\x24\x33\x35\x41",
        // "" / M(None) / S(0) / L(0)
        "\x74\x28\xbd\xe4\x12\x41\xfa\xc8\xe0\x97\xe1\x78\x3e\x2a\x41\xba\x0f\xea\x01\x5f\x30\x64\x31\x63\x58\x59\x48\x78\x37\xad\xab\x71",
        // "CFReadStreamOpen" / M(Xor3) / S(255) / L(16)
        "\x53\x56\x42\x75\x71\x74\x43\x64\x62\x75\x71\x7d\x5f\x60\x75\x7e\x10",
        // "SecCertificateCopyData" / M(Xor3) / S(241) / L(22)
        "\x5b\x6d\x6b\x4b\x6d\x7a\x7c\x61\x6e\x61\x6b\x69\x7c\x6d\x4b\x67\x78\x71\x4c\x69\x7c\x69\x08",
        // "kCFDateFormatterTimeZone" / M(Xor2) / S(186) / L(24)
        "\xf0\xd8\xdd\xdf\xfa\xef\xfe\xdd\xf4\xe9\xf6\xfa\xef\xef\xfe\xe9\xcf\xf2\xf6\xfe\xc1\xf4\xf5\xfe\x9b\xc4\x3a\x88\x6d\x40\x86\x42\x8d",
        // "setjmp" / M(Xor4) / S(184) / L(6)
        "\xf3\xe5\xf4\xea\xed\xf0\x80\xee\x5e\x9e\xfe\x28\x03\xdb\xab\xd7",
        // "" / M(None) / S(0) / L(0)
        "\xd4\x1d\xcc\xba\xac\x3d\xad\xbd\xd1\x70\x7a\x3e\x2b\xc8\xf9\x8d\x85\x44\x1c\x77\x62\xe3\x99\x42\x58\xc1\x88\xbb\x9c\xae\xa4\xdc",
        // "SecItemCopyMatching" / M(Xor3) / S(197) / L(19)
        "\x8a\xbc\xba\x90\xad\xbc\xb4\x9a\xb6\xa9\xa0\x94\xb8\xad\xba\xb1\xb0\xb7\xbe\xd9",
        // "SecItemCopyMatching" / M(Xor2) / S(52) / L(19)
        "\x73\x45\x43\x69\x54\x45\x4d\x63\x4f\x50\x59\x6d\x41\x54\x43\x48\x49\x4e\x47\x20",
        // "CC_SHA1_Init" / M(Xor3) / S(216) / L(12)
        "\xab\xab\xb7\xbb\xa0\xa9\xd9\xb7\xa1\x86\x81\x9c\xe8\x64\x4f\xaa",
        // "CFReadStreamRead" / M(Xor1) / S(204) / L(16)
        "\x8f\x8a\x9e\xa9\xad\xa8\x9f\xb8\xbe\xa9\xad\xa1\x9e\xa9\xad\xa8\xcc",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor1) / S(169) / L(32)
        "\xd0\xd0\xd0\xd0\x8e\x84\x8e\xe4\xe4\x8e\x84\x8e\xcd\xcd\x8e\xfd\x8e\xe1\xe1\x8e\x93\x8e\xc4\xc4\x8e\x93\x8e\xda\xda\x8e\xf3\x8e\xa9",
        // "CFDateCreate" / M(Xor1) / S(94) / L(12)
        "\x1d\x18\x1a\x3f\x2a\x3b\x1d\x2c\x3b\x3f\x2a\x3b\x5e\x4f\xb8\x88",
        // "SHA1_Final" / M(Xor1) / S(183) / L(10)
        "\xe4\xff\xf6\x86\xe8\xf1\xde\xd9\xd6\xdb\xb7\xb7\xf4\x3f\xfe\x3a",
        // "PKCS7_get0_signers" / M(Xor4) / S(228) / L(18)
        "\xbc\xa7\xaf\xbf\xdb\xb3\x8b\x89\x98\xdc\xb3\x9f\x85\x8b\x82\x89\x9e\x9f\xec",
        // "CFDictionarySetValue" / M(Rot) / S(211) / L(20)
        "\x16\x19\x17\x3c\x36\x47\x3c\x42\x41\x34\x45\x4c\x26\x38\x47\x29\x34\x3f\x48\x38\xd3",
        // "" / M(None) / S(0) / L(0)
        "\x47\x5d\x22\xa3\x88\x79\x5b\x9a\x6d\x93\x7d\xf8\x8a\x11\x66\xc9\xb9\x92\x53\xb9\x4d\xe0\x1a\xb8\xf2\x8a\xf3\x44\xb4\x57\xd4\x4f",
        // "receipt" / M(Xor3) / S(242) / L(7)
        "\x70\x67\x61\x67\x6b\x72\x76\x02\x3c\xd6\x60\x78\x8d\xb7\x85\x19",
        // "CFBundleIdentifier" / M(Xor1) / S(167) / L(18)
        "\xe4\xe1\xe5\xd2\xc9\xc3\xcb\xc2\xee\xc3\xc2\xc9\xd3\xce\xc1\xce\xc2\xd5\xa7",
        // "/usr/lib/libobjc.dylib" / M(Rot) / S(67) / L(22)
        "\x72\xb8\xb6\xb5\x72\xaf\xac\xa5\x72\xaf\xac\xa5\xb2\xa5\xad\xa6\x71\xa7\xbc\xaf\xac\xa5\x43",
        // "setjmp" / M(Xor2) / S(21) / L(6)
        "\x76\x60\x71\x6f\x68\x75\x05\x7f\x0c\xa1\xd6\xba\xed\x3f\x35\xcb",
        // "EVP_get_digestbyname" / M(Xor1) / S(160) / L(20)
        "\xe5\xf6\xf0\xff\xc7\xc5\xd4\xff\xc4\xc9\xc7\xc5\xd3\xd4\xc2\xd9\xce\xc1\xcd\xc5\xa0",
        // "sel_registerName" / M(Xor3) / S(139) / L(16)
        "\xef\xf9\xf0\xc3\xee\xf9\xfb\xf5\xef\xe8\xf9\xee\xd2\xfd\xf1\xf9\x9c",
        // "BIO_free" / M(Xor2) / S(159) / L(8)
        "\xcd\xc6\xc0\xd0\xe9\xfd\xea\xea\x8f\x3b\xf6\xed\x58\x15\x9f\x3b",
        // "" / M(None) / S(0) / L(0)
        "\x16\xdc\x62\x11\x74\x4c\x49\x92\x17\x67\x21\x25\x7d\xff\x20\x4c\xe1\x53\x0e\x59\x03\x7a\x34\x72\x6e\x71\xa4\x0b\xe5\xf1\xe4\xdc",
        // "d2i_PKCS7_bio" / M(Xor3) / S(152) / L(13)
        "\xcc\x9a\xc1\xf7\xf8\xe3\xeb\xfb\x9f\xf7\xca\xc1\xc7\xa8\x29\x4b",
        // "%02x:" / M(Rot) / S(221) / L(5)
        "\x02\x0d\x0f\x55\x17\xdd\x1e\xa8\x59\x02\xcf\xa9\xcf\xd0\xe2\x78",
        // "strcmp" / M(Xor4) / S(78) / L(6)
        "\x93\x94\x92\x83\x8d\x90\xe0\x49\x7e\xab\x3c\xca\x10\x56\xbf\x45",
        // "%02X" / M(Xor4) / S(185) / L(4)
        "\xb5\xa0\xa2\xc8\x90\x71\xb0\x05\xd7\xde\xe9\x03\x1a\xcf\xbc\x0a",
        // "" / M(None) / S(0) / L(0)
        "\x3c\x02\x13\x32\x6e\xb9\x9e\x18\xe0\xbf\xf7\x1d\x4b\x91\x84\xc2\x45\x3f\xb5\x19\xd5\x50\xce\x18\xca\x65\x76\x21\x71\xd8\xb1\xe5",
        // "CFBundleVersion" / M(Rot) / S(195) / L(15)
        "\x06\x09\x05\x38\x31\x27\x2f\x28\x19\x28\x35\x36\x2c\x32\x31\xc3",
        // "d2i_X509_bio" / M(Xor1) / S(39) / L(12)
        "\x43\x15\x4e\x78\x7f\x12\x17\x1e\x78\x45\x4e\x48\x27\x55\x54\xb4",
        // "CFDateFormatterCreate" / M(Xor2) / S(102) / L(21)
        "\x33\x36\x34\x11\x04\x15\x36\x1f\x02\x1d\x11\x04\x04\x15\x02\x33\x02\x15\x11\x04\x15\x70",
        // "kSecMatchSubjectContains" / M(Xor4) / S(56) / L(24)
        "\x53\x6b\x5d\x5b\x75\x59\x4c\x5b\x50\x6b\x4d\x5a\x52\x5d\x5b\x4c\x7b\x57\x56\x4c\x59\x51\x56\x4b\x38\x6c\x0b\x1d\x3e\xf6\xa9\x6b\x25",
        // "SHA1_Init" / M(Rot) / S(123) / L(9)
        "\xce\xc3\xbc\xac\xda\xc4\xe9\xe4\xef\x7b\x57\xf2\x75\x03\x9c\x9d",
        // "CFStringCreateWithCString" / M(Xor4) / S(223) / L(25)
        "\xdd\xd8\xcd\xea\xec\xf7\xf0\xf9\xdd\xec\xfb\xff\xea\xfb\xc9\xf7\xea\xf6\xdd\xcd\xea\xec\xf7\xf0\xf9\x9e\xf3\x74\x18\xc9\xb0\xed\x92\x8b",
        // "CFEqual" / M(Xor3) / S(143) / L(7)
        "\xdc\xd9\xda\xee\xea\xfe\xf3\x9f\x8f\x36\xcd\x5d\x71\xdb\xd7\xe4",
        // "d2i_PKCS7_bio" / M(Rot) / S(55) / L(13)
        "\x9b\x69\xa0\x96\x87\x82\x7a\x8a\x6e\x96\x99\xa0\xa6\x37\x5d\xc1",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" / M(Rot) / S(214) / L(50)
        "\x05\x29\x4f\x49\x4a\x3b\x43\x05\x22\x3f\x38\x48\x37\x48\x4f\x05\x1c\x48\x37\x43\x3b\x4d\x45\x48\x41\x49\x05\x17\x46\x46\x21\x3f\x4a\x04\x3c\x48\x37\x43\x3b\x4d\x45\x48\x41\x05\x17\x46\x46\x21\x3f\x4a\xd6",
        // "objc_getClass" / M(Xor1) / S(146) / L(13)
        "\xfd\xf0\xf8\xf1\xcd\xf5\xf7\xe6\xd1\xfe\xf3\xe1\xe1\x92\xbb\xff",
        // "kSecClass" / M(Xor3) / S(99) / L(9)
        "\x18\x20\x16\x10\x30\x1f\x12\x00\x00\x73\x87\x85\x1f\xde\x22\x04",
        // "sk_free" / M(Xor3) / S(60) / L(7)
        "\x3f\x27\x13\x2a\x3e\x29\x29\x4c\xd4\x11\xbf\x02\xf8\x19\x0f\x15",
        // "1.2.840.113635.100.6.11.1" / M(Rot) / S(134) / L(25)
        "\xb7\xb4\xb8\xb4\xbe\xba\xb6\xb4\xb7\xb7\xb9\xbc\xb9\xbb\xb4\xb7\xb6\xb6\xb4\xbc\xb4\xb7\xb7\xb4\xb7\x86\x86\xe4\xcb\x47\x68\x18\x92\x96",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Rot) / S(241) / L(66)
        "\x20\x44\x6a\x64\x65\x56\x5e\x20\x3d\x5a\x53\x63\x52\x63\x6a\x20\x37\x63\x52\x5e\x56\x68\x60\x63\x5c\x64\x20\x34\x60\x63\x56\x37\x60\x66\x5f\x55\x52\x65\x5a\x60\x5f\x1f\x57\x63\x52\x5e\x56\x68\x60\x63\x5c\x20\x34\x60\x63\x56\x37\x60\x66\x5f\x55\x52\x65\x5a\x60\x5f\xf1",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor2) / S(218) / L(59)
        "\xa8\xaf\xa4\xaf\xfb\xa4\xab\xfc\xa4\xa8\xa8\xa4\xac\xfd\xa4\xab\xa7\xa4\xad\xff\xa4\xae\xa6\xa4\xf8\xf8\xa4\xab\xa6\xa4\xfa\xaf\xa4\xaa\xff\xa4\xfb\xac\xa4\xac\xaa\xa4\xab\xac\xa4\xfa\xaf\xa4\xa7\xa6\xa4\xfa\xf8\xa4\xa8\xfd\xa4\xa8\xae\x9e\x1b\x87\x41\xb3\xf5\xa7\xe2\xae",
        // "" / M(None) / S(0) / L(0)
        "\x7f\x7f\x37\xb1\x9a\x4e\x12\x0e\xb5\x83\x9f\x67\x1b\xc4\xf5\xfe\x36\x28\x7c\x91\x51\xfc\x86\xc2\xaf\xc3\x60\x70\x5a\x1c\xe1\x29",
        // "" / M(None) / S(0) / L(0)
        "\xfc\x7e\x8a\xba\xd1\x0d\x0d\xe6\xf2\x5b\x31\xcc\x82\xd5\xf8\x5f\x43\x0a\xa9\x0f\x6d\x36\x23\x59\x7b\x64\x85\xb9\x0e\x8d\x7f\x49",
        // "" / M(None) / S(0) / L(0)
        "\xc5\x9b\x90\xd7\xa4\xa4\xf1\x6d\xff\xc9\x07\xf8\x6d\x03\xb1\xb7\xa8\xff\x3b\x8c\x51\x81\x9e\xbc\x8f\xf6\x94\x8f\xb8\xa7\xe4\x5f",
        // "X509_free" / M(Xor3) / S(198) / L(9)
        "\x8e\xe3\xe6\xef\x89\xb0\xa4\xb3\xb3\xd6\x07\x13\xdd\x7f\x0d\xdc",
        // "" / M(None) / S(0) / L(0)
        "\xc2\xfb\xb8\xa6\x66\x60\xb2\x16\xd8\x62\xc1\x62\x6d\xef\x73\x1e\x54\x6a\xf7\x94\x8f\xc0\x19\xd4\x42\xaa\x93\xcc\x0f\x7c\x9c\x3a",
        // "" / M(None) / S(0) / L(0)
        "\xbf\x86\x85\x08\xaf\xa3\x37\x69\xe2\x30\x9a\xb6\x51\x7b\x74\x59\x92\xbf\xab\x96\x9c\x11\x36\x81\x08\x6c\x13\x06\x8c\x48\xe8\x01",
        // "X509_digest" / M(Xor2) / S(63) / L(11)
        "\x77\x1a\x1f\x16\x70\x4b\x46\x48\x4a\x5c\x5b\x2f\xa1\x25\x6a\x2c",
        // "CFDateFormatterCreateDateFromString" / M(Xor1) / S(136) / L(35)
        "\xcb\xce\xcc\xe9\xfc\xed\xce\xe7\xfa\xe5\xe9\xfc\xfc\xed\xfa\xcb\xfa\xed\xe9\xfc\xed\xcc\xe9\xfc\xed\xce\xfa\xe7\xe5\xdb\xfc\xfa\xe1\xe6\xef\x88",
        // "" / M(None) / S(0) / L(0)
        "\x23\x19\x0c\x10\xe3\xf5\xe9\xe7\xaf\xae\x85\xa8\x08\x1d\xfe\x25\x42\x1e\x9b\xaa\x64\xdf\x12\x21\x2b\x51\xdd\xf1\xbd\x3a\x77\x79",
        // "init" / M(Xor3) / S(226) / L(4)
        "\x9b\x9c\x9b\x86\xf2\x43\x00\xf7\x3e\xb8\x47\xa4\x82\x80\xf2\xc3",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor3) / S(80) / L(37)
        "\x25\x13\x15\x3d\x13\x0f\x15\x1e\x17\x1f\x18\x25\x13\x17\x04\x15\x1e\x35\x04\x13\x17\x02\x13\x30\x04\x19\x1b\x37\x02\x02\x04\x1f\x14\x03\x02\x13\x05\x76",
        // "CFDateCreate" / M(Xor2) / S(183) / L(12)
        "\xe4\xe1\xe3\xc6\xd3\xc2\xe4\xd5\xc2\xc6\xd3\xc2\xa7\xad\xf3\xcf",
        // "" / M(None) / S(0) / L(0)
        "\xb9\xdc\xcd\x65\x1f\x0f\x1d\xb9\x64\x57\xf1\xb7\x73\x74\xab\xb9\xf8\x0b\xb1\xf4\x08\x8f\xd9\xf4\x45\xb6\x47\x7f\xf8\x3a\x06\x3d",
        // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Xor1) / S(120) / L(39)
        "\x3b\x3e\x2c\x11\x15\x1d\x22\x17\x16\x1d\x3b\x0a\x1d\x19\x0c\x1d\x2f\x11\x0c\x10\x2c\x11\x15\x1d\x31\x16\x0c\x1d\x0a\x0e\x19\x14\x3e\x0a\x17\x15\x3f\x35\x2c\x78\x2e\xfd\x0e\x34\xb7\x9d\x2b\x04",
        // "CFArrayGetValueAtIndex" / M(Rot) / S(58) / L(22)
        "\x7d\x80\x7b\xac\xac\x9b\xb3\x81\x9f\xae\x90\x9b\xa6\xaf\x9f\x7b\xae\x83\xa8\x9e\x9f\xb2\x3a",
        // "CFDictionaryCreateMutable" / M(Xor4) / S(193) / L(25)
        "\xe1\xe4\xe6\xcb\xc1\xd6\xcb\xcd\xcc\xc3\xd0\xdb\xe1\xd0\xc7\xc3\xd6\xc7\xef\xd7\xd6\xc3\xc0\xce\xc7\xa2\x2f\xad\x21\x95\x24\x30\x25\x95",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor3) / S(20) / L(59)
        "\x6e\x69\x62\x69\x3d\x62\x6d\x3a\x62\x6e\x6e\x62\x6a\x3b\x62\x6d\x61\x62\x6b\x39\x62\x68\x60\x62\x3e\x3e\x62\x6d\x60\x62\x3c\x69\x62\x6c\x39\x62\x3d\x6a\x62\x6a\x6c\x62\x6d\x6a\x62\x3c\x69\x62\x61\x60\x62\x3c\x3e\x62\x6e\x3b\x62\x6e\x68\x58\xa7\x73\xc6\x94\xf3\xd0\xc2\xf7",
        // "CFDataCreateMutable" / M(Xor3) / S(136) / L(19)
        "\xdf\xda\xd8\xfd\xe8\xfd\xdf\xee\xf9\xfd\xe8\xf9\xd1\xe9\xe8\xfd\xfe\xf0\xf9\x9c",
        // "" / M(None) / S(0) / L(0)
        "\x9d\x4c\x57\xf8\x6f\x8c\xe7\x37\xaa\x3c\xff\xcf\xc7\x58\x3a\xab\xaa\xc4\x77\xaa\x10\xba\x61\x25\x6f\xc2\xfd\x39\x5a\xca\x47\x21",
        // "CFDateFormatterCreate" / M(Xor3) / S(68) / L(21)
        "\x19\x1c\x1e\x3b\x2e\x3f\x1c\x35\x28\x37\x3b\x2e\x2e\x3f\x28\x19\x28\x3f\x3b\x2e\x3f\x5a",
        // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Rot) / S(18) / L(39)
        "\x55\x58\x66\x7b\x7f\x77\x6c\x81\x80\x77\x55\x84\x77\x73\x86\x77\x69\x7b\x86\x7a\x66\x7b\x7f\x77\x5b\x80\x86\x77\x84\x88\x73\x7e\x58\x84\x81\x7f\x59\x5f\x66\x12\x54\x4a\x4c\xec\xc9\xaf\x90\xc9",
        // "OBJ_txt2obj" / M(Xor1) / S(255) / L(11)
        "\xb0\xbd\xb5\xa0\x8b\x87\x8b\xcd\x90\x9d\x95\xff\xce\x07\x45\x9f",
        // "CFDataCreate" / M(Xor3) / S(250) / L(12)
        "\x49\x4c\x4e\x6b\x7e\x6b\x49\x78\x6f\x6b\x7e\x6f\x0a\xdd\x2a\xe6",
        // "CFDictionaryAddValue" / M(Xor4) / S(229) / L(20)
        "\x8a\x8f\x8d\xa0\xaa\xbd\xa0\xa6\xa7\xa8\xbb\xb0\x88\xad\xad\x9f\xa8\xa5\xbc\xac\xc9",
        // "CFDateFormatterCreateDateFromString" / M(Xor3) / S(16) / L(35)
        "\x77\x72\x70\x55\x40\x51\x72\x5b\x46\x59\x55\x40\x40\x51\x46\x77\x46\x51\x55\x40\x51\x70\x55\x40\x51\x72\x46\x5b\x59\x67\x40\x46\x5d\x5a\x53\x34",
        // "X509_get_ext_by_OBJ" / M(Xor1) / S(76) / L(19)
        "\x14\x79\x7c\x75\x13\x2b\x29\x38\x13\x29\x34\x38\x13\x2e\x35\x13\x03\x0e\x06\x4c",
        // "X509_NAME_get_text_by_NID" / M(Xor3) / S(13) / L(25)
        "\x77\x1a\x1f\x16\x70\x61\x6e\x62\x6a\x70\x48\x4a\x5b\x70\x5b\x4a\x57\x5b\x70\x4d\x56\x70\x61\x66\x6b\x2f\x53\xd0\x91\x2e\xc6\x42\x0e\x8e",
        // "" / M(None) / S(0) / L(0)
        "\xf7\x8d\xdc\xd3\xc0\x87\x34\xa5\x14\x71\xc6\x09\x5f\x23\x34\x72\x96\x47\x27\xcf\xc6\x27\x52\xbb\x60\xaa\x61\xd7\xcf\xf3\xeb\xd8",
        // "SHA1_Update" / M(Xor3) / S(193) / L(11)
        "\x82\x99\x90\xe0\x8e\x84\xa1\xb5\xb0\xa5\xb4\xd1\xe0\x36\x96\x55",
        // "EVP_get_digestbyname" / M(Xor2) / S(23) / L(20)
        "\x47\x54\x52\x5d\x65\x67\x76\x5d\x66\x6b\x65\x67\x71\x76\x60\x7b\x6c\x63\x6f\x67\x02",
        // "d2i_PKCS7_bio" / M(Rot) / S(68) / L(13)
        "\xa8\x76\xad\xa3\x94\x8f\x87\x97\x7b\xa3\xa6\xad\xb3\x44\x30\x6e",
        // "ASN1_get_object" / M(Xor3) / S(196) / L(15)
        "\x95\x87\x9a\xe5\x8b\xb3\xb1\xa0\x8b\xbb\xb6\xbe\xb1\xb7\xa0\xd4",
        // "sel_registerName" / M(Rot) / S(121) / L(16)
        "\xec\xde\xe5\xd8\xeb\xde\xe0\xe2\xec\xed\xde\xeb\xc7\xda\xe6\xde\x79",
        // "" / M(None) / S(0) / L(0)
        "\x9d\x4f\xdb\x2c\x5c\x36\xdf\x4a\x40\x5a\x5b\xf9\x55\xa3\x96\xbd\xcf\xce\xc6\xcc\x35\x36\xaf\xb7\xc4\x73\x18\xc9\x7d\x7f\x20\xcb",
        // "" / M(None) / S(0) / L(0)
        "\xd4\xc7\x27\x23\xf4\x15\x08\xa0\xaf\xc3\xe1\x8e\x2f\xda\x7a\x1a\xf0\xcb\x57\x44\x73\x51\x24\xfd\x29\x63\xb4\x8d\x68\x55\x9b\x63",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor3) / S(233) / L(37)
        "\x4c\x49\x5a\x5d\x43\x4c\x7d\x6a\x6e\x7b\x6a\x4c\x60\x7f\x76\x4e\x7f\x7f\x6a\x61\x6b\x66\x61\x68\x5f\x6e\x7b\x67\x4c\x60\x62\x7f\x60\x61\x6a\x61\x7b\x0f",
        // "SecKeychainSearchCopyNext" / M(Xor1) / S(217) / L(25)
        "\x8a\xbc\xba\x92\xbc\xa0\xba\xb1\xb8\xb0\xb7\x8a\xbc\xb8\xab\xba\xb1\x9a\xb6\xa9\xa0\x97\xbc\xa1\xad\xd9\xf2\xd5\xa4\xd8\xf2\x26\xc3\x7a",
        // "kSecClass" / M(Xor4) / S(49) / L(9)
        "\x7b\x43\x75\x73\x53\x7c\x71\x63\x63\x10\xba\xe6\xce\x3e\x30\x32",
        // "CFDictionaryAddValue" / M(Xor1) / S(183) / L(20)
        "\xf4\xf1\xf3\xde\xd4\xc3\xde\xd8\xd9\xd6\xc5\xce\xf6\xd3\xd3\xe1\xd6\xdb\xc2\xd2\xb7",
        // "" / M(None) / S(0) / L(0)
        "\x5a\xaa\x42\x1f\xbc\x59\xfc\xcd\xf1\xa9\x3c\x42\x08\x51\x39\xf7\xa3\x7f\xe0\x6f\xc0\xeb\x06\xfb\x84\xc1\x2a\xa7\xad\xcb\xe4\xf7",
        // "" / M(None) / S(0) / L(0)
        "\xeb\x40\xf8\xe0\x86\x2d\x9f\xab\x7d\xee\xef\xa2\xf4\x2f\x50\x6e\xd5\x3d\x0b\x75\x99\xf4\xf0\xa1\x76\x87\x9b\x7a\x1c\x02\x5f\x6c",
        // "BIO_write" / M(Xor1) / S(179) / L(9)
        "\xf1\xfa\xfc\xec\xc4\xc1\xda\xc7\xd6\xb3\x35\xa7\x71\x4d\x86\xf8",
        // "getifaddrs" / M(Xor4) / S(134) / L(10)
        "\x07\x05\x14\x09\x06\x01\x04\x04\x12\x13\x60\x35\x54\xf7\xa3\x82",
        // "" / M(None) / S(0) / L(0)
        "\x77\x80\x00\xcf\x3a\xaa\x26\xbf\x8c\x7d\xc9\x54\xa2\x10\x7a\x7d\x0c\xfb\x5e\x24\xd8\x12\xd3\xac\x20\xa2\x62\x95\xd4\xd3\x50\xc4",
        // "SecCertificateCopyData" / M(Xor2) / S(185) / L(22)
        "\xfd\xcb\xcd\xed\xcb\xdc\xda\xc7\xc8\xc7\xcd\xcf\xda\xcb\xed\xc1\xde\xd7\xea\xcf\xda\xcf\xae",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor2) / S(159) / L(40)
        "\x98\x9f\x9f\xeb\x9b\xec\x98\x98\x9c\xed\x9b\x97\x9d\xef\x9e\x96\xe8\xe8\x9b\x96\xea\x9f\x9a\xef\xeb\x9c\x9c\x9a\x9b\x9c\xea\x9f\x97\x96\xea\xe8\x98\xed\x98\x9e\xae\x58\x66\xd4\x73\x28\x79\xc5\x55",
        // "" / M(None) / S(0) / L(0)
        "\x73\xb7\x42\x08\x87\xd5\x34\xbe\x73\x3d\xb0\xbb\xfd\xc6\xc4\x92\xf3\x56\xb4\x7c\x69\x18\xc9\x4b\x1c\x1c\xf2\x81\x04\x05\xfc\x15",
        // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Xor2) / S(194) / L(39)
        "\xb1\xb4\xa6\x9b\x9f\x97\xa8\x9d\x9c\x97\xb1\x80\x97\x93\x86\x97\xa5\x9b\x86\x9a\xa6\x9b\x9f\x97\xbb\x9c\x86\x97\x80\x84\x93\x9e\xb4\x80\x9d\x9f\xb5\xbf\xa6\xf2\x8b\x56\x5b\xc2\xfb\x2d\xbc\x6a",
        // "init" / M(Xor2) / S(60) / L(4)
        "\x45\x42\x45\x58\x2c\x79\xd8\xb3\xaf\x01\x22\xee\xbd\x03\xa5\x9d",
        // "" / M(None) / S(0) / L(0)
        "\x39\x3a\x25\xe2\x3a\xf0\x4d\x86\xc1\xde\xd8\x24\xf6\xb5\x85\x44\x12\xae\x81\x26\x44\xec\xc8\xa8\xe1\xe1\xeb\x9b\x9a\xa2\x71\x7f",
        // "" / M(None) / S(0) / L(0)
        "\xb7\x68\x69\x2f\x4c\xf3\xca\xb8\xcf\x79\x23\x2c\x55\x55\xc2\x64\x83\xff\x92\x01\x46\xfb\xb4\x83\xa4\xcb\xd3\x34\x32\xdf\x3e\x75",
        // "sk_num" / M(Xor1) / S(75) / L(6)
        "\x38\x20\x14\x25\x3e\x26\x4b\xdb\x58\x5a\x0e\x60\x95\x73\xf6\xf8",
        // "" / M(None) / S(0) / L(0)
        "\x5f\xfe\xfa\x44\x43\x65\x1b\x5e\x39\xf6\x35\x51\x5f\xd9\xd1\x77\xf5\x65\xca\xd7\x93\xa7\xa6\x1b\x6d\x57\xfe\x61\x65\x9c\x35\x14",
        // "CFDateFormatterSetFormat" / M(Xor3) / S(85) / L(24)
        "\x35\x30\x32\x17\x02\x13\x30\x19\x04\x1b\x17\x02\x02\x13\x04\x25\x13\x02\x30\x19\x04\x1b\x17\x02\x76\x6e\x64\xf4\x4f\x3b\x33\x70\x15",
        // "X509_NAME_get_text_by_NID" / M(Xor1) / S(108) / L(25)
        "\x34\x59\x5c\x55\x33\x22\x2d\x21\x29\x33\x0b\x09\x18\x33\x18\x09\x14\x18\x33\x0e\x15\x33\x22\x25\x28\x6c\xba\xe2\x81\x8f\xd0\xd7\x15\x1e",
        // "sk_value" / M(Rot) / S(122) / L(8)
        "\xed\xe5\xd9\xf0\xdb\xe6\xef\xdf\x7a\x1e\xa6\xb9\x59\x39\x67\xa6",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor3) / S(80) / L(31)
        "\x1b\x33\x36\x24\x09\x00\x15\x34\x19\x13\x04\x19\x1f\x1e\x11\x02\x09\x26\x11\x1c\x05\x15\x33\x11\x1c\x1c\x32\x11\x13\x1b\x03\x70",
        // "" / M(None) / S(0) / L(0)
        "\x95\x82\xd4\x88\xe3\xc5\xb6\x02\xb3\xa9\xf5\xcb\x2b\x88\x21\xf7\xd7\x52\xa9\x0d\x13\xd5\x0a\xd6\xbb\x1e\x59\xc8\xa4\xbd\xe9\xe0",
        // "kCFTypeArrayCallBacks" / M(Xor4) / S(177) / L(21)
        "\x5d\x75\x70\x62\x4f\x46\x53\x77\x44\x44\x57\x4f\x75\x57\x5a\x5a\x74\x57\x55\x5d\x45\x36",
        // "OBJ_txt2obj" / M(Xor2) / S(134) / L(11)
        "\xd9\xd4\xdc\xc9\xe2\xee\xe2\xa4\xf9\xf4\xfc\x96\x29\x9a\x78\x03",
        // "SHA1" / M(Rot) / S(66) / L(4)
        "\x95\x8a\x83\x73\x42\xd8\x6d\x21\x6c\xc3\x17\x8d\x40\xd7\x37\xf3",
        // "" / M(None) / S(0) / L(0)
        "\x8c\x03\x3b\x29\x16\xd5\x5f\x60\x8b\xfb\x84\xec\x88\x48\x60\xdb\xfe\x1e\x7b\x0a\x6c\xca\xfa\x7d\x6f\x76\x10\x8d\x13\x23\xce\x92",
        // "" / M(None) / S(0) / L(0)
        "\x72\x8a\xa3\xa5\xc5\x50\x4d\xff\x4a\xfc\x17\xd3\x40\xb5\x18\xa6\x24\x18\xc7\x90\xf4\x17\x5c\x0f\x60\x68\xc9\xb6\x05\x62\x2d\xc2",
        // "CFStringCreateWithBytes" / M(Rot) / S(101) / L(23)
        "\xa8\xab\xb8\xd9\xd7\xce\xd3\xcc\xa8\xd7\xca\xc6\xd9\xca\xbc\xce\xd9\xcd\xa7\xde\xd9\xca\xd8\x65\xc8\xe5\x9b\x23\x00\xaa\x22\xd9",
        // "strcmp" / M(Xor4) / S(221) / L(6)
        "\xa3\xa4\xa2\xb3\xbd\xa0\xd0\x4d\xdf\x1d\x5c\xda\x30\x50\x99\x5c",
        // "Contents/_MASReceipt" / M(Xor4) / S(134) / L(20)
        "\xbd\x91\x90\x8a\x9b\x90\x8a\x8d\xd1\xa1\xb3\xbf\xad\xac\x9b\x9d\x9b\x97\x8e\x8a\xfe",
        // "kSecMatchSubjectContains" / M(Xor1) / S(207) / L(24)
        "\xa4\x9c\xaa\xac\x82\xae\xbb\xac\xa7\x9c\xba\xad\xa5\xaa\xac\xbb\x8c\xa0\xa1\xbb\xae\xa6\xa1\xbc\xcf\xa0\xa5\x73\xa6\x74\xa0\x01\xef",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Rot) / S(217) / L(43)
        "\x1c\x1f\x2e\x2b\x25\x1c\x4b\x3e\x3a\x4d\x3e\x30\x42\x4d\x41\x1f\x42\x45\x3e\x2c\x52\x4c\x4d\x3e\x46\x29\x3a\x4d\x41\x2b\x3e\x45\x3a\x4d\x42\x4f\x3e\x2d\x48\x1b\x3a\x4c\x3e\xd9\x00\x5b\x1a\x04\x16\x0d\x4c\x79",
        // "ASN1_INTEGER_free" / M(Xor2) / S(237) / L(17)
        "\xbe\xac\xb1\xce\xa0\xb6\xb1\xab\xba\xb8\xba\xad\xa0\x99\x8d\x9a\x9a\xff",
        // "" / M(None) / S(0) / L(0)
        "\x7c\xbc\xa9\xc3\xaa\x37\x33\x00\x80\x38\x59\x4c\x75\x86\x1a\x81\xcc\xa5\xfd\xf7\xe1\xc2\x89\x14\x8e\xa6\xc7\x08\xf4\xb6\x1c\xab",
        // "CFDateFormatterSetFormat" / M(Xor2) / S(192) / L(24)
        "\xa2\xa7\xa5\x80\x95\x84\xa7\x8e\x93\x8c\x80\x95\x95\x84\x93\xb2\x84\x95\xa7\x8e\x93\x8c\x80\x95\xe1\xae\x78\x15\xd4\xf4\x21\xe4\x37",
        // "kSecMatchLimitAll" / M(Xor3) / S(230) / L(17)
        "\x93\xab\x9d\x9b\xb5\x99\x8c\x9b\x90\xb4\x91\x95\x91\x8c\xb9\x94\x94\xf8",
        // "en0" / M(Xor2) / S(239) / L(3)
        "\x9a\x91\xcf\xff\xcd\xa8\x42\xad\x9e\xac\x9e\x04\xaf\xc1\xcb\xe9",
        // "PKCS7_verify" / M(Xor2) / S(215) / L(12)
        "\x97\x8c\x84\x94\xf0\x98\xb1\xa2\xb5\xae\xa1\xbe\xc7\x53\x9f\xec",
        // "OBJ_txt2obj" / M(Xor4) / S(93) / L(11)
        "\x9f\x92\x9a\x8f\xa4\xa8\xa4\xe2\xbf\xb2\xba\xd0\xbe\xcf\x3e\xa5",
        // "Contents/_MASReceipt/receipt" / M(Xor3) / S(103) / L(28)
        "\xcf\xe3\xe2\xf8\xe9\xe2\xf8\xff\xa3\xd3\xc1\xcd\xdf\xde\xe9\xef\xe9\xe5\xfc\xf8\xa3\xfe\xe9\xef\xe9\xe5\xfc\xf8\x8c\x37\x5e\xce\x1c\x9b\x1d\x47\xfc",
        // "" / M(None) / S(0) / L(0)
        "\xb1\xbe\xa4\x4e\xb2\xc5\x7a\x80\xe4\x86\x5e\xaa\x42\x06\xc1\x0b\x73\xb6\x9f\x8f\x50\x3e\x2e\xb0\xc1\x3c\x4d\xf4\x7c\xaf\xfe\xb8",
        // "" / M(None) / S(0) / L(0)
        "\x40\x92\x18\x3b\x08\x24\x1e\xb9\x2e\xf3\x6d\x87\x1a\x5c\xf6\xa5\x5f\xcc\x9c\xb3\x38\xa5\x13\x86\x09\x3f\xee\xc1\x9b\x27\xc6\x2d",
        // "1.50" / M(Rot) / S(57) / L(4)
        "\x6a\x67\x6e\x69\x39\xe2\x7f\xfc\x04\x15\x4a\xb7\xca\x0a\xaf\x3c",
        // "CFArrayCreateMutable" / M(Xor3) / S(60) / L(20)
        "\x12\x17\x10\x23\x23\x30\x28\x12\x23\x34\x30\x25\x34\x1c\x24\x25\x30\x33\x3d\x34\x51",
        // "CFDataCreateMutable" / M(Rot) / S(217) / L(19)
        "\x1c\x1f\x1d\x3a\x4d\x3a\x1c\x4b\x3e\x3a\x4d\x3e\x26\x4e\x4d\x3a\x3b\x45\x3e\xd9",
        // "EVP_MD_CTX_init" / M(Rot) / S(47) / L(15)
        "\x74\x85\x7f\x8e\x7c\x73\x8e\x72\x83\x87\x8e\x98\x9d\x98\xa3\x2f",
        // "pl.micropixels.NepTunes" / M(Xor4) / S(60) / L(23)
        "\xf0\xec\xae\xed\xe9\xe3\xf2\xef\xf0\xe9\xf8\xe5\xec\xf3\xae\xce\xe5\xf0\xd4\xf5\xee\xe5\xf3\x80\x2c\x26\x21\x10\x6f\x62\x0e\xfd",
        // "" / M(None) / S(0) / L(0)
        "\x8c\x5f\x34\x6b\xcb\x1f\x00\x5e\xdd\x06\x4b\x6f\xf2\xf4\x99\x32\x89\x9e\x28\xd7\xbf\xc2\xa2\x52\xba\xb1\x9e\xe1\x63\x10\xe0\x08",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor4) / S(94) / L(57)
        "\x13\x6f\x45\x4f\x48\x59\x51\x13\x70\x55\x5e\x4e\x5d\x4e\x45\x13\x77\x59\x45\x5f\x54\x5d\x55\x52\x4f\x13\x6f\x45\x4f\x48\x59\x51\x6e\x53\x53\x48\x7f\x59\x4e\x48\x55\x5a\x55\x5f\x5d\x48\x59\x4f\x12\x57\x59\x45\x5f\x54\x5d\x55\x52\x3c\xd9\xa5\x95\xfb\xe5\xbd\x72\x8e",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor4) / S(225) / L(37)
        "\x25\x20\x33\x34\x2a\x25\x14\x03\x07\x12\x03\x25\x09\x16\x1f\x27\x16\x16\x03\x08\x02\x0f\x08\x01\x36\x07\x12\x0e\x25\x09\x0b\x16\x09\x08\x03\x08\x12\x66",
        // "Contents/_MASReceipt" / M(Xor4) / S(117) / L(20)
        "\xda\xf6\xf7\xed\xfc\xf7\xed\xea\xb6\xc6\xd4\xd8\xca\xcb\xfc\xfa\xfc\xf0\xe9\xed\x99",
        // "kCFTypeArrayCallBacks" / M(Xor3) / S(182) / L(21)
        "\xa7\x8f\x8a\x98\xb5\xbc\xa9\x8d\xbe\xbe\xad\xb5\x8f\xad\xa0\xa0\x8e\xad\xaf\xa7\xbf\xcc",
        // "freeifaddrs" / M(Rot) / S(210) / L(11)
        "\x38\x44\x37\x37\x3b\x38\x33\x36\x36\x44\x45\xd2\xd9\xb3\x2a\x3a",
        // "CC_SHA1_Init" / M(Xor1) / S(254) / L(12)
        "\xbd\xbd\xa1\xad\xb6\xbf\xcf\xa1\xb7\x90\x97\x8a\xfe\x28\x60\x21",
        // "glob_b" / M(Xor4) / S(34) / L(6)
        "\x47\x4c\x4f\x42\x7f\x42\x20\x17\xaa\x75\xcc\x9d\xea\x25\x45\xd4",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor1) / S(138) / L(59)
        "\xbc\xbb\xb0\xbb\xcf\xb0\xbf\xc8\xb0\xbc\xbc\xb0\xb8\xc9\xb0\xbf\xb3\xb0\xb9\xcb\xb0\xba\xb2\xb0\xcc\xcc\xb0\xbf\xb2\xb0\xce\xbb\xb0\xbe\xcb\xb0\xcf\xb8\xb0\xb8\xbe\xb0\xbf\xb8\xb0\xce\xbb\xb0\xb3\xb2\xb0\xce\xcc\xb0\xbc\xc9\xb0\xbc\xba\x8a\xdf\x89\x75\x27\x75\xe4\x6c\x9e",
        // "CFBundleGetMainBundle" / M(Xor3) / S(1) / L(21)
        "\x54\x51\x55\x62\x79\x73\x7b\x72\x50\x72\x63\x5a\x76\x7e\x79\x55\x62\x79\x73\x7b\x72\x17",
        // "CFBundleCopyBundleURL" / M(Xor3) / S(42) / L(21)
        "\x03\x06\x02\x35\x2e\x24\x2c\x25\x03\x2f\x30\x39\x02\x35\x2e\x24\x2c\x25\x15\x12\x0c\x40",
        // "kSecMatchLimit" / M(Xor4) / S(147) / L(14)
        "\x5b\x63\x55\x53\x7d\x51\x44\x53\x58\x7c\x59\x5d\x59\x44\x30\xe4",
        // "ASN1_INTEGER_free" / M(Xor3) / S(169) / L(17)
        "\xfa\xe8\xf5\x8a\xe4\xf2\xf5\xef\xfe\xfc\xfe\xe9\xe4\xdd\xc9\xde\xde\xbb",
        // "longjmp" / M(Rot) / S(224) / L(7)
        "\x4c\x4f\x4e\x47\x4a\x4d\x50\xe0\x22\x8f\x73\x21\x83\x48\x8a\xbe",
        // "CFStringGetFileSystemRepresentation" / M(Xor1) / S(225) / L(35)
        "\xa2\xa7\xb2\x95\x93\x88\x8f\x86\xa6\x84\x95\xa7\x88\x8d\x84\xb2\x98\x92\x95\x84\x8c\xb3\x84\x91\x93\x84\x92\x84\x8f\x95\x80\x95\x88\x8e\x8f\xe1",
        // "/usr/lib/libSystem.dylib" / M(Xor2) / S(183) / L(24)
        "\xb9\xe3\xe5\xe4\xb9\xfa\xff\xf4\xb9\xfa\xff\xf4\xc5\xef\xe5\xe2\xf3\xfb\xb8\xf2\xef\xfa\xff\xf4\x96\x27\x58\x96\x01\xb7\x2a\x81\x2f",
        // "ASN1_get_object" / M(Xor4) / S(97) / L(15)
        "\x51\x43\x5e\x21\x4f\x77\x75\x64\x4f\x7f\x72\x7a\x75\x73\x64\x10",
        // "" / M(None) / S(0) / L(0)
        "\x73\x7d\x79\xc7\x3e\xa0\x6d\x65\xe6\x20\x67\x6c\x21\x1a\x8a\x65\x32\x22\x1d\xdd\x5b\xd7\x7f\x02\xf3\x42\x1c\xf0\x33\x09\xa0\x4b",
        // "alloc" / M(Xor2) / S(113) / L(5)
        "\x00\x0d\x0d\x0e\x02\x61\x43\x96\x0c\x65\x18\xcf\xe4\xbf\x0a\x55",
        // "setDelegate:" / M(Xor4) / S(149) / L(12)
        "\x23\x35\x24\x14\x35\x3c\x35\x37\x31\x24\x35\x6a\x50\x6b\xa1\x02",
        // "setDelegate:" / M(Xor4) / S(197) / L(12)
        "\x23\x35\x24\x14\x35\x3c\x35\x37\x31\x24\x35\x6a\x50\xff\xb4\xd5",
        // "SecKeychainSearchCopyNext" / M(Xor2) / S(144) / L(25)
        "\xe1\xd7\xd1\xf9\xd7\xcb\xd1\xda\xd3\xdb\xdc\xe1\xd7\xd3\xc0\xd1\xda\xf1\xdd\xc2\xcb\xfc\xd7\xca\xc6\xb2\xc4\x34\xc3\xcd\x99\xc0\xd7\x9b",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Rot) / S(105) / L(43)
        "\xac\xaf\xbe\xbb\xb5\xac\xdb\xce\xca\xdd\xce\xc0\xd2\xdd\xd1\xaf\xd2\xd5\xce\xbc\xe2\xdc\xdd\xce\xd6\xb9\xca\xdd\xd1\xbb\xce\xd5\xca\xdd\xd2\xdf\xce\xbd\xd8\xab\xca\xdc\xce\x69\x7f\x56\xef\xab\xa0\x78\x43\x4b",
        // "EVP_DigestFinal" / M(Rot) / S(35) / L(15)
        "\x68\x79\x73\x82\x67\x8c\x8a\x88\x96\x97\x69\x8c\x91\x84\x8f\x23",
        // "start" / M(Xor1) / S(83) / L(5)
        "\x20\x27\x32\x21\x27\x53\x34\xb9\xbb\x95\xab\x0b\x11\x26\xb6\xe0",
        // "CFReadStreamClose" / M(Xor4) / S(197) / L(17)
        "\x99\x9c\x88\xbf\xbb\xbe\x89\xae\xa8\xbf\xbb\xb7\x99\xb6\xb5\xa9\xbf\xda",
        // "kSecReturnRef" / M(Rot) / S(183) / L(13)
        "\x22\x0a\x1c\x1a\x09\x1c\x2b\x2c\x29\x25\x09\x1c\x1d\xb7\x99\xf7",
        // "CFDataCreate" / M(Rot) / S(109) / L(12)
        "\xb0\xb3\xb1\xce\xe1\xce\xb0\xdf\xd2\xce\xe1\xd2\x6d\x38\x4f\x95",
        // "EVP_get_digestbyname" / M(Xor2) / S(209) / L(20)
        "\x81\x92\x94\x9b\xa3\xa1\xb0\x9b\xa0\xad\xa3\xa1\xb7\xb0\xa6\xbd\xaa\xa5\xa9\xa1\xc4",
        // "CFDateCompare" / M(Xor3) / S(176) / L(13)
        "\x83\x86\x84\xa1\xb4\xa5\x83\xaf\xad\xb0\xa1\xb2\xa5\xc0\xe7\x4e",
        // "" / M(None) / S(0) / L(0)
        "\xd7\x36\xbb\xc5\x2b\x55\x0f\x34\xc1\x32\x97\x6c\xc5\x7f\xbb\xae\xbc\x66\x6d\xa8\xa8\xc5\xf5\xe6\x4c\x15\x21\xa8\x60\x25\x29\x32",
        // "CFArrayAppendValue" / M(Xor4) / S(115) / L(18)
        "\xca\xcf\xc8\xfb\xfb\xe8\xf0\xc8\xf9\xf9\xec\xe7\xed\xdf\xe8\xe5\xfc\xec\x89",
        // "" / M(None) / S(0) / L(0)
        "\xf4\xad\xc9\xef\x5f\xf6\x6f\x72\x7d\x68\xc4\x59\x0d\x26\x83\x33\x69\xd2\x4d\x81\xd2\x01\x3b\xc0\x6b\x2d\xaa\xcb\x6b\xae\xbc\x9c",
        // "NSApplicationMain" / M(Rot) / S(85) / L(17)
        "\xa3\xa8\x96\xc5\xc5\xc1\xbe\xb8\xb6\xc9\xbe\xc4\xc3\xa2\xb6\xbe\xc3\x55",
        // "ASN1_OBJECT_free" / M(Xor3) / S(70) / L(16)
        "\x16\x04\x19\x66\x08\x18\x15\x1d\x12\x14\x03\x08\x31\x25\x32\x32\x57",
        // "CFDateCreate" / M(Rot) / S(211) / L(12)
        "\x16\x19\x17\x34\x47\x38\x16\x45\x38\x34\x47\x38\xd3\x9c\x00\xa0",
        // "X509_STORE_free" / M(Rot) / S(109) / L(15)
        "\xc5\xa2\x9d\xa6\xcc\xc0\xc1\xbc\xbf\xb2\xcc\xd3\xdf\xd2\xd2\x6d",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Rot) / S(248) / L(66)
        "\x27\x4b\x71\x6b\x6c\x5d\x65\x27\x44\x61\x5a\x6a\x59\x6a\x71\x27\x3e\x6a\x59\x65\x5d\x6f\x67\x6a\x63\x6b\x27\x3b\x67\x6a\x5d\x3e\x67\x6d\x66\x5c\x59\x6c\x61\x67\x66\x26\x5e\x6a\x59\x65\x5d\x6f\x67\x6a\x63\x27\x3b\x67\x6a\x5d\x3e\x67\x6d\x66\x5c\x59\x6c\x61\x67\x66\xf8",
        // "sk_value" / M(Xor4) / S(68) / L(8)
        "\x33\x2b\x1f\x36\x21\x2c\x35\x25\x40\x99\x93\x07\x1e\xc2\x7b\x0a",
        // "BIO_free" / M(Xor3) / S(104) / L(8)
        "\x3a\x31\x37\x27\x1e\x0a\x1d\x1d\x78\xaa\x6b\x14\xfd\x67\xa8\xc0",
        // "" / M(None) / S(0) / L(0)
        "\x8a\xd8\x41\x5c\xcc\xff\x40\xdc\x66\x71\xdd\xbf\x86\x1e\x16\x74\x79\xd0\x07\x7e\x4f\x0a\x48\x01\x61\x01\x6b\xd8\x73\x52\x44\x86",
        // "" / M(None) / S(0) / L(0)
        "\xd2\xcc\xf2\x76\xb6\x7f\x9e\xca\x7b\xc2\x33\xb7\x32\xbf\x31\x8a\x11\x18\x8e\xc6\x38\x44\x7e\x95\xe8\x73\xd3\x36\x26\xfe\x76\xfd",
        // "" / M(None) / S(0) / L(0)
        "\x56\x9d\x8a\xac\xab\xfb\x47\xf3\x6f\x1b\x68\x8b\xcd\x95\x2d\x7f\x56\xaf\xaf\x8d\xde\xc3\x94\xcf\xee\x46\xb4\x2c\xca\xac\xdf\x9f",
        // "glob" / M(Xor2) / S(133) / L(4)
        "\xf2\xf9\xfa\xf7\x95\x5b\x59\x61\x4c\x9b\x35\xeb\xef\x6b\x85\x66",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor3) / S(156) / L(29)
        "\xa9\x81\x84\x96\xbb\xb2\xa7\x86\xab\xa1\xb6\xab\xad\xac\xa3\xb0\xbb\x89\xa7\xbb\x81\xa3\xae\xae\x80\xa3\xa1\xa9\xb1\xc2\xdb\x80\xf2\x38\xc3\xc9\x76\xeb",
        // "pl.micropixels.NepTunes" / M(Xor4) / S(116) / L(23)
        "\xf0\xec\xae\xed\xe9\xe3\xf2\xef\xf0\xe9\xf8\xe5\xec\xf3\xae\xce\xe5\xf0\xd4\xf5\xee\xe5\xf3\x80\x6b\x91\x42\x32\x33\xf0\xe1\x6c",
        // "c2i_ASN1_INTEGER" / M(Xor4) / S(129) / L(16)
        "\xf2\xa3\xf8\xce\xd0\xc2\xdf\xa0\xce\xd8\xdf\xc5\xd4\xd6\xd4\xc3\x91",
        // "" / M(None) / S(0) / L(0)
        "\x11\xad\xd1\xba\xa0\x5f\x03\xff\xbb\xbf\x46\xd7\x86\x98\x90\x63\x98\x0f\xf5\xfa\x15\x03\xce\x4e\x1a\xb6\x82\x86\x34\xa9\x16\x1d",
        // "SHA1_Update" / M(Xor2) / S(174) / L(11)
        "\xed\xf6\xff\x8f\xe1\xeb\xce\xda\xdf\xca\xdb\xbe\x36\x8b\x48\x97",
        // "ASN1_get_object" / M(Rot) / S(205) / L(15)
        "\x0e\x20\x1b\xfe\x2c\x34\x32\x41\x2c\x3c\x2f\x37\x32\x30\x41\xcd",
        // "" / M(None) / S(0) / L(0)
        "\x81\x51\x2d\x3f\x74\xdd\xfc\x14\xd6\x9a\x7d\x96\x16\x1e\x52\x31\xff\x2b\x5a\xc0\xd9\x7d\xb0\x05\x6e\xc9\x6d\xb8\x9b\x0b\x70\x69",
        // "" / M(None) / S(0) / L(0)
        "\xa2\x11\x95\x7c\x15\x79\x19\x0a\xb2\x7a\xee\x07\x46\xb9\xf6\x65\x28\x6b\x18\x2d\x49\x80\x50\xfd\xae\x2a\x34\x32\x2c\x41\x67\x55",
        // "pl.micropixels.NepTunes" / M(Rot) / S(233) / L(23)
        "\x59\x55\x17\x56\x52\x4c\x5b\x58\x59\x52\x61\x4e\x55\x5c\x17\x37\x4e\x59\x3d\x5e\x57\x4e\x5c\xe9\x3a\x14\x35\x7c\x60\x1c\x75\xb7",
        // "" / M(None) / S(0) / L(0)
        "\x48\xe6\xf2\xe7\x79\xb8\xf0\x7b\x09\x82\xfa\xd3\xd5\x18\x0e\x67\xde\x31\x3c\xe0\x53\xee\x7b\x88\x4e\x3b\x28\x79\x1c\x1c\x56\x7f",
        // "" / M(None) / S(0) / L(0)
        "\x8e\x4e\xb1\x22\x7d\x02\x16\x30\x04\xff\xa2\x13\xe6\x57\xc9\x0d\xbd\x27\xfc\x77\xe9\xf8\xb1\xae\x9f\x53\x4a\xf5\x66\x0b\x31\xd3",
        // "EVP_DigestFinal" / M(Xor1) / S(230) / L(15)
        "\xa3\xb0\xb6\xb9\xa2\x8f\x81\x83\x95\x92\xa0\x8f\x88\x87\x8a\xe6",
        // "SHA1_Final" / M(Rot) / S(84) / L(10)
        "\xa7\x9c\x95\x85\xb3\x9a\xbd\xc2\xb5\xc0\x54\x22\xc6\x03\x19\x34",
        // "en0" / M(Xor4) / S(135) / L(3)
        "\x15\x1e\x40\x70\x96\x31\x51\x4d\xf1\xf8\x32\x05\x3c\xde\x6b\xb7",
        // "SKReceiptRefreshRequest" / M(Xor2) / S(51) / L(23)
        "\x40\x58\x41\x76\x70\x76\x7a\x63\x67\x41\x76\x75\x61\x76\x60\x7b\x41\x76\x62\x66\x76\x60\x67\x13\xca\x02\x39\xa7\xe1\x6e\x4d\x1b",
        // "NSApplicationMain" / M(Xor1) / S(116) / L(17)
        "\x3a\x27\x35\x04\x04\x18\x1d\x17\x15\x00\x1d\x1b\x1a\x39\x15\x1d\x1a\x74",
        // "SHA1_Init" / M(Xor4) / S(242) / L(9)
        "\x73\x68\x61\x11\x7f\x69\x4e\x49\x54\x20\x27\x0a\x26\x8f\xac\x0a",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor4) / S(222) / L(29)
        "\x9f\xb7\xb2\xa0\x8d\x84\x91\xb0\x9d\x97\x80\x9d\x9b\x9a\x95\x86\x8d\xbf\x91\x8d\xb7\x95\x98\x98\xb6\x95\x97\x9f\x87\xf4\x79\x2a\x93\xeb\x97\xc9\x83\x0a",
        // "" / M(None) / S(0) / L(0)
        "\xef\x6e\x52\x8a\xcb\x5f\x3f\xcc\xe0\x57\x44\x7b\xd2\x03\xc2\xe1\xc0\x66\x5d\xf8\x5b\x3d\x92\x7c\xff\x0e\x9b\x2c\x9f\xb9\x8b\xa2",
        // "." / M(Xor1) / S(155) / L(1)
        "\xb5\x9b\x6e\xf1\xd7\x82\x22\xbc\x4f\xeb\x0d\xed\xae\x3d\x7e\x1f",
        // "strncmp" / M(Xor2) / S(34) / L(7)
        "\x41\x46\x40\x5c\x51\x5f\x42\x32\x5f\x9a\xd7\xd9\x91\x20\xaf\xf8",
        // "" / M(None) / S(0) / L(0)
        "\xfa\x2c\x47\x99\x63\x63\x92\xd1\xf7\xf2\xf8\x35\xe7\x56\x77\x31\xdf\x6e\xaf\x6d\x6a\x89\xde\xab\x56\x2e\xdd\xae\x24\xe2\x10\x89",
        // "CFBundleVersion" / M(Xor2) / S(21) / L(15)
        "\x46\x43\x47\x70\x6b\x61\x69\x60\x53\x60\x77\x76\x6c\x6a\x6b\x05",
        // "CC_SHA1_Final" / M(Xor4) / S(34) / L(13)
        "\x63\x63\x7f\x73\x68\x61\x11\x7f\x66\x49\x4e\x41\x4c\x20\x83\x7d",
        // "Contents" / M(Rot) / S(139) / L(8)
        "\xce\xfa\xf9\xff\xf0\xf9\xff\xfe\x8b\x74\xbe\x39\x2a\x7f\x2c\xe4",
        // "" / M(None) / S(0) / L(0)
        "\xb4\x64\x77\xab\xa2\x3a\x8b\x5c\x1e\x25\x57\x60\x29\x56\x77\x0a\xa1\x9c\xda\x41\xf1\x05\x8a\x09\xa8\x00\xb7\xca\x31\xbf\x9b\x91",
        // "sk_num" / M(Xor4) / S(238) / L(6)
        "\x93\x8b\xbf\x8e\x95\x8d\xe0\x23\x77\x08\x97\x0f\xe3\x71\x5a\xeb",
        // "" / M(None) / S(0) / L(0)
        "\x5f\xfa\xbd\x55\xde\xc1\x9d\x9b\x87\xc4\xf9\x1c\xa1\x26\xda\x24\xab\x68\x08\x96\xa1\xd6\x9a\x06\xaf\x20\x40\xcd\x33\x43\x7c\x28",
        // "kSecMatchLimit" / M(Xor2) / S(229) / L(14)
        "\x9e\xa6\x90\x96\xb8\x94\x81\x96\x9d\xb9\x9c\x98\x9c\x81\xf5\xff",
        // "CFNumberCreate" / M(Xor1) / S(191) / L(14)
        "\xfc\xf9\xf1\xca\xd2\xdd\xda\xcd\xfc\xcd\xda\xde\xcb\xda\xbf\xa4",
        // "objc_getClass" / M(Rot) / S(38) / L(13)
        "\x95\x88\x90\x89\x85\x8d\x8b\x9a\x69\x92\x87\x99\x99\x26\x50\x31",
        // "CFDataCreateMutable" / M(Xor2) / S(155) / L(19)
        "\xcc\xc9\xcb\xee\xfb\xee\xcc\xfd\xea\xee\xfb\xea\xc2\xfa\xfb\xee\xed\xe3\xea\x8f",
        // "kCFDateFormatterTimeZone" / M(Xor1) / S(77) / L(24)
        "\x26\x0e\x0b\x09\x2c\x39\x28\x0b\x22\x3f\x20\x2c\x39\x39\x28\x3f\x19\x24\x20\x28\x17\x22\x23\x28\x4d\xd1\x03\xa6\xef\xd5\xf8\xbc\xca",
        // "X509_get_ext_by_OBJ" / M(Xor1) / S(87) / L(19)
        "\x0f\x62\x67\x6e\x08\x30\x32\x23\x08\x32\x2f\x23\x08\x35\x2e\x08\x18\x15\x1d\x57",
        // "CFDictionarySetValue" / M(Xor1) / S(173) / L(20)
        "\xee\xeb\xe9\xc4\xce\xd9\xc4\xc2\xc3\xcc\xdf\xd4\xfe\xc8\xd9\xfb\xcc\xc1\xd8\xc8\xad",
        // "globfree" / M(Xor4) / S(58) / L(8)
        "\xc7\xcc\xcf\xc2\xc6\xd2\xc5\xc5\xa0\xc9\xf9\x95\xa8\xf1\x3c\x00",
        // "" / M(None) / S(0) / L(0)
        "\x8e\x7e\xc9\x37\xd9\x7e\x63\xb7\x01\x11\x70\x95\x08\x7f\xa0\x1c\x74\x7c\x07\x4f\xec\x86\x34\x23\x20\x22\x45\x00\xfe\x85\x2f\x97",
        // "CFDateFormatterCreateDateFromString" / M(Xor2) / S(182) / L(35)
        "\xd1\xd4\xd6\xf3\xe6\xf7\xd4\xfd\xe0\xff\xf3\xe6\xe6\xf7\xe0\xd1\xe0\xf7\xf3\xe6\xf7\xd6\xf3\xe6\xf7\xd4\xe0\xfd\xff\xc1\xe6\xe0\xfb\xfc\xf5\x92",
        // "CFDataCreate" / M(Rot) / S(188) / L(12)
        "\xff\x02\x00\x1d\x30\x1d\xff\x2e\x21\x1d\x30\x21\xbc\xe7\x04\xdf",
        // "" / M(None) / S(0) / L(0)
        "\x4d\xba\xb7\xfc\xf4\x7a\x81\xc5\x64\xff\x4f\x3f\x55\xdc\xc5\x52\x4a\xd4\x1a\x41\x53\x44\xbd\xbc\x64\x80\xfd\xf8\x71\xed\x27\x43",
        // "longjmp" / M(Rot) / S(169) / L(7)
        "\x15\x18\x17\x10\x13\x16\x19\xa9\x71\xac\x42\xd0\x32\xb9\x8e\x6f",
        // "longjmp" / M(Xor4) / S(89) / L(7)
        "\xfc\xff\xfe\xf7\xfa\xfd\xe0\x90\x8f\xea\x0b\x19\x4c\x43\xc1\xca",
        // "CFReadStreamOpen" / M(Rot) / S(13) / L(16)
        "\x50\x53\x5f\x72\x6e\x71\x60\x81\x7f\x72\x6e\x7a\x5c\x7d\x72\x7b\x0d",
        // "CFBundleGetMainBundle" / M(Xor4) / S(76) / L(21)
        "\xcb\xce\xca\xfd\xe6\xec\xe4\xed\xcf\xed\xfc\xc5\xe9\xe1\xe6\xca\xfd\xe6\xec\xe4\xed\x88",
        // "X509_STORE_free" / M(Rot) / S(219) / L(15)
        "\x33\x10\x0b\x14\x3a\x2e\x2f\x2a\x2d\x20\x3a\x41\x4d\x40\x40\xdb",
        // "kSecMatchSearchList" / M(Xor4) / S(248) / L(19)
        "\x0b\x33\x05\x03\x2d\x01\x14\x03\x08\x33\x05\x01\x12\x03\x08\x2c\x09\x13\x14\x60",
        // "PKCS7_free" / M(Xor3) / S(187) / L(10)
        "\x9b\x80\x88\x98\xfc\x94\xad\xb9\xae\xae\xcb\x5b\xbb\x13\x3c\xf3",
        // "BIO_new" / M(Xor4) / S(107) / L(7)
        "\xf2\xf9\xff\xef\xde\xd5\xc7\xb0\x0c\x59\x02\x90\xec\xe7\x4b\x42",
        // "CFDictionaryCreateMutable" / M(Xor1) / S(151) / L(25)
        "\xd4\xd1\xd3\xfe\xf4\xe3\xfe\xf8\xf9\xf6\xe5\xee\xd4\xe5\xf2\xf6\xe3\xf2\xda\xe2\xe3\xf6\xf5\xfb\xf2\x97\xdd\x94\xdc\xf8\x0d\x43\xe3\x02",
        // "CFReadStreamCreateWithFile" / M(Xor2) / S(86) / L(26)
        "\x36\x33\x27\x10\x14\x11\x26\x01\x07\x10\x14\x18\x36\x07\x10\x14\x01\x10\x22\x1c\x01\x1d\x33\x1c\x19\x10\x75\x40\xc4\xf3\xeb\x53\xa2\x4d\x45",
        // "1.2.840.113635.100.6.11.1" / M(Xor3) / S(135) / L(25)
        "\x98\x87\x9b\x87\x91\x9d\x99\x87\x98\x98\x9a\x9f\x9a\x9c\x87\x98\x99\x99\x87\x9f\x87\x98\x98\x87\x98\xa9\x45\xd4\x24\xe5\xb4\xbc\x61\x09",
        // "EVP_DigestInit" / M(Xor3) / S(27) / L(14)
        "\x6e\x7d\x7b\x74\x6f\x42\x4c\x4e\x58\x5f\x62\x45\x42\x5f\x2b\x6f",
        // "" / M(None) / S(0) / L(0)
        "\x8e\xe0\x4c\x93\xc8\x84\x19\x9b\xfc\xb6\x28\x7e\x52\x8d\xad\x4c\xfa\x60\xbc\x70\x89\x16\xb1\xbd\x90\x57\x9c\xab\x17\xd3\x06\x2f",
        // "ASN1_INTEGER_get" / M(Xor2) / S(30) / L(16)
        "\x4e\x5c\x41\x3e\x50\x46\x41\x5b\x4a\x48\x4a\x5d\x50\x68\x6a\x7b\x0f",
        // "" / M(None) / S(0) / L(0)
        "\x70\x53\x60\xbe\xdf\x6d\x0f\xa2\x9d\xb1\x17\x58\x78\xbd\xd7\x1e\x0a\x21\xe7\x07\x78\x02\x61\x72\x5e\xc7\x8c\x0c\x31\xa0\xab\xe5",
        // "" / M(None) / S(0) / L(0)
        "\xd5\x19\x1f\x5f\xa8\x75\x2d\x6e\x4a\x7f\xd2\xb9\x32\xd7\xdb\x56\x36\xfe\x60\x6c\x1c\xef\x1e\xfc\x70\x2d\xff\x55\xc1\xf9\x49\xd2",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor4) / S(169) / L(59)
        "\xd2\xd5\xde\xd5\xa1\xde\xd1\xa6\xde\xd2\xd2\xde\xd6\xa7\xde\xd1\xdd\xde\xd7\xa5\xde\xd4\xdc\xde\xa2\xa2\xde\xd1\xdc\xde\xa0\xd5\xde\xd0\xa5\xde\xa1\xd6\xde\xd6\xd0\xde\xd1\xd6\xde\xa0\xd5\xde\xdd\xdc\xde\xa0\xa2\xde\xd2\xa7\xde\xd2\xd4\xe4\xf7\x63\x3b\xb7\x58\xc9\x92\x3d",
        // "" / M(None) / S(0) / L(0)
        "\xf7\x71\x8a\xa6\x4c\xb4\xc5\xdf\xf9\xb0\x57\xae\x45\x3b\xfc\x45\xe7\x12\x79\x75\x24\x50\x1f\xed\x36\x48\x48\x03\x15\x2e\xd5\x83",
        // "sha1" / M(Rot) / S(23) / L(4)
        "\x8a\x7f\x78\x48\x17\x49\xfe\x2a\xf9\xba\x78\xd7\x3c\x44\xa8\xeb",
        // "NSApplicationMain" / M(Rot) / S(223) / L(17)
        "\x2d\x32\x20\x4f\x4f\x4b\x48\x42\x40\x53\x48\x4e\x4d\x2c\x40\x48\x4d\xdf",
        // "Contents/_MASReceipt" / M(Xor4) / S(169) / L(20)
        "\x9e\xb2\xb3\xa9\xb8\xb3\xa9\xae\xf2\x82\x90\x9c\x8e\x8f\xb8\xbe\xb8\xb4\xad\xa9\xdd",
        // "" / M(None) / S(0) / L(0)
        "\xef\x5e\xee\xef\x12\x19\xb8\xb2\x02\xb9\xaf\x75\x4a\xb2\xbc\x2b\x1f\x4a\x9d\xc1\x20\x24\xac\xee\x10\x9e\xb7\xd9\x5b\x8a\x0a\xc7",
        // "kCFTypeDictionaryValueCallBacks" / M(Rot) / S(87) / L(31)
        "\xc2\x9a\x9d\xab\xd0\xc7\xbc\x9b\xc0\xba\xcb\xc0\xc6\xc5\xb8\xc9\xd0\xad\xb8\xc3\xcc\xbc\x9a\xb8\xc3\xc3\x99\xb8\xba\xc2\xca\x57",
        // "objc_msgSend" / M(Xor1) / S(221) / L(12)
        "\xb2\xbf\xb7\xbe\x82\xb0\xae\xba\x8e\xb8\xb3\xb9\xdd\x25\x68\x35",
        // "CFReadStreamCreateWithFile" / M(Xor4) / S(187) / L(26)
        "\xd2\xd7\xc3\xf4\xf0\xf5\xc2\xe5\xe3\xf4\xf0\xfc\xd2\xe3\xf4\xf0\xe5\xf4\xc6\xf8\xe5\xf9\xd7\xf8\xfd\xf4\x91\x6e\x4a\x2c\xfd\xc2\xb2\x45\x0d",
        // "objc_msgSend" / M(Xor2) / S(186) / L(12)
        "\xc5\xc8\xc0\xc9\xf5\xc7\xd9\xcd\xf9\xcf\xc4\xce\xaa\xba\x26\xfb",
        // "X509_free" / M(Rot) / S(231) / L(9)
        "\x3f\x1c\x17\x20\x46\x4d\x59\x4c\x4c\xe7\x5e\x10\x1e\xe6\xe1\x4f",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor3) / S(154) / L(36)
        "\xfc\xf9\xfd\xca\xd1\xdb\xd3\xda\xf8\xda\xcb\xe9\xde\xd3\xca\xda\xf9\xd0\xcd\xf6\xd1\xd9\xd0\xfb\xd6\xdc\xcb\xd6\xd0\xd1\xde\xcd\xc6\xf4\xda\xc6\xbf",
        // "" / M(None) / S(0) / L(0)
        "\x9e\xa0\x77\x2a\x38\xdb\xe2\xb1\xf4\xef\x2a\x8c\x65\x05\xb8\x9f\xc9\x2d\x05\xff\x32\x9e\xf4\x83\xcd\x92\xd9\xb6\xe4\x5f\x51\xd6",
        // "CFDateFormatterSetProperty" / M(Xor3) / S(81) / L(26)
        "\x37\x32\x30\x15\x00\x11\x32\x1b\x06\x19\x15\x00\x00\x11\x06\x27\x11\x00\x24\x06\x1b\x04\x11\x06\x00\x0d\x74\x9b\x9f\x0c\x72\x25\x1c\xd3\xb0",
        // "dlsym" / M(Xor3) / S(218) / L(5)
        "\x8e\x86\x99\x93\x87\xea\xd9\xa0\x81\x7c\x3b\xdb\x46\x78\x70\x0d",
        // "CFDictionaryGetValue" / M(Rot) / S(141) / L(20)
        "\xd0\xd3\xd1\xf6\xf0\x01\xf6\xfc\xfb\xee\xff\x06\xd4\xf2\x01\xe3\xee\xf9\x02\xf2\x8d",
        // "SHA1" / M(Xor2) / S(157) / L(4)
        "\xde\xc5\xcc\xbc\x8d\x3d\x08\x4f\xe9\xf3\x46\x0a\xeb\x19\x87\x54",
        // "OpenSSL_add_all_digests" / M(Rot) / S(7) / L(23)
        "\x56\x77\x6c\x75\x5a\x5a\x53\x66\x68\x6b\x6b\x66\x68\x73\x73\x66\x6b\x70\x6e\x6c\x7a\x7b\x7a\x07\x21\x82\x4a\x4e\x60\x94\xe5\x20",
        // "" / M(None) / S(0) / L(0)
        "\xd4\x89\x9c\x64\x82\x53\x59\x5f\x9a\x31\x2c\x7b\xf2\x83\xce\xb5\x51\x3f\xd1\x50\xb7\x07\xfc\xb6\x30\x91\x9e\x3c\x55\xdf\x6c\x10",
        // "CC_SHA1_Final" / M(Xor3) / S(4) / L(13)
        "\x57\x57\x4b\x47\x5c\x55\x25\x4b\x52\x7d\x7a\x75\x78\x14\xe1\x85",
        // "glob_b" / M(Xor2) / S(82) / L(6)
        "\x25\x2e\x2d\x20\x1d\x20\x42\x62\x36\x99\x51\x6a\xad\x4a\xa3\xab",
        // "CFNumberCreate" / M(Xor4) / S(169) / L(14)
        "\xd3\xd6\xde\xe5\xfd\xf2\xf5\xe2\xd3\xe2\xf5\xf1\xe4\xf5\x90\x0e",
        // "EVP_DigestUpdate" / M(Rot) / S(187) / L(16)
        "\x00\x11\x0b\x1a\xff\x24\x22\x20\x2e\x2f\x10\x2b\x1f\x1c\x2f\x20\xbb",
        // "" / M(None) / S(0) / L(0)
        "\x12\xc8\x04\x44\x4f\xe5\x2a\xf8\xd8\xbc\xe3\xd4\x52\x07\x31\x1e\x8d\x36\x67\x5e\x74\x9b\x87\x7e\xce\x2a\xe1\xa9\xc3\x5f\xed\x59",
        // "" / M(None) / S(0) / L(0)
        "\x1a\x2c\x1a\xcd\x38\xd9\x88\xbd\xc8\x5f\x65\x92\x75\xf0\x50\x23\xd8\x16\xb4\x01\x13\xda\x00\x70\x8b\xfc\x60\x18\xee\xb2\x0c\x9d",
        // "%02X:" / M(Rot) / S(219) / L(5)
        "\x00\x0b\x0d\x33\x15\xdb\x4b\xf1\x9a\x3a\x46\x29\x31\xf9\x5f\x8c",
        // "%02x" / M(Xor4) / S(59) / L(4)
        "\x95\x80\x82\xc8\xb0\xd5\xfa\x6b\xd0\xa9\x62\x04\x52\xaa\xa4\x57",
        // "glob" / M(Rot) / S(93) / L(4)
        "\xc4\xc9\xcc\xbf\x5d\x6b\xfe\xff\x07\xbc\x34\x93\x31\x9c\xd4\xfa",
        // "freeifaddrs" / M(Rot) / S(243) / L(11)
        "\x59\x65\x58\x58\x5c\x59\x54\x57\x57\x65\x66\xf3\xfe\x8a\x71\x66",
        // "X509_free" / M(Xor2) / S(47) / L(9)
        "\x67\x0a\x0f\x06\x60\x59\x4d\x5a\x5a\x3f\xf3\xc9\x6e\x31\xea\x0d",
        // "kSecMatchSearchList" / M(Xor4) / S(54) / L(19)
        "\x53\x6b\x5d\x5b\x75\x59\x4c\x5b\x50\x6b\x5d\x59\x4a\x5b\x50\x74\x51\x4b\x4c\x38",
        // "kSecReturnRef" / M(Xor4) / S(40) / L(13)
        "\xeb\xd3\xe5\xe3\xd2\xe5\xf4\xf5\xf2\xee\xd2\xe5\xe6\x80\x68\x1e",
        // "" / M(None) / S(0) / L(0)
        "\x62\x16\x81\xe1\x1f\xc2\xed\x83\xd3\x8b\x12\x40\x14\x1f\xc3\x18\xc0\x6a\x4f\xd0\x1c\xe0\x1d\xa0\x0d\xd4\xe9\x8b\x15\x49\x04\x4b",
        // "" / M(None) / S(0) / L(0)
        "\xaa\x18\x5b\xc1\x28\xe2\x50\x0a\x51\x5f\xf2\x2e\x1d\x62\x5a\x5f\xe3\xea\xc5\x16\x4b\x93\x4b\xa2\x1e\x12\x67\x38\xa8\xec\x40\x0d",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Xor1) / S(201) / L(54)
        "\xe6\x9a\xb0\xba\xbd\xac\xa4\xe6\x85\xa0\xab\xbb\xa8\xbb\xb0\xe6\x8f\xbb\xa8\xa4\xac\xbe\xa6\xbb\xa2\xba\xe6\x9a\xac\xaa\xbc\xbb\xa0\xbd\xb0\xe7\xaf\xbb\xa8\xa4\xac\xbe\xa6\xbb\xa2\xe6\x9a\xac\xaa\xbc\xbb\xa0\xbd\xb0\xc9",
        // "" / M(None) / S(0) / L(0)
        "\x70\x5c\x97\xe6\x3d\x25\x1e\x71\xf2\x74\x32\x9b\x2b\x57\x08\xdc\x5a\x9f\x16\x5f\xe2\xcf\xb7\x40\x48\xc7\x9b\x60\xf8\x63\x0c\xcf",
        // "CC_SHA1" / M(Xor1) / S(70) / L(7)
        "\x05\x05\x19\x15\x0e\x07\x77\x46\x9f\x5b\x00\x60\x35\x9b\x62\x6c",
        // "" / M(None) / S(0) / L(0)
        "\xf8\x1f\xe6\xaf\x6f\xd4\x34\x28\x6c\xde\xce\xf5\xdb\x31\x11\x44\xd4\x9d\x23\xa4\x5e\xd1\x49\xe6\xac\xc9\xb8\x4d\xd1\xea\x84\x3c",
        // "BIO_free" / M(Xor1) / S(86) / L(8)
        "\x14\x1f\x19\x09\x30\x24\x33\x33\x56\x0d\xee\x1f\xec\x43\xd3\x3e",
        // "CC_SHA1_Update" / M(Xor4) / S(146) / L(14)
        "\x63\x63\x7f\x73\x68\x61\x11\x7f\x75\x50\x44\x41\x54\x45\x20\x18",
        // "CFArrayAppendValue" / M(Xor4) / S(219) / L(18)
        "\x02\x07\x00\x33\x33\x20\x38\x00\x31\x31\x24\x2f\x25\x17\x20\x2d\x34\x24\x41",
        // "Contents" / M(Xor3) / S(165) / L(8)
        "\xf6\xda\xdb\xc1\xd0\xdb\xc1\xc6\xb5\x8e\x0d\x86\x30\x2d\x1e\xb2",
        // "SHA1_Update" / M(Rot) / S(23) / L(11)
        "\x6a\x5f\x58\x48\x76\x6c\x87\x7b\x78\x8b\x7c\x17\x31\xa1\x1b\x74",
        // "CFArrayGetCount" / M(Xor4) / S(202) / L(15)
        "\xe3\xe6\xe1\xd2\xd2\xc1\xd9\xe7\xc5\xd4\xe3\xcf\xd5\xce\xd4\xa0",
        // "globfree" / M(Rot) / S(17) / L(8)
        "\x78\x7d\x80\x73\x77\x83\x76\x76\x11\xb0\x97\x30\xfa\x45\x9b\x23",
        // "strncmp" / M(Xor1) / S(20) / L(7)
        "\x67\x60\x66\x7a\x77\x79\x64\x14\xd6\x0d\xc6\xc8\x16\x51\x51\xf1",
        // "sk_num" / M(Rot) / S(91) / L(6)
        "\xce\xc6\xba\xc9\xd0\xc8\x5b\x02\x88\x37\x68\x4b\x16\x06\x55\x1d",
        // "" / M(None) / S(0) / L(0)
        "\x4f\x2b\x3e\xbe\x3c\xa1\xbf\x8f\x2f\x4b\x46\xcf\xf6\x88\xe3\x12\x71\xb4\x27\xce\xd0\xd8\x20\x87\x3b\xf1\x66\x4b\xef\xb3\xaf\x29",
        // "CFAbsoluteTimeGetCurrent" / M(Xor2) / S(97) / L(24)
        "\x03\x06\x01\x22\x33\x2f\x2c\x35\x34\x25\x14\x29\x2d\x25\x07\x25\x34\x03\x35\x32\x32\x25\x2e\x34\x40\xc5\x43\x76\x14\x96\x22\xee\xd5",
        // "RTLD_MAIN_ONLY" / M(Xor4) / S(104) / L(14)
        "\xd2\xd4\xcc\xc4\xdf\xcd\xc1\xc9\xce\xdf\xcf\xce\xcc\xd9\x80\x5c",
        // "CFDataGetBytePtr" / M(Xor4) / S(168) / L(16)
        "\x6b\x6e\x6c\x49\x5c\x49\x6f\x4d\x5c\x6a\x51\x5c\x4d\x78\x5c\x5a\x28",
        // "objc_msgSend" / M(Xor3) / S(201) / L(12)
        "\xb6\xbb\xb3\xba\x86\xb4\xaa\xbe\x8a\xbc\xb7\xbd\xd9\xd0\x2c\xcd",
        // "dlopen" / M(Xor4) / S(155) / L(6)
        "\xd4\xdc\xdf\xc0\xd5\xde\xb0\x1f\x7f\x9e\x73\x04\xbf\xe5\x38\xb7",
        // "" / M(None) / S(0) / L(0)
        "\x1d\x5a\x12\x6c\xdf\xcd\x8f\x86\xc0\xfb\x1a\xa2\xe1\x46\xee\x68\xcf\xbc\xf3\xee\x18\xa3\x51\xd9\x51\xa1\x6e\xc5\x51\x54\x61\x84",
        // "strncmp" / M(Xor1) / S(49) / L(7)
        "\x42\x45\x43\x5f\x52\x5c\x41\x31\x4f\x13\x00\xa1\x7e\x71\x09\x31",
        // "kSecClass" / M(Xor1) / S(56) / L(9)
        "\x53\x6b\x5d\x5b\x7b\x54\x59\x4b\x4b\x38\x64\x87\x02\xc6\x5a\xc9",
        // "1.50" / M(Xor1) / S(201) / L(4)
        "\xf8\xe7\xfc\xf9\xc9\xfd\xa5\x3b\x83\x2e\xc6\x0e\xaf\x8f\x5b\x29",
        // "CFArrayGetCount" / M(Xor3) / S(5) / L(15)
        "\x56\x53\x54\x67\x67\x74\x6c\x52\x70\x61\x56\x7a\x60\x7b\x61\x15",
        // "" / M(None) / S(0) / L(0)
        "\xa4\x93\xf3\x30\xc0\xb7\xb4\xa1\x38\xac\x59\x4a\x6b\x0e\x98\x1d\x97\x84\xfa\xeb\x4c\xb6\x3b\xfd\x99\xfe\xd4\xf4\xff\x5f\x8c\x8c",
        // "CFReadStreamCreateWithFile" / M(Xor3) / S(152) / L(26)
        "\xf8\xfd\xe9\xde\xda\xdf\xe8\xcf\xc9\xde\xda\xd6\xf8\xc9\xde\xda\xcf\xde\xec\xd2\xcf\xd3\xfd\xd2\xd7\xde\xbb\xbe\x3d\x7d\xd1\x5c\x3d\x7c\x83",
        // "CFDictionaryGetValue" / M(Xor2) / S(86) / L(20)
        "\x00\x05\x07\x2a\x20\x37\x2a\x2c\x2d\x22\x31\x3a\x04\x26\x37\x15\x22\x2f\x36\x26\x43",
        // "Contents/_MASReceipt/receipt" / M(Xor4) / S(205) / L(28)
        "\xe2\xce\xcf\xd5\xc4\xcf\xd5\xd2\x8e\xfe\xec\xe0\xf2\xf3\xc4\xc2\xc4\xc8\xd1\xd5\x8e\xd3\xc4\xc2\xc4\xc8\xd1\xd5\xa1\x39\x58\xe4\x0c\x21\x72\x34\x05",
        // "CFArrayGetValueAtIndex" / M(Xor1) / S(244) / L(22)
        "\xb7\xb2\xb5\x86\x86\x95\x8d\xb3\x91\x80\xa2\x95\x98\x81\x91\xb5\x80\xbd\x9a\x90\x91\x8c\xf4",
        // "ASN1_OBJECT_free" / M(Xor4) / S(217) / L(16)
        "\x28\x3a\x27\x58\x36\x26\x2b\x23\x2c\x2a\x3d\x36\x0f\x1b\x0c\x0c\x69",
        // "BIO_new" / M(Rot) / S(181) / L(7)
        "\xf7\xfe\x04\x14\x23\x1a\x2c\xb5\x4e\xf6\x08\x5a\xea\xc5\x0b\x22",
        // "" / M(None) / S(0) / L(0)
        "\x0d\x10\x30\x71\x38\x64\x60\x3b\xfa\xf8\xf3\x6b\x8e\xc8\xf0\x3b\xc6\xda\xac\xa4\xc1\xb8\x45\xef\xf0\xcf\x1a\xfe\xb8\xf7\xd7\xb5",
        // "sk_free" / M(Xor3) / S(131) / L(7)
        "\xe0\xf8\xcc\xf5\xe1\xf6\xf6\x93\xad\xe7\x66\xd0\xac\x16\xdf\xd7",
        // "CFStringCompare" / M(Xor4) / S(70) / L(15)
        "\x23\x26\x33\x14\x12\x09\x0e\x07\x23\x0f\x0d\x10\x01\x12\x05\x60",
        // "CFRelease" / M(Xor4) / S(153) / L(9)
        "\xd3\xd6\xc2\xf5\xfc\xf5\xf1\xe3\xf5\x90\xa4\x4a\xf6\x75\xdd\xe1",
        // "EVP_MD_CTX_init" / M(Xor3) / S(54) / L(15)
        "\x03\x10\x16\x19\x0b\x02\x19\x05\x12\x1e\x19\x2f\x28\x2f\x32\x46",
        // "OpenSSL_add_all_digests" / M(Xor4) / S(5) / L(23)
        "\xef\xd0\xc5\xce\xf3\xf3\xec\xff\xc1\xc4\xc4\xff\xc1\xcc\xcc\xff\xc4\xc9\xc7\xc5\xd3\xd4\xd3\xa0\xe6\x7e\xc4\x7b\x3f\xaa\xf1\x8c",
        // "%02X" / M(Rot) / S(147) / L(4)
        "\xb8\xc3\xc5\xeb\x93\x66\x0a\x90\x78\x2f\xf7\x2d\xfb\x84\xb4\x35",
        // "CFEqual" / M(Xor2) / S(96) / L(7)
        "\x33\x36\x35\x01\x05\x11\x1c\x70\x19\xd9\x8b\xb9\x2b\x06\x60\xb7",
        // "sel_registerName" / M(Xor1) / S(0) / L(16)
        "\x73\x65\x6c\x5f\x72\x65\x67\x69\x73\x74\x65\x72\x4e\x61\x6d\x65\x00",
        // "CFNumberCreate" / M(Rot) / S(40) / L(14)
        "\x6b\x6e\x76\x9d\x95\x8a\x8d\x9a\x6b\x9a\x8d\x89\x9c\x8d\x28\xd4",
        // "" / M(None) / S(0) / L(0)
        "\x55\x26\x7f\xa8\xa9\xe0\x19\x32\x37\xe8\x92\xb3\xc0\xc7\x4e\xcc\x82\x4f\x7f\x1b\x22\x5c\xe5\x5e\x2e\x2f\xc3\x22\xb2\x19\x20\x76",
        // "CFDictionaryAddValue" / M(Rot) / S(99) / L(20)
        "\xa6\xa9\xa7\xcc\xc6\xd7\xcc\xd2\xd1\xc4\xd5\xdc\xa4\xc7\xc7\xb9\xc4\xcf\xd8\xc8\x63",
        // "1.2.840.113635.100.6.11.1" / M(Xor4) / S(87) / L(25)
        "\xbf\xa0\xbc\xa0\xb6\xba\xbe\xa0\xbf\xbf\xbd\xb8\xbd\xbb\xa0\xbf\xbe\xbe\xa0\xb8\xa0\xbf\xbf\xa0\xbf\x8e\x20\x87\xd1\x22\x3e\xad\x80\xac",
        // "CC_SHA1_Update" / M(Xor1) / S(255) / L(14)
        "\xbc\xbc\xa0\xac\xb7\xbe\xce\xa0\xaa\x8f\x9b\x9e\x8b\x9a\xff\xb5",
        // "" / M(None) / S(0) / L(0)
        "\x0c\x97\x06\x68\xb9\x4f\xc8\x3b\x61\xb1\x59\x93\x54\x99\x83\x49\xc6\xd3\xb2\x91\x07\xec\x02\x37\x70\x56\xc2\xe4\x8e\xd6\x32\x96",
        // "SecKeychainOpen" / M(Xor1) / S(203) / L(15)
        "\x98\xae\xa8\x80\xae\xb2\xa8\xa3\xaa\xa2\xa5\x84\xbb\xae\xa5\xcb",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Rot) / S(202) / L(32)
        "\x43\x43\x43\x43\xf1\xf7\xf1\x17\x17\xf1\xf7\xf1\x2e\x2e\xf1\x1e\xf1\x12\x12\xf1\x04\xf1\x37\x37\xf1\x04\xf1\x3d\x3d\xf1\x24\xf1\xca",
        // "dlopen" / M(Xor4) / S(37) / L(6)
        "\x34\x3c\x3f\x20\x35\x3e\x50\x59\x3a\x2a\xb2\xb3\x74\x2a\x46\xf8",
        // "" / M(None) / S(0) / L(0)
        "\xc4\xf9\xbc\xeb\xf7\xa3\x2d\xc3\x4b\xc2\xc9\x91\x41\xa8\x07\x56\xf8\xe0\x3d\xb8\xdc\xa1\xea\x4b\xaf\xc1\x8c\x6a\x37\x91\xd5\x43",
        // "CFStringCreateWithCString" / M(Xor3) / S(202) / L(25)
        "\xaf\xaa\xbf\x98\x9e\x85\x82\x8b\xaf\x9e\x89\x8d\x98\x89\xbb\x85\x98\x84\xaf\xbf\x98\x9e\x85\x82\x8b\xec\x04\x1a\x92\x12\xc8\x47\x5b\x2b",
        // "" / M(None) / S(0) / L(0)
        "\xaf\xac\xd9\x33\xfb\x76\x10\xcb\xf4\x4e\x3b\xda\xdb\xb0\xd2\xf5\x98\x2e\x8e\xc6\x9e\x6f\x4e\x85\xba\xcc\xa9\x4f\xaa\xc1\x6c\x32",
        // "BIO_s_mem" / M(Xor4) / S(47) / L(9)
        "\xb2\xb9\xbf\xaf\x83\xaf\x9d\x95\x9d\xf0\x8e\x68\x89\xfc\x53\xdb",
        // "" / M(None) / S(0) / L(0)
        "\xb7\xf1\x08\xc8\x86\xc2\x9d\xc5\xd0\x44\xc0\x7f\x80\x34\xf3\x6c\x65\x10\x88\x7e\xf1\xcf\xbf\x76\x2f\x35\xcd\xa0\x36\x5c\x6a\xfd",
        // "_MASReceipt" / M(Xor3) / S(83) / L(11)
        "\x3c\x2e\x22\x30\x31\x06\x00\x06\x0a\x13\x17\x63\x27\x75\x8d\x11",
        // "" / M(None) / S(0) / L(0)
        "\x04\x2b\xde\x68\x59\xbb\xb2\xff\x09\x46\x4e\xee\x16\xfb\x77\x5b\x6f\x34\x52\xa4\xfb\x3b\x2f\x76\x0b\x51\x59\xc9\x28\x68\xf9\xce",
        // "kCFBundleIdentifierKey" / M(Xor2) / S(235) / L(22)
        "\x97\xbf\xba\xbe\x89\x92\x98\x90\x99\xb5\x98\x99\x92\x88\x95\x9a\x95\x99\x8e\xb7\x99\x85\xfc",
        // "CFDataAppendBytes" / M(Xor3) / S(63) / L(17)
        "\x12\x17\x15\x30\x25\x30\x10\x21\x21\x34\x3f\x35\x13\x28\x25\x34\x22\x51",
        // "ASN1_INTEGER_free" / M(Xor4) / S(138) / L(17)
        "\xf5\xe7\xfa\x85\xeb\xfd\xfa\xe0\xf1\xf3\xf1\xe6\xeb\xd2\xc6\xd1\xd1\xb4",
        // "BIO_s_mem" / M(Xor4) / S(125) / L(9)
        "\x92\x99\x9f\x8f\xa3\x8f\xbd\xb5\xbd\xd0\xff\x92\x55\xa3\x3e\x2f",
        // "" / M(None) / S(0) / L(0)
        "\xb7\x5b\xbe\x0a\xc1\x8c\xd7\xd9\x2e\x1c\xfd\xa8\xfa\x40\x6a\xba\xa2\x86\xab\x26\xb3\x83\x3f\xa7\x22\xe6\x6e\xe3\x2c\x8c\xf2\x75",
        // "" / M(None) / S(0) / L(0)
        "\x0a\x63\x41\x3f\x8f\x6b\xf5\x94\xb0\x88\x45\x39\xe6\x12\x9e\xe4\x0c\x76\xbd\x27\x69\x6c\xf8\x58\x24\x4a\x73\x9e\x25\xe6\xc0\x64",
        // "exit" / M(Xor1) / S(151) / L(4)
        "\xf2\xef\xfe\xe3\x97\x61\x72\x25\x43\x25\x31\xdc\x75\x2c\x95\xcb",
        // "CFDataGetLength" / M(Xor1) / S(24) / L(15)
        "\x5b\x5e\x5c\x79\x6c\x79\x5f\x7d\x6c\x54\x7d\x76\x7f\x6c\x70\x18",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" / M(Rot) / S(117) / L(50)
        "\xa4\xc8\xee\xe8\xe9\xda\xe2\xa4\xc1\xde\xd7\xe7\xd6\xe7\xee\xa4\xbb\xe7\xd6\xe2\xda\xec\xe4\xe7\xe0\xe8\xa4\xb6\xe5\xe5\xc0\xde\xe9\xa3\xdb\xe7\xd6\xe2\xda\xec\xe4\xe7\xe0\xa4\xb6\xe5\xe5\xc0\xde\xe9\x75",
        // "kSecMatchLimitAll" / M(Rot) / S(174) / L(17)
        "\x19\x01\x13\x11\xfb\x0f\x22\x11\x16\xfa\x17\x1b\x17\x22\xef\x1a\x1a\xae",
        // "CFBundleCopyBundleURL" / M(Xor3) / S(10) / L(21)
        "\x63\x66\x62\x55\x4e\x44\x4c\x45\x63\x4f\x50\x59\x62\x55\x4e\x44\x4c\x45\x75\x72\x6c\x20",
        // "OpenSSL_add_all_digests" / M(Xor4) / S(122) / L(23)
        "\x0f\x30\x25\x2e\x13\x13\x0c\x1f\x21\x24\x24\x1f\x21\x2c\x2c\x1f\x24\x29\x27\x25\x33\x34\x33\x40\x36\x55\xf0\xd3\xa8\xaa\x82\xb5",
        // "strlen" / M(Xor1) / S(254) / L(6)
        "\x8d\x8a\x8c\x92\x9b\x90\xfe\x7b\xd3\xa1\x6b\xc6\xc5\xfa\xb2\x8b",
        // "_MASReceipt" / M(Rot) / S(112) / L(11)
        "\xcf\xbd\xb1\xc3\xc2\xd5\xd3\xd5\xd9\xe0\xe4\x70\x5b\xa7\x46\xa0",
        // "SecItemCopyMatching" / M(Rot) / S(143) / L(19)
        "\xe2\xf4\xf2\xd8\x03\xf4\xfc\xd2\xfe\xff\x08\xdc\xf0\x03\xf2\xf7\xf8\xfd\xf6\x8f",
        // "" / M(None) / S(0) / L(0)
        "\x42\x79\x4e\xe4\x00\x16\x51\x88\x56\x72\x02\xe5\x16\xab\x33\xe0\xfc\xd2\x7c\xd8\x01\x04\x3f\x65\xba\x95\x5f\x87\x0b\xe0\x61\x20",
        // "receipt" / M(Xor4) / S(69) / L(7)
        "\x22\x35\x33\x35\x39\x20\x24\x50\x68\xec\xa9\x62\xa0\x97\x3b\xe0",
        // "CFBundleUnloadExecutable" / M(Xor4) / S(203) / L(24)
        "\x68\x6d\x69\x5e\x45\x4f\x47\x4e\x7e\x45\x47\x44\x4a\x4f\x6e\x53\x4e\x48\x5e\x5f\x4a\x49\x47\x4e\x2b\x62\xab\xa6\x06\x67\xf5\x45\x42",
        // "CFBundleCopyBundleURL" / M(Xor4) / S(166) / L(21)
        "\x07\x02\x06\x31\x2a\x20\x28\x21\x07\x2b\x34\x3d\x06\x31\x2a\x20\x28\x21\x11\x16\x08\x44",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor4) / S(136) / L(40)
        "\x3e\x39\x39\x6d\x3d\x6a\x3e\x3e\x3a\x6b\x3d\x31\x3b\x69\x38\x30\x6e\x6e\x3d\x30\x6c\x39\x3c\x69\x6d\x3a\x3a\x3c\x3d\x3a\x6c\x39\x31\x30\x6c\x6e\x3e\x6b\x3e\x38\x08\x61\xe3\xbc\xc8\x3e\x87\x0f\x3d",
        // "CFURLCreateFromFileSystemRepresentation" / M(Rot) / S(48) / L(39)
        "\x73\x76\x85\x82\x7c\x73\xa2\x95\x91\xa4\x95\x76\xa2\x9f\x9d\x76\x99\x9c\x95\x83\xa9\xa3\xa4\x95\x9d\x82\x95\xa0\xa2\x95\xa3\x95\x9e\xa4\x91\xa4\x99\x9f\x9e\x30\xc5\x67\x52\x72\x3d\xea\xfc\x18",
        // "CFReadStreamRead" / M(Rot) / S(94) / L(16)
        "\xa1\xa4\xb0\xc3\xbf\xc2\xb1\xd2\xd0\xc3\xbf\xcb\xb0\xc3\xbf\xc2\x5e",
        // "freeifaddrs" / M(Xor1) / S(240) / L(11)
        "\x96\x82\x95\x95\x99\x96\x91\x94\x94\x82\x83\xf0\x89\xaa\x2e\xf9",
        // "" / M(None) / S(0) / L(0)
        "\xdf\x61\x2a\xbe\x07\x0b\x88\x79\xef\x30\xdb\xf7\x87\x88\x4f\xff\x76\x36\xbf\x4f\xbb\xd7\xbd\xa2\x8b\xba\x3e\xea\x0b\x75\x66\x4b",
        // "RTLD_MAIN_ONLY" / M(Xor3) / S(13) / L(14)
        "\x4f\x49\x51\x59\x42\x50\x5c\x54\x53\x42\x52\x53\x51\x44\x1d\xca",
        // "CFReadStreamRead" / M(Xor1) / S(177) / L(16)
        "\xf2\xf7\xe3\xd4\xd0\xd5\xe2\xc5\xc3\xd4\xd0\xdc\xe3\xd4\xd0\xd5\xb1",
        // "_MASReceipt/receipt" / M(Xor1) / S(66) / L(19)
        "\x1d\x0f\x03\x11\x10\x27\x21\x27\x2b\x32\x36\x6d\x30\x27\x21\x27\x2b\x32\x36\x42",
        // "strlen" / M(Xor1) / S(63) / L(6)
        "\x4c\x4b\x4d\x53\x5a\x51\x3f\x78\x9f\xec\x1d\x41\x50\x60\x74\xb1",
        // "globfree" / M(Xor2) / S(129) / L(8)
        "\xf6\xfd\xfe\xf3\xf7\xe3\xf4\xf4\x91\xbc\x4b\xad\xdc\x60\xda\x55",
        // "" / M(None) / S(0) / L(0)
        "\x96\x6a\xb0\xe6\xd7\x6f\x5d\xac\xaa\x60\x75\x9c\xed\xa8\x12\xab\x67\xcd\x67\xae\xa9\x52\x25\x1b\x74\xf2\x2c\xe7\xf0\x79\xf3\x7e",
        // "" / M(None) / S(0) / L(0)
        "\x59\x75\x0c\xb4\xf8\x0e\x84\x09\x84\x2a\xc1\xc8\xc3\xbe\xc9\x01\x02\x9c\x8a\xee\xed\x44\x02\x0d\x52\x12\x62\x9d\x12\x8d\x6c\x23",
        // "EVP_MD_CTX_init" / M(Xor1) / S(64) / L(15)
        "\x05\x16\x10\x1f\x0d\x04\x1f\x03\x14\x18\x1f\x29\x2e\x29\x34\x40",
        // "" / M(None) / S(0) / L(0)
        "\x0e\x78\x25\xa9\x4e\x6f\xb6\xc8\xa1\x45\x65\x95\xb2\xe0\x8e\xe3\x6b\x35\x58\xde\x9b\xf2\xa7\x82\x67\xd4\x9f\x02\x81\xf9\xbc\x68",
        // "Apple Root CA" / M(Xor2) / S(180) / L(13)
        "\xe5\xd4\xd4\xc8\xc1\x84\xf6\xcb\xcb\xd0\x84\xe7\xe5\xa4\x80\x89",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor1) / S(129) / L(39)
        "\xc2\xc7\xd4\xd3\xcd\xc2\xf3\xe4\xe0\xf5\xe4\xc7\xf3\xee\xec\xc7\xe8\xed\xe4\xd2\xf8\xf2\xf5\xe4\xec\xd3\xe4\xf1\xf3\xe4\xf2\xe4\xef\xf5\xe0\xf5\xe8\xee\xef\x81\xc1\x06\xf3\xc2\x9d\x73\x61\x6a",
        // "" / M(None) / S(0) / L(0)
        "\x06\xae\x2a\xed\xba\xe6\xb4\x8c\xdd\x50\x4e\x4b\xf6\x43\xb8\x83\xf0\xb9\xc0\x81\xd9\x0f\x1e\xe1\x13\xb4\x63\x69\x51\x68\x2e\xfe",
        // "" / M(None) / S(0) / L(0)
        "\x2c\xc6\x99\x7e\x86\x69\xeb\xed\xae\x4a\x2e\x0f\xdf\x1c\xd8\xda\x98\x0f\xb7\xad\xab\x3a\x89\xba\x97\x67\xe4\x1d\x48\xc1\x81\x78",
        // "CFEqual" / M(Xor4) / S(68) / L(7)
        "\x03\x06\x05\x31\x35\x21\x2c\x40\x1a\xf2\xc0\xc5\x9b\x83\xbb\x1c",
        // "CFDataGetLength" / M(Xor1) / S(154) / L(15)
        "\xd9\xdc\xde\xfb\xee\xfb\xdd\xff\xee\xd6\xff\xf4\xfd\xee\xf2\x9a",
        // "CFBundleShortVersionString" / M(Rot) / S(87) / L(26)
        "\x9a\x9d\x99\xcc\xc5\xbb\xc3\xbc\xaa\xbf\xc6\xc9\xcb\xad\xbc\xc9\xca\xc0\xc6\xc5\xaa\xcb\xc9\xc0\xc5\xbe\x57\x30\x83\xa6\xad\xf0\xdd\xc5\xed",
        // "." / M(Rot) / S(63) / L(1)
        "\x6d\x3f\xe8\x7a\xaf\x82\xb8\x8d\x1b\xe9\xc2\x47\xd8\xf9\xaa\x74",
        // "%02x" / M(Xor1) / S(111) / L(4)
        "\x4a\x5f\x5d\x17\x6f\x30\x60\xad\xb3\x34\x61\x41\x84\x79\xad\xb5",
        // "Contents/_MASReceipt/receipt" / M(Xor2) / S(222) / L(28)
        "\xb8\x94\x95\x8f\x9e\x95\x8f\x88\xd4\xa4\xb6\xba\xa8\xa9\x9e\x98\x9e\x92\x8b\x8f\xd4\x89\x9e\x98\x9e\x92\x8b\x8f\xfb\xd8\xc5\x7b\x7e\xb8\x69\xd4\x4b",
        // "" / M(None) / S(0) / L(0)
        "\xae\x4b\x76\x5b\x40\x9a\xd4\xf2\x60\x99\x33\x50\xef\xd6\xc2\x40\xf5\x6c\xee\x19\x37\x66\x08\x75\x4d\x6f\xf0\xb9\xdc\xfd\x7b\xc8",
        // "" / M(None) / S(0) / L(0)
        "\x85\xca\x71\x06\x24\x3a\x07\x3d\x0c\xbc\x94\x9a\x53\x67\x23\x6b\xdc\xec\x58\x25\xb4\x5e\x81\xcc\x48\x9d\xf9\x28\x50\xa0\x6f\xc3",
        // "CC_SHA1" / M(Xor3) / S(135) / L(7)
        "\xd4\xd4\xc8\xc4\xdf\xd6\xa6\x97\x1b\x6b\x15\x4f\xe9\xf2\x04\x0c",
        // "_MASReceipt/receipt" / M(Rot) / S(63) / L(19)
        "\x9e\x8c\x80\x92\x91\xa4\xa2\xa4\xa8\xaf\xb3\x6e\xb1\xa4\xa2\xa4\xa8\xaf\xb3\x3f",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor1) / S(65) / L(36)
        "\x02\x07\x03\x34\x2f\x25\x2d\x24\x06\x24\x35\x17\x20\x2d\x34\x24\x07\x2e\x33\x08\x2f\x27\x2e\x05\x28\x22\x35\x28\x2e\x2f\x20\x33\x38\x0a\x24\x38\x41",
        // "kCFBundleIdentifierKey" / M(Xor2) / S(72) / L(22)
        "\x34\x1c\x19\x1d\x2a\x31\x3b\x33\x3a\x16\x3b\x3a\x31\x2b\x36\x39\x36\x3a\x2d\x14\x3a\x26\x5f",
        // "CFStringCompare" / M(Xor4) / S(61) / L(15)
        "\x93\x96\x83\xa4\xa2\xb9\xbe\xb7\x93\xbf\xbd\xa0\xb1\xa2\xb5\xd0",
        // "" / M(None) / S(0) / L(0)
        "\xd2\xd3\xf7\xac\xc3\x3c\x35\xe5\x69\x96\x10\xb3\xbe\x8e\xeb\x29\x97\xfd\x50\xcd\xb0\xb2\x58\x74\xde\xec\x98\xd8\x2f\x1f\x16\x09",
        // "start" / M(Rot) / S(56) / L(5)
        "\xab\xac\x99\xaa\xac\x38\xbd\x2b\xd6\xea\x8b\xff\x09\xe2\xa8\x3a",
        // "CFReadStreamOpen" / M(Xor2) / S(54) / L(16)
        "\x64\x61\x75\x42\x46\x43\x74\x53\x55\x42\x46\x4a\x68\x57\x42\x49\x27",
        // "CFStringGetFileSystemRepresentation" / M(Xor2) / S(172) / L(35)
        "\xcb\xce\xdb\xfc\xfa\xe1\xe6\xef\xcf\xed\xfc\xce\xe1\xe4\xed\xdb\xf1\xfb\xfc\xed\xe5\xda\xed\xf8\xfa\xed\xfb\xed\xe6\xfc\xe9\xfc\xe1\xe7\xe6\x88",
        // "" / M(None) / S(0) / L(0)
        "\xb9\x07\x5d\xe1\xd5\x90\x39\x0d\xe7\xce\x82\xc0\x43\x43\x4f\xab\x97\xfc\xcf\x21\x61\x94\xd3\x09\x92\x4e\xae\x91\x25\x78\x6b\xfa",
        // "CFDateFormatterCreate" / M(Xor2) / S(103) / L(21)
        "\x32\x37\x35\x10\x05\x14\x37\x1e\x03\x1c\x10\x05\x05\x14\x03\x32\x03\x14\x10\x05\x14\x71",
        // "alloc" / M(Xor4) / S(184) / L(5)
        "\xe1\xec\xec\xef\xe3\x80\x55\xfe\x39\x5f\x10\x4d\x3e\x8f\xe4\x36",
        // "" / M(None) / S(0) / L(0)
        "\x86\x6c\x1c\x72\xfe\xa7\x4e\x7a\x64\x54\x99\xab\x0a\x7d\x49\x96\x43\xf3\x3c\xe2\xe7\x47\x65\x3c\x4b\x2b\x02\xd6\x8a\xe9\xdf\x71",
        // "SecKeychainOpen" / M(Xor4) / S(201) / L(15)
        "\xc3\xf5\xf3\xdb\xf5\xe9\xf3\xf8\xf1\xf9\xfe\xdf\xe0\xf5\xfe\x90",
        // "" / M(None) / S(0) / L(0)
        "\xa4\xc7\x48\x7d\xfa\xcd\x76\x4a\xce\x46\xb3\x0e\xa1\xf8\xf2\xae\xd2\x5d\x11\x1e\x1c\x39\x26\xc7\xe5\x72\x8c\x27\xc5\xfa\xd9\x05",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor1) / S(219) / L(66)
        "\xf4\x88\xa2\xa8\xaf\xbe\xb6\xf4\x97\xb2\xb9\xa9\xba\xa9\xa2\xf4\x9d\xa9\xba\xb6\xbe\xac\xb4\xa9\xb0\xa8\xf4\x98\xb4\xa9\xbe\x9d\xb4\xae\xb5\xbf\xba\xaf\xb2\xb4\xb5\xf5\xbd\xa9\xba\xb6\xbe\xac\xb4\xa9\xb0\xf4\x98\xb4\xa9\xbe\x9d\xb4\xae\xb5\xbf\xba\xaf\xb2\xb4\xb5\xdb",
        // "EVP_DigestFinal" / M(Rot) / S(147) / L(15)
        "\xd8\xe9\xe3\xf2\xd7\xfc\xfa\xf8\x06\x07\xd9\xfc\x01\xf4\xff\x93",
        // "CFBundleGetIdentifier" / M(Xor4) / S(112) / L(21)
        "\xe3\xe6\xe2\xd5\xce\xc4\xcc\xc5\xe7\xc5\xd4\xe9\xc4\xc5\xce\xd4\xc9\xc6\xc9\xc5\xd2\xa0",
        // "CFRelease" / M(Xor1) / S(34) / L(9)
        "\x61\x64\x70\x47\x4e\x47\x43\x51\x47\x22\x0c\x57\xad\x75\xfb\x21",
        // "CFStringCreateWithCString" / M(Xor3) / S(25) / L(25)
        "\x78\x7d\x68\x4f\x49\x52\x55\x5c\x78\x49\x5e\x5a\x4f\x5e\x6c\x52\x4f\x53\x78\x68\x4f\x49\x52\x55\x5c\x3b\x35\xd4\x2f\xf5\xa0\xb7\x8e\x7f",
        // "" / M(None) / S(0) / L(0)
        "\xfa\xc2\x79\x74\x84\x40\x8a\x41\xad\x35\xef\x9f\x38\x8f\x68\x72\xf7\x5b\xa3\x4b\xe3\x4a\x85\x8f\xcd\x49\xc7\x5f\xb4\x16\xb0\xb3",
        // "" / M(None) / S(0) / L(0)
        "\x90\x91\x9e\x68\x9c\xa9\xe2\x2f\xc7\x01\xe2\xcb\x7b\xe6\xc9\xfe\xf0\xfd\xda\x4c\x7e\xf5\x9c\x85\x70\x2c\xf8\x85\x6c\xee\x5d\x92",
        // "CFDateFormatterSetFormat" / M(Xor4) / S(69) / L(24)
        "\xa6\xa3\xa1\x84\x91\x80\xa3\x8a\x97\x88\x84\x91\x91\x80\x97\xb6\x80\x91\xa3\x8a\x97\x88\x84\x91\xe5\x70\x0e\xf0\x71\xdd\x06\x9b\x45",
        // "CFAbsoluteTimeGetCurrent" / M(Xor4) / S(15) / L(24)
        "\xac\xa9\xae\x8d\x9c\x80\x83\x9a\x9b\x8a\xbb\x86\x82\x8a\xa8\x8a\x9b\xac\x9a\x9d\x9d\x8a\x81\x9b\xef\x50\x88\x21\xd7\xe0\xa4\xf1\xf4",
        // "" / M(None) / S(0) / L(0)
        "\xfb\xf6\xc4\x7b\x33\x97\x79\xa8\x70\x83\x14\x88\x24\x0d\xff\x65\x30\xb3\xc0\x01\xec\x8a\xc5\x91\x07\x66\x72\xc4\x53\x81\xea\xf3",
        // "" / M(None) / S(0) / L(0)
        "\x34\x2b\x94\x20\xff\xa8\x5f\xcb\xdb\xed\x5f\x6a\xb5\xbf\xf6\xc5\x25\x8c\x87\x90\x3b\xe2\x24\x9f\x08\x57\x61\xb6\x59\x15\xb7\x2d",
        // "CFBundleUnloadExecutable" / M(Xor2) / S(73) / L(24)
        "\x2b\x2e\x2a\x1d\x06\x0c\x04\x0d\x3d\x06\x04\x07\x09\x0c\x2d\x10\x0d\x0b\x1d\x1c\x09\x0a\x04\x0d\x68\x31\xa5\xd0\xff\x00\xd7\x54\xf8",
        // "X509_digest" / M(Xor4) / S(248) / L(11)
        "\xd8\xb5\xb0\xb9\xdf\xe4\xe9\xe7\xe5\xf3\xf4\x80\xc7\xd9\x0b\x8f",
        // "" / M(None) / S(0) / L(0)
        "\x7f\x9c\xd6\x96\x17\xd7\xfe\x10\x8c\xa0\x03\x02\x33\xa2\xdb\xaf\xfe\x08\x99\xfc\x6a\x86\xe3\x6e\x24\x91\x84\x90\xc9\x63\x56\xae",
        // "sha1" / M(Xor3) / S(123) / L(4)
        "\xf8\xe3\xea\xba\x8b\xad\x82\x3c\xd0\x60\x1f\x5a\x34\xc9\xd2\x41",
        // "%02x:" / M(Xor1) / S(105) / L(5)
        "\x4c\x59\x5b\x11\x53\x69\xe9\x5c\x3f\x71\x60\x9e\x8b\x5c\xb5\xaf",
        // "" / M(None) / S(0) / L(0)
        "\x5a\xdf\xec\xa1\x58\x3a\xe6\x2e\xf6\x19\xf3\x48\xa0\xfb\x54\x5c\xc0\x96\xad\x6d\xec\xe4\xfc\xa9\x6c\xbd\x38\xca\x7d\x50\x99\x3a",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor2) / S(95) / L(59)
        "\x2d\x2a\x21\x2a\x5e\x21\x2e\x59\x21\x2d\x2d\x21\x29\x58\x21\x2e\x22\x21\x28\x5a\x21\x2b\x23\x21\x5d\x5d\x21\x2e\x23\x21\x5f\x2a\x21\x2f\x5a\x21\x5e\x29\x21\x29\x2f\x21\x2e\x29\x21\x5f\x2a\x21\x22\x23\x21\x5f\x5d\x21\x2d\x58\x21\x2d\x2b\x1b\x71\xad\x2b\x1f\x3f\xe8\xcd\xcb",
        // "exit" / M(Xor4) / S(27) / L(4)
        "\xd5\xc8\xd9\xc4\xb0\x0b\x07\xd5\x40\x5a\x7d\xa4\x48\xa0\x28\xb3",
        // "CFDataGetBytePtr" / M(Xor1) / S(110) / L(16)
        "\x2d\x28\x2a\x0f\x1a\x0f\x29\x0b\x1a\x2c\x17\x1a\x0b\x3e\x1a\x1c\x6e",
        // "CFDateCompare" / M(Rot) / S(178) / L(13)
        "\xf5\xf8\xf6\x13\x26\x17\xf5\x21\x1f\x22\x13\x24\x17\xb2\x42\x33",
        // "SKReceiptRefreshRequest" / M(Xor2) / S(74) / L(23)
        "\x39\x21\x38\x0f\x09\x0f\x03\x1a\x1e\x38\x0f\x0c\x18\x0f\x19\x02\x38\x0f\x1b\x1f\x0f\x19\x1e\x6a\x6f\x68\x46\x0d\xb0\xa3\x17\xfa",
        // "" / M(None) / S(0) / L(0)
        "\xfc\xc7\x66\x95\x39\x50\x6b\xb5\xd4\x28\x2f\x10\xe8\x7e\xd9\xce\x6e\xeb\x7c\xd9\x14\x2b\x1e\xe7\xff\x9b\x83\xd5\x52\x85\x4c\x9e",
        // "EVP_DigestUpdate" / M(Rot) / S(208) / L(16)
        "\x15\x26\x20\x2f\x14\x39\x37\x35\x43\x44\x25\x40\x34\x31\x44\x35\xd0",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor1) / S(113) / L(37)
        "\x32\x37\x24\x23\x3d\x32\x03\x14\x10\x05\x14\x32\x1e\x01\x08\x30\x01\x01\x14\x1f\x15\x18\x1f\x16\x21\x10\x05\x19\x32\x1e\x1c\x01\x1e\x1f\x14\x1f\x05\x71",
        // "X509_STORE_new" / M(Xor4) / S(10) / L(14)
        "\xf8\x95\x90\x99\xff\xf3\xf4\xef\xf2\xe5\xff\xce\xc5\xd7\xa0\xab",
        // "strcmp" / M(Rot) / S(149) / L(6)
        "\x08\x09\x07\xf8\x02\x05\x95\x29\x37\xac\x94\xac\x07\x7c\x77\x61",
        // "CFBundleGetIdentifier" / M(Xor4) / S(191) / L(21)
        "\x29\x2c\x28\x1f\x04\x0e\x06\x0f\x2d\x0f\x1e\x23\x0e\x0f\x04\x1e\x03\x0c\x03\x0f\x18\x6a",
        // "kSecClassCertificate" / M(Rot) / S(38) / L(20)
        "\x91\x79\x8b\x89\x69\x92\x87\x99\x99\x69\x8b\x98\x9a\x8f\x8c\x8f\x89\x87\x9a\x8b\x26",
        // "PKCS7_free" / M(Rot) / S(104) / L(10)
        "\xb8\xb3\xab\xbb\x9f\xc7\xce\xda\xcd\xcd\x68\xa4\x87\xd8\xf4\x78",
        // "CFDateFormatterSetProperty" / M(Xor3) / S(177) / L(26)
        "\x97\x92\x90\xb5\xa0\xb1\x92\xbb\xa6\xb9\xb5\xa0\xa0\xb1\xa6\x87\xb1\xa0\x84\xa6\xbb\xa4\xb1\xa6\xa0\xad\xd4\xcd\xbb\xcb\xa5\xf8\x27\x52\xa6",
        // "getifaddrs" / M(Xor1) / S(231) / L(10)
        "\x80\x82\x93\x8e\x81\x86\x83\x83\x95\x94\xe7\x00\x5e\x9e\x07\x1a",
        // "CFDictionaryGetValue" / M(Xor3) / S(18) / L(20)
        "\x64\x61\x63\x4e\x44\x53\x4e\x48\x49\x46\x55\x5e\x60\x42\x53\x71\x46\x4b\x52\x42\x27",
        // "" / M(None) / S(0) / L(0)
        "\x04\x60\xc0\x63\xf3\x11\x6d\xc4\x3f\x1c\x06\x38\x9e\xd6\xba\xcd\x31\x61\x17\x2f\x30\xd7\x20\x86\x27\xc0\x72\x9f\xfc\x87\x73\x1d",
        // "CFStringCreateWithBytes" / M(Xor4) / S(19) / L(23)
        "\x23\x26\x33\x14\x12\x09\x0e\x07\x23\x12\x05\x01\x14\x05\x37\x09\x14\x08\x22\x19\x14\x05\x13\x60\x9b\x4a\xb4\x4f\xfa\x25\x23\x4f",
        // "ASN1_OBJECT_free" / M(Xor2) / S(193) / L(16)
        "\x91\x83\x9e\xe1\x8f\x9f\x92\x9a\x95\x93\x84\x8f\xb6\xa2\xb5\xb5\xd0",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor1) / S(144) / L(59)
        "\xa6\xa1\xaa\xa1\xf5\xaa\xa5\xf2\xaa\xa6\xa6\xaa\xa2\xf3\xaa\xa5\xa9\xaa\xa3\xf1\xaa\xa0\xa8\xaa\xf6\xf6\xaa\xa5\xa8\xaa\xf4\xa1\xaa\xa4\xf1\xaa\xf5\xa2\xaa\xa2\xa4\xaa\xa5\xa2\xaa\xf4\xa1\xaa\xa9\xa8\xaa\xf4\xf6\xaa\xa6\xf3\xaa\xa6\xa0\x90\x04\x33\x8c\x2a\x81\x71\xff\xde",
        // "start" / M(Xor1) / S(131) / L(5)
        "\xf0\xf7\xe2\xf1\xf7\x83\xe6\xf9\xa6\x63\x23\x77\x37\x8b\x13\x11",
        // "" / M(None) / S(0) / L(0)
        "\x3f\xf7\xa0\x1f\xab\xb2\xee\x6c\x98\xb9\xb2\x65\xea\xe7\x02\x3d\xf4\xf2\xac\xd4\xb6\x8c\x3b\x3b\xb8\x63\x53\xeb\x58\xcb\x39\x1b",
        // "" / M(None) / S(0) / L(0)
        "\x0f\x7e\x52\x9d\xd8\xd3\xe3\x36\x2a\xae\xa2\x70\xb6\xca\xb1\xbc\x0e\x6c\x8f\xc9\x8a\x38\x10\x83\x61\x8f\xb0\x0f\xff\x25\x33\x1e",
        // "PKCS7_free" / M(Xor4) / S(165) / L(10)
        "\x00\x1b\x13\x03\x67\x0f\x36\x22\x35\x35\x50\xbc\x08\xb8\xdb\xe9",
        // "PKCS7_verify" / M(Rot) / S(46) / L(12)
        "\x7e\x79\x71\x81\x65\x8d\xa4\x93\xa0\x97\x94\xa7\x2e\x0f\xb8\x6b",
        // "Apple Root CA" / M(Xor2) / S(0) / L(13)
        "\x51\x60\x60\x7c\x75\x30\x42\x7f\x7f\x64\x30\x53\x51\x10\x5c\x0f",
        // "" / M(None) / S(0) / L(0)
        "\x1b\x8d\x04\x85\x22\xd7\x6a\x08\x74\xa7\x11\x06\x28\x4b\xdd\xc9\xf5\xdb\xb2\x16\xc7\x22\x3d\x4e\x4e\xe8\x90\xa2\x6a\x13\x84\x46",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor2) / S(254) / L(40)
        "\xf9\xfe\xfe\x8a\xfa\x8d\xf9\xf9\xfd\x8c\xfa\xf6\xfc\x8e\xff\xf7\x89\x89\xfa\xf7\x8b\xfe\xfb\x8e\x8a\xfd\xfd\xfb\xfa\xfd\x8b\xfe\xf6\xf7\x8b\x89\xf9\x8c\xf9\xff\xcf\xf6\x41\x00\xd4\x4e\x6d\x63\x86",
        // "CFDictionaryCreateMutable" / M(Xor3) / S(245) / L(25)
        "\x54\x51\x53\x7e\x74\x63\x7e\x78\x79\x76\x65\x6e\x54\x65\x72\x76\x63\x72\x5a\x62\x63\x76\x75\x7b\x72\x17\xc5\x17\x71\x40\xcd\xa5\x08\x0f",
        // "CFDataAppendBytes" / M(Xor4) / S(196) / L(17)
        "\x8b\x8e\x8c\xa9\xbc\xa9\x89\xb8\xb8\xad\xa6\xac\x8a\xb1\xbc\xad\xbb\xc8",
        // "glob_b" / M(Xor4) / S(76) / L(6)
        "\xa7\xac\xaf\xa2\x9f\xa2\xc0\x3e\xcf\x54\x8c\x0d\x4e\xe7\xf8\x94",
        // "glob" / M(Xor4) / S(222) / L(4)
        "\x87\x8c\x8f\x82\xe0\x46\xd0\xeb\xcc\x6a\x0c\xf6\x01\xce\x6c\x89",
        // "" / M(None) / S(0) / L(0)
        "\x73\x44\x6f\x9a\x5a\x53\xdc\x70\x1c\x4d\xdc\x28\x8a\x8a\xce\x46\x72\x9a\xb7\x19\x95\x2e\x94\x30\xc0\xac\x55\x24\xff\x37\xc0\xea",
        // "CFBundleShortVersionString" / M(Xor2) / S(221) / L(26)
        "\xbd\xb8\xbc\x8b\x90\x9a\x92\x9b\xad\x96\x91\x8c\x8a\xa8\x9b\x8c\x8d\x97\x91\x90\xad\x8a\x8c\x97\x90\x99\xfe\x4c\xe5\x2d\x3d\x06\x69\x43\xaa",
        // "" / M(None) / S(0) / L(0)
        "\x4c\xfb\xa7\x7c\x16\x87\x37\x98\x7a\xdb\x49\x79\x10\x2e\x58\x8d\xc1\xcc\x46\x67\xcc\x2f\xbf\xed\x76\xda\x79\x61\x4b\x32\xce\x39",
        // "CFReadStreamClose" / M(Xor1) / S(53) / L(17)
        "\x76\x73\x67\x50\x54\x51\x66\x41\x47\x50\x54\x58\x76\x59\x5a\x46\x50\x35",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor3) / S(176) / L(39)
        "\xa3\xa6\xb5\xb2\xac\xa3\x92\x85\x81\x94\x85\xa6\x92\x8f\x8d\xa6\x89\x8c\x85\xb3\x99\x93\x94\x85\x8d\xb2\x85\x90\x92\x85\x93\x85\x8e\x94\x81\x94\x89\x8f\x8e\xe0\x36\x55\x1b\x4e\xf0\xcf\x09\x76",
        // "Apple Root CA" / M(Xor2) / S(187) / L(13)
        "\xea\xdb\xdb\xc7\xce\x8b\xf9\xc4\xc4\xdf\x8b\xe8\xea\xab\xc8\x13",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor4) / S(47) / L(37)
        "\xa9\x9f\x99\xb1\x9f\x83\x99\x92\x9b\x93\x94\xa9\x9f\x9b\x88\x99\x92\xb9\x88\x9f\x9b\x8e\x9f\xbc\x88\x95\x97\xbb\x8e\x8e\x88\x93\x98\x8f\x8e\x9f\x89\xfa",
        // "sha1" / M(Xor3) / S(64) / L(4)
        "\x23\x38\x31\x61\x50\x40\xfb\x26\x64\xaf\xc6\xbf\x93\x42\x86\xa3",
        // "CC_SHA1_Init" / M(Xor3) / S(0) / L(12)
        "\x53\x53\x4f\x43\x58\x51\x21\x4f\x59\x7e\x79\x64\x10\x25\x12\xf6",
        // "." / M(Rot) / S(174) / L(1)
        "\xdc\xae\x96\x93\x3d\x4e\x96\x2d\xdc\x21\xe9\x5d\x9f\x54\x69\xbf",
        // "kSecClassCertificate" / M(Xor4) / S(161) / L(20)
        "\x5e\x66\x50\x56\x76\x59\x54\x46\x46\x76\x50\x47\x41\x5c\x53\x5c\x56\x54\x41\x50\x35",
        // "" / M(None) / S(0) / L(0)
        "\xef\x3c\x1b\xe3\xf1\xff\xed\xb9\x29\x13\x48\x8e\x7d\x75\x29\x18\x3e\x95\xfc\x5d\xbb\xc0\x33\x92\xc2\x6c\xc0\x81\x15\xd9\x87\x89",
        // "kCFDateFormatterTimeZone" / M(Xor3) / S(227) / L(24)
        "\x6f\x47\x42\x40\x65\x70\x61\x42\x6b\x76\x69\x65\x70\x70\x61\x76\x50\x6d\x69\x61\x5e\x6b\x6a\x61\x04\x3f\xea\x83\x3e\x4d\x90\x07\x9f",
        // "" / M(None) / S(0) / L(0)
        "\xea\xcf\xbb\xb9\x36\x73\x7b\x76\x0b\x76\x6c\x13\x4c\x17\x5a\x39\x77\x14\xf0\x24\x4e\xaf\x7b\x54\x2a\x6f\xcc\xd6\xd7\xa0\x62\xee",
        // "X509_STORE_add_cert" / M(Rot) / S(8) / L(19)
        "\x60\x3d\x38\x41\x67\x5b\x5c\x57\x5a\x4d\x67\x69\x6c\x6c\x67\x6b\x6d\x7a\x7c\x08",
        // "X509_NAME_get_text_by_NID" / M(Xor4) / S(146) / L(25)
        "\x3c\x51\x54\x5d\x3b\x2a\x25\x29\x21\x3b\x03\x01\x10\x3b\x10\x01\x1c\x10\x3b\x06\x1d\x3b\x2a\x2d\x20\x64\x5f\x03\x92\x4c\xac\x05\xaa\x15",
        // "EVP_DigestInit" / M(Xor1) / S(43) / L(14)
        "\x6e\x7d\x7b\x74\x6f\x42\x4c\x4e\x58\x5f\x62\x45\x42\x5f\x2b\x1a",
        // "PKCS7_get0_signers" / M(Xor2) / S(28) / L(18)
        "\x5f\x44\x4c\x5c\x38\x50\x68\x6a\x7b\x3f\x50\x7c\x66\x68\x61\x6a\x7d\x7c\x0f",
        // "CFArrayCreateMutable" / M(Xor2) / S(88) / L(20)
        "\x0e\x0b\x0c\x3f\x3f\x2c\x34\x0e\x3f\x28\x2c\x39\x28\x00\x38\x39\x2c\x2f\x21\x28\x4d",
        // "" / M(None) / S(0) / L(0)
        "\xa5\xd2\x56\x50\x7e\xde\x4e\xdc\x86\x16\xc5\xbe\xb6\x99\x34\xd3\x6a\x50\xd6\xa1\x37\xe3\x51\x3f\x70\x75\xee\x01\x57\x2b\xdc\x0b",
        // "CFDateCompare" / M(Xor1) / S(253) / L(13)
        "\xbe\xbb\xb9\x9c\x89\x98\xbe\x92\x90\x8d\x9c\x8f\x98\xfd\xf4\x8a",
        // "CFBundleGetIdentifier" / M(Xor2) / S(178) / L(21)
        "\xe7\xe2\xe6\xd1\xca\xc0\xc8\xc1\xe3\xc1\xd0\xed\xc0\xc1\xca\xd0\xcd\xc2\xcd\xc1\xd6\xa4",
        // "SecKeychainSearchCreateFromAttributes" / M(Rot) / S(18) / L(37)
        "\x65\x77\x75\x5d\x77\x8b\x75\x7a\x73\x7b\x80\x65\x77\x73\x84\x75\x7a\x55\x84\x77\x73\x86\x77\x58\x84\x81\x7f\x53\x86\x86\x84\x7b\x74\x87\x86\x77\x85\x12",
        // "CFBundleVersion" / M(Xor3) / S(153) / L(15)
        "\xea\xef\xeb\xdc\xc7\xcd\xc5\xcc\xff\xcc\xdb\xda\xc0\xc6\xc7\xa9",
        // "" / M(None) / S(0) / L(0)
        "\x72\x30\x5d\x87\x9c\x73\xb8\x4e\x5d\x13\xb8\x27\xd4\x43\x44\x38\xac\x17\x20\xe2\xc2\xa2\x2b\xe7\xcc\xa8\xe2\x70\x95\x6b\x01\xa3",
        // "getifaddrs" / M(Xor2) / S(204) / L(10)
        "\xbb\xb9\xa8\xb5\xba\xbd\xb8\xb8\xae\xaf\xdc\x3d\xb6\xd1\x0f\xcb",
        // "CFArrayGetValueAtIndex" / M(Xor3) / S(33) / L(22)
        "\x7b\x7e\x79\x4a\x4a\x59\x41\x7f\x5d\x4c\x6e\x59\x54\x4d\x5d\x79\x4c\x71\x56\x5c\x5d\x40\x38",
        // "EVP_DigestInit" / M(Xor3) / S(58) / L(14)
        "\x0f\x1c\x1a\x15\x0e\x23\x2d\x2f\x39\x3e\x03\x24\x23\x3e\x4a\x78",
        // "CC_SHA1" / M(Xor3) / S(138) / L(7)
        "\xd9\xd9\xc5\xc9\xd2\xdb\xab\x9a\x7b\x75\x7a\x75\xf5\xf2\x3a\x63",
        // "CC_SHA1_Final" / M(Xor4) / S(112) / L(13)
        "\x43\x43\x5f\x53\x48\x41\x31\x5f\x46\x69\x6e\x61\x6c\x00\x99\x5c",
        // "CFBundleUnloadExecutable" / M(Xor2) / S(184) / L(24)
        "\xda\xdf\xdb\xec\xf7\xfd\xf5\xfc\xcc\xf7\xf5\xf6\xf8\xfd\xdc\xe1\xfc\xfa\xec\xed\xf8\xfb\xf5\xfc\x99\xa2\xe8\x15\xa3\xed\x48\xb1\x1c",
        // "SHA1_Final" / M(Xor3) / S(126) / L(10)
        "\xdd\xc6\xcf\xbf\xd1\xc8\xe7\xe0\xef\xe2\x8e\x01\xf7\x67\x9c\x2b",
        // "" / M(None) / S(0) / L(0)
        "\x4d\x9f\xe7\xb2\x86\xa1\xe0\xfd\xf9\x94\x51\x87\x6a\x77\x47\x3c\xcc\xb0\x80\xca\xa3\x7b\xc0\xd3\xe4\x1c\x4c\x7c\xf9\xc9\x1a\xfa",
        // "BIO_new" / M(Xor1) / S(22) / L(7)
        "\x54\x5f\x59\x49\x78\x73\x61\x16\x9d\x4a\x56\x66\xd3\xe5\x0c\x57",
        // "kCFBundleIdentifierKey" / M(Xor3) / S(140) / L(22)
        "\xc8\xe0\xe5\xe1\xd6\xcd\xc7\xcf\xc6\xea\xc7\xc6\xcd\xd7\xca\xc5\xca\xc6\xd1\xe8\xc6\xda\xa3",
        // "kCFTypeArrayCallBacks" / M(Xor2) / S(95) / L(21)
        "\x22\x0a\x0f\x1d\x30\x39\x2c\x08\x3b\x3b\x28\x30\x0a\x28\x25\x25\x0b\x28\x2a\x22\x3a\x49",
        // "CFDictionarySetValue" / M(Xor1) / S(42) / L(20)
        "\x69\x6c\x6e\x43\x49\x5e\x43\x45\x44\x4b\x58\x53\x79\x4f\x5e\x7c\x4b\x46\x5f\x4f\x2a",
        // "SecKeychainSearchCopyNext" / M(Xor3) / S(11) / L(25)
        "\x7e\x48\x4e\x66\x48\x54\x4e\x45\x4c\x44\x43\x7e\x48\x4c\x5f\x4e\x45\x6e\x42\x5d\x54\x63\x48\x55\x59\x2d\xab\x87\xc6\x0f\x2a\x63\x15\x71",
        // "kSecMatchLimit" / M(Xor2) / S(206) / L(14)
        "\xb5\x8d\xbb\xbd\x93\xbf\xaa\xbd\xb6\x92\xb7\xb3\xb7\xaa\xde\x29",
        // "EVP_DigestUpdate" / M(Rot) / S(35) / L(16)
        "\x68\x79\x73\x82\x67\x8c\x8a\x88\x96\x97\x78\x93\x87\x84\x97\x88\x23",
        // "X509_get_ext_by_OBJ" / M(Xor3) / S(5) / L(19)
        "\x41\x2c\x29\x20\x46\x7e\x7c\x6d\x46\x7c\x61\x6d\x46\x7b\x60\x46\x56\x5b\x53\x19",
        // "" / M(None) / S(0) / L(0)
        "\x97\x47\x7b\x63\xcf\x7a\xfb\xfd\xdf\xb6\x22\xce\xd8\xbd\x67\x3d\x3a\xaf\x98\x2e\xbc\x80\x73\x1c\xf7\x91\xff\xad\xc3\x67\xe7\x22",
        // "" / M(None) / S(0) / L(0)
        "\xc3\xc7\x57\x8e\xd5\xfa\x2e\x68\x6d\xca\x5f\x33\x09\xe8\x2a\xd2\x42\x44\xf3\x1e\x07\x02\xdb\x37\x37\xde\x0c\x64\x70\xfa\x93\xcd",
        // "setDelegate:" / M(Xor1) / S(0) / L(12)
        "\x73\x65\x74\x44\x65\x6c\x65\x67\x61\x74\x65\x3a\x00\x17\x7a\x24",
        // "CFRelease" / M(Xor4) / S(24) / L(9)
        "\xc3\xc6\xd2\xe5\xec\xe5\xe1\xf3\xe5\x80\x5d\x3a\xb8\xd9\x5d\xa3",
        // "SecKeychainOpen" / M(Xor1) / S(251) / L(15)
        "\xa8\x9e\x98\xb0\x9e\x82\x98\x93\x9a\x92\x95\xb4\x8b\x9e\x95\xfb",
        // "en0" / M(Xor3) / S(189) / L(3)
        "\xa8\xa3\xfd\xcd\xb6\xe7\x95\x57\xf1\x06\xb9\xcf\x94\x20\x16\x61",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor1) / S(213) / L(57)
        "\xfa\x86\xac\xa6\xa1\xb0\xb8\xfa\x99\xbc\xb7\xa7\xb4\xa7\xac\xfa\x9e\xb0\xac\xb6\xbd\xb4\xbc\xbb\xa6\xfa\x86\xac\xa6\xa1\xb0\xb8\x87\xba\xba\xa1\x96\xb0\xa7\xa1\xbc\xb3\xbc\xb6\xb4\xa1\xb0\xa6\xfb\xbe\xb0\xac\xb6\xbd\xb4\xbc\xbb\xd5\x72\x0a\x7b\x54\xeb\x6d\x24\xaa",
        // "receipt" / M(Xor4) / S(82) / L(7)
        "\x52\x45\x43\x45\x49\x50\x54\x20\xb1\x65\x72\x8c\x74\x7f\xd2\x4d",
        // "sk_value" / M(Xor2) / S(29) / L(8)
        "\x7e\x66\x52\x7b\x6c\x61\x78\x68\x0d\xb0\xb2\xfb\x9a\xc8\xf9\xf9",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor4) / S(81) / L(29)
        "\x6d\x45\x40\x52\x7f\x76\x63\x42\x6f\x65\x72\x6f\x69\x68\x67\x74\x7f\x4d\x63\x7f\x45\x67\x6a\x6a\x44\x67\x65\x6d\x75\x06\x17\xab\x57\x13\xa7\xce\xd8\x93",
        // "dlopen" / M(Xor1) / S(89) / L(6)
        "\x3d\x35\x36\x29\x3c\x37\x59\xd6\xd3\x2e\xbf\xc9\x5e\x9f\xbe\xd4",
        // "SHA1" / M(Xor1) / S(62) / L(4)
        "\x6d\x76\x7f\x0f\x3e\xf3\xb7\xb3\x1c\x38\x50\x6c\x65\xe5\x5a\xc1",
        // "init" / M(Xor1) / S(63) / L(4)
        "\x56\x51\x56\x4b\x3f\x77\x7a\x88\x73\x8a\x1e\x1d\x7c\x9f\xf5\x3d",
        // "BIO_write" / M(Rot) / S(74) / L(9)
        "\x8c\x93\x99\xa9\xc1\xbc\xb3\xbe\xaf\x4a\x00\xe6\xce\x5e\x96\xed",
        // "CFArrayCreateMutable" / M(Rot) / S(210) / L(20)
        "\x15\x18\x13\x44\x44\x33\x4b\x15\x44\x37\x33\x46\x37\x1f\x47\x46\x33\x34\x3e\x37\xd2",
        // "exit" / M(Xor4) / S(60) / L(4)
        "\xa5\xb8\xa9\xb4\xc0\x27\x2e\x79\x02\x4a\x38\xec\x06\xca\x4d\x9a",
        // "_MASReceipt" / M(Rot) / S(130) / L(11)
        "\xe1\xcf\xc3\xd5\xd4\xe7\xe5\xe7\xeb\xf2\xf6\x82\xff\xce\x0c\xae",
        // "" / M(None) / S(0) / L(0)
        "\x14\xc7\x09\xd5\x1f\x28\x57\x0b\x8c\x36\xf5\xcd\xa3\xed\xc3\xe1\xaf\x9b\xe8\x5c\x56\x82\x6e\xb3\xdd\xff\x82\x57\x49\x71\x9e\xc8",
        // "alloc" / M(Xor1) / S(46) / L(5)
        "\x4f\x42\x42\x41\x4d\x2e\x4d\x12\xd8\xec\x9a\xab\xcd\x5b\x54\x79",
        // "ASN1_INTEGER_get" / M(Rot) / S(248) / L(16)
        "\x39\x4b\x46\x29\x57\x41\x46\x4c\x3d\x3f\x3d\x4a\x57\x5f\x5d\x6c\xf8",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" / M(Xor4) / S(207) / L(50)
        "\x12\x6e\x44\x4e\x49\x58\x50\x12\x71\x54\x5f\x4f\x5c\x4f\x44\x12\x7b\x4f\x5c\x50\x58\x4a\x52\x4f\x56\x4e\x12\x7c\x4d\x4d\x76\x54\x49\x13\x5b\x4f\x5c\x50\x58\x4a\x52\x4f\x56\x12\x7c\x4d\x4d\x76\x54\x49\x3d",
        // "d2i_X509_bio" / M(Rot) / S(85) / L(12)
        "\xb9\x87\xbe\xb4\xad\x8a\x85\x8e\xb4\xb7\xbe\xc4\x55\xf9\xad\x1b",
        // "CFBundleGetMainBundle" / M(Rot) / S(218) / L(21)
        "\x1d\x20\x1c\x4f\x48\x3e\x46\x3f\x21\x3f\x4e\x27\x3b\x43\x48\x1c\x4f\x48\x3e\x46\x3f\xda",
        // "CC_SHA1_Update" / M(Xor4) / S(125) / L(14)
        "\x93\x93\x8f\x83\x98\x91\xe1\x8f\x85\xa0\xb4\xb1\xa4\xb5\xd0\xe3",
        // "kSecClassCertificate" / M(Rot) / S(167) / L(20)
        "\x12\xfa\x0c\x0a\xea\x13\x08\x1a\x1a\xea\x0c\x19\x1b\x10\x0d\x10\x0a\x08\x1b\x0c\xa7",
        // "" / M(None) / S(0) / L(0)
        "\xee\x9c\xec\x5c\x10\xed\xe5\x6d\x73\x43\xc7\x6c\x8e\x1f\x86\xfa\x2b\x54\xb3\xe4\xfe\xd3\xf2\xb7\x8f\x3c\x15\xf3\x2d\x00\xe2\xe7",
        // "" / M(None) / S(0) / L(0)
        "\x93\xc2\x83\x1f\xf0\x3a\xa6\xa0\x45\xdc\x51\x3a\xc8\xb8\x13\x00\xb5\x3f\x96\x3c\x19\x4e\x6d\x45\x56\x98\xf9\x8c\x9f\xa7\x3f\x1c",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor3) / S(137) / L(43)
        "\xfe\xfb\xe8\xef\xf1\xfe\xcf\xd8\xdc\xc9\xd8\xea\xd4\xc9\xd5\xfb\xd4\xd1\xd8\xee\xc4\xce\xc9\xd8\xd0\xed\xdc\xc9\xd5\xef\xd8\xd1\xdc\xc9\xd4\xcb\xd8\xe9\xd2\xff\xdc\xce\xd8\xbd\xcb\x2b\x47\xc5\x31\x54\x7a\x2c",
        // "CFStringCreateWithBytes" / M(Xor3) / S(145) / L(23)
        "\xf2\xf7\xe2\xc5\xc3\xd8\xdf\xd6\xf2\xc3\xd4\xd0\xc5\xd4\xe6\xd8\xc5\xd9\xf3\xc8\xc5\xd4\xc2\xb1\xf4\x9b\x80\xed\x32\x99\x4f\x93",
        // "" / M(None) / S(0) / L(0)
        "\x65\xac\xc3\xf9\xd0\x66\x1a\xe2\xf0\x61\x37\xfa\xf6\xd3\xd3\x05\xee\xfe\xb2\x07\x6b\x08\xe2\x13\xc3\xfa\xa4\xa5\x54\x2e\x18\xb2",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Rot) / S(220) / L(40)
        "\x12\x0d\x0d\x21\x11\x1e\x12\x12\x0e\x1f\x11\x15\x0f\x1d\x0c\x14\x22\x22\x11\x14\x20\x0d\x10\x1d\x21\x0e\x0e\x10\x11\x0e\x20\x0d\x15\x14\x20\x22\x12\x1f\x12\x0c\xdc\x24\x3f\x31\x38\xbf\x0e\x8a\x3e",
        // "SKReceiptRefreshRequest" / M(Xor4) / S(100) / L(23)
        "\xd3\xcb\xd2\xe5\xe3\xe5\xe9\xf0\xf4\xd2\xe5\xe6\xf2\xe5\xf3\xe8\xd2\xe5\xf1\xf5\xe5\xf3\xf4\x80\x30\xc8\x7f\x9f\xf9\xdb\xff\xde",
        // "d2i_X509_bio" / M(Xor2) / S(255) / L(12)
        "\x8b\xdd\x86\xb0\xb7\xda\xdf\xd6\xb0\x8d\x86\x80\xef\x03\x7e\xaa",
        // "CFDataGetLength" / M(Rot) / S(202) / L(15)
        "\x0d\x10\x0e\x2b\x3e\x2b\x11\x2f\x3e\x16\x2f\x38\x31\x3e\x32\xca",
        // "" / M(None) / S(0) / L(0)
        "\x03\x77\xae\x4e\x8c\xc5\x3c\x01\x60\xf1\xdb\x65\xf9\xc9\xba\xca\x19\x6b\x7d\xe1\x51\x05\xa3\xe7\x12\xef\x4e\x71\x93\xaf\x35\x58",
        // "objc_getClass" / M(Rot) / S(9) / L(13)
        "\x78\x6b\x73\x6c\x68\x70\x6e\x7d\x4c\x75\x6a\x7c\x7c\x09\x04\xef",
        // "/usr/lib/libobjc.dylib" / M(Xor4) / S(174) / L(22)
        "\x8d\xd7\xd1\xd0\x8d\xce\xcb\xc0\x8d\xce\xcb\xc0\xcd\xc0\xc8\xc1\x8c\xc6\xdb\xce\xcb\xc0\xa2",
        // "" / M(None) / S(0) / L(0)
        "\x64\x86\xd1\xbb\xae\xfc\xb9\xa5\x41\xff\x42\x3c\x28\xdd\x1b\x2d\xf3\xb1\xed\x27\x30\xb3\x11\x06\xd0\x71\xc5\x5c\x47\x04\xbb\xb5",
        // "CFBundleIdentifier" / M(Xor1) / S(202) / L(18)
        "\x89\x8c\x88\xbf\xa4\xae\xa6\xaf\x83\xae\xaf\xa4\xbe\xa3\xac\xa3\xaf\xb8\xca",
        // "" / M(None) / S(0) / L(0)
        "\xb3\x96\xad\x3d\x9f\xac\x98\xf6\xc5\xe9\xac\xe6\x58\xbe\x2d\x46\xf4\x5c\xfd\x65\x7b\x09\xa9\x89\x9c\x8a\xd1\x18\x43\x67\x8a\x7a",
        // "" / M(None) / S(0) / L(0)
        "\xd0\x2c\xcc\x30\x0e\x9b\xd6\x9c\x58\x30\xec\xf3\xb8\xfb\xb3\x94\x9e\x39\xe3\x43\x68\x35\x02\xe2\x20\xe3\xfe\xe3\xe3\x07\xd8\x2a",
        // "CFDataGetBytePtr" / M(Xor3) / S(37) / L(16)
        "\x75\x70\x72\x57\x42\x57\x71\x53\x42\x74\x4f\x42\x53\x66\x42\x44\x36",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor2) / S(90) / L(36)
        "\x3c\x39\x3d\x0a\x11\x1b\x13\x1a\x38\x1a\x0b\x29\x1e\x13\x0a\x1a\x39\x10\x0d\x36\x11\x19\x10\x3b\x16\x1c\x0b\x16\x10\x11\x1e\x0d\x06\x34\x1a\x06\x7f",
        // "" / M(None) / S(0) / L(0)
        "\xc8\x0e\x16\x8d\xaf\x3d\xac\x0d\xdc\x50\x34\x2c\x06\x4f\x87\x04\xca\xa0\x62\xfa\x78\x01\xb9\x7b\xd6\xa7\xe9\x8c\x32\xb2\x1f\xf2",
        // "" / M(None) / S(0) / L(0)
        "\xb3\xd9\xcc\x21\x28\x2a\x4e\xd5\x90\xac\xc5\xcd\x97\xb1\x2d\x14\x49\x88\x4e\x09\x67\x0a\x57\x14\x5e\x99\xa5\x9f\x99\x83\xab\x2e",
        // "" / M(None) / S(0) / L(0)
        "\xfa\xef\x9b\x61\x75\x30\x34\xb8\xb1\x30\x0a\xb2\xbf\x0f\x06\x7a\xe5\xde\x42\xfb\x66\xf2\x38\x58\xd9\xb1\x3f\x9f\x91\x4c\x72\x1e",
        // "" / M(None) / S(0) / L(0)
        "\xad\xe6\xbc\x23\x5d\xb6\x0c\x18\xdd\xb3\x47\x91\x75\x95\x32\x40\xcc\x0d\xbc\xef\x7a\x79\x62\xa2\xc6\x1d\xc2\x07\xf5\x26\xd2\x3c",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor4) / S(79) / L(40)
        "\x29\x2e\x2e\x7a\x2a\x7d\x29\x29\x2d\x7c\x2a\x26\x2c\x7e\x2f\x27\x79\x79\x2a\x27\x7b\x2e\x2b\x7e\x7a\x2d\x2d\x2b\x2a\x2d\x7b\x2e\x26\x27\x7b\x79\x29\x7c\x29\x2f\x1f\x9f\x80\x8e\xe1\x66\x5b\xd9\xd1",
        // "CFArrayGetCount" / M(Xor3) / S(115) / L(15)
        "\xc0\xc5\xc2\xf1\xf1\xe2\xfa\xc4\xe6\xf7\xc0\xec\xf6\xed\xf7\x83",
        // "" / M(None) / S(0) / L(0)
        "\x4d\x4f\xc9\x51\x2d\x6b\xf8\xc5\x8e\x4d\x11\xc6\xab\x04\xd7\x02\x89\x71\xb4\xcf\xbc\x40\x98\x1a\xef\x45\x79\x88\xd5\x60\xad\x2f",
        // "" / M(None) / S(0) / L(0)
        "\xb1\xf6\x4a\x02\x74\xc9\x5c\x74\x9f\xf7\xbf\xed\x42\x2a\x85\x60\xaa\x19\x6c\x7a\x87\x85\xe8\x87\x28\xa8\x1b\x26\xc1\x76\x99\x73",
        // "Contents" / M(Xor2) / S(35) / L(8)
        "\x70\x5c\x5d\x47\x56\x5d\x47\x40\x33\x0a\xae\xd4\x48\x61\xb4\xc9",
        // "%02x" / M(Xor2) / S(150) / L(4)
        "\xa3\xb6\xb4\xfe\x86\x1e\x22\x30\x04\xc9\x49\x4d\x55\x91\xe0\xec",
        // "" / M(None) / S(0) / L(0)
        "\x1a\xd7\xaa\xf9\xa6\xf5\x58\x68\xd8\x3d\x03\x39\x82\x21\xef\x88\x78\x64\x8e\x32\xdc\xb9\x4b\x7a\x29\x3b\x5b\xca\x9f\x56\x21\x64",
        // "CFAbsoluteTimeGetCurrent" / M(Xor4) / S(160) / L(24)
        "\xe3\xe6\xe1\xc2\xd3\xcf\xcc\xd5\xd4\xc5\xf4\xc9\xcd\xc5\xe7\xc5\xd4\xe3\xd5\xd2\xd2\xc5\xce\xd4\xa0\xf3\x6d\x49\x5e\x4c\x2a\x7e\x4b",
        // "kSecMatchLimitAll" / M(Xor4) / S(16) / L(17)
        "\x4b\x73\x45\x43\x6d\x41\x54\x43\x48\x6c\x49\x4d\x49\x54\x61\x4c\x4c\x20",
        // "/usr/lib/libobjc.dylib" / M(Xor3) / S(43) / L(22)
        "\x6d\x37\x31\x30\x6d\x2e\x2b\x20\x6d\x2e\x2b\x20\x2d\x20\x28\x21\x6c\x26\x3b\x2e\x2b\x20\x42",
        // "kSecReturnRef" / M(Xor3) / S(209) / L(13)
        "\x8a\xb2\x84\x82\xb3\x84\x95\x94\x93\x8f\xb3\x84\x87\xe1\xb0\x8b",
        // "PKCS7_verify" / M(Xor4) / S(120) / L(12)
        "\xd0\xcb\xc3\xd3\xb7\xdf\xf6\xe5\xf2\xe9\xe6\xf9\x80\x2b\xca\x6b",
        // "kSecMatchSubjectContains" / M(Xor1) / S(157) / L(24)
        "\xf6\xce\xf8\xfe\xd0\xfc\xe9\xfe\xf5\xce\xe8\xff\xf7\xf8\xfe\xe9\xde\xf2\xf3\xe9\xfc\xf4\xf3\xee\x9d\xe7\xfa\xc9\xee\xa8\x68\xfd\xb1",
        // "BIO_s_mem" / M(Xor3) / S(28) / L(9)
        "\x6e\x65\x63\x73\x5f\x73\x41\x49\x41\x2c\x69\x77\xa7\xf3\xf7\xe4",
        // "" / M(None) / S(0) / L(0)
        "\xa8\x9b\x41\x41\xfb\xc9\xf4\x6f\xbd\xe5\x14\xbe\x3c\x9b\x73\x7c\x32\xd6\x73\x81\x84\x05\x5b\x16\x4a\x30\xd4\xa0\x6a\x2e\x4e\xd9",
        // "" / M(None) / S(0) / L(0)
        "\x4e\xac\xbf\xdb\xe8\x84\x1d\x6e\x31\xee\xf1\x3c\xb0\xe9\x6a\xf0\x43\x34\x46\xd8\xa5\x32\x13\x85\x86\x80\x64\xc6\x75\x62\xcb\xc7",
        // "" / M(None) / S(0) / L(0)
        "\xbc\x63\xf2\x3f\xea\x5d\x6e\xa3\x6b\xc9\xb8\x66\xfc\xa4\x61\x90\xa1\x08\x69\x3c\xac\xff\xb2\x1b\xda\x85\x71\x3e\xa7\x1c\x5d\x4f",
        // "SecCertificateCopyData" / M(Xor4) / S(77) / L(22)
        "\xb8\x8e\x88\xa8\x8e\x99\x9f\x82\x8d\x82\x88\x8a\x9f\x8e\xa8\x84\x9b\x92\xaf\x8a\x9f\x8a\xeb",
        // "c2i_ASN1_INTEGER" / M(Xor3) / S(10) / L(16)
        "\x78\x29\x72\x44\x5a\x48\x55\x2a\x44\x52\x55\x4f\x5e\x5c\x5e\x49\x1b",
    };
    
    // Table for storing pointers
    static void *_Pointers[585] = {
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_new),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) c2i_ASN1_INTEGER),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_get),
        ((void *) dlsym),
        ((void *) BIO_write),
        ((void *) PKCS7_get0_signers),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) NULL),
        ((void *) strcmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) EVP_get_digestbyname),
        ((void *) d2i_PKCS7_bio),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) SHA1),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) strcmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) OBJ_txt2obj),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) c2i_ASN1_INTEGER),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestFinal),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) BIO_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_get),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) SHA1),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) strncmp),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) NULL),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) BIO_new),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_free),
        ((void *) BIO_s_mem),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OpenSSL_add_all_digests),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) globfree),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) X509_STORE_new),
        ((void *) strcmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) PKCS7_verify),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_add_cert),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) EVP_DigestInit),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) BIO_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) SHA1),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_get),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) c2i_ASN1_INTEGER),
    };
    
    // Push a new diagnostic context
#pragma clang diagnostic push
    // When getting primary MAC address, an effectless alignment requirement increase is reported
#pragma clang diagnostic ignored "-Wcast-align"
    // In RELEASE mode, static variable are inlined but their declaration are not removed
#pragma clang diagnostic ignored "-Wunused"
    // In DEBUG mode, static variable are not inlined
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
    
    // Global variables
    static int _SCDGZQSSSVYY __unused;
    static int _DBXYLRSFRPCN __unused;
    static int _LGIPGTIEGWJQ __unused;
    static int _XDKPSKJODJNL __unused;
    static int _CBKSUKALVWPQ __unused;
    static int _UQUFVRIQHDJC __unused;
    static int _FKLMEMUUFOBP __unused;
    static int _TWZAYFSSKURV __unused;
    
    
#define _ASN1_get_object_018900E4 ((___ASN1_get_object) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction003, 228, 205, 16))
#define _ASN1_INTEGER_free_000500BF ((___ASN1_INTEGER_free) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction009, 191, 169, 18))
#define _ASN1_INTEGER_get_00050029 ((___ASN1_INTEGER_get) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction003, 41, 121, 17))
#define _ASN1_OBJECT_free_01480156 ((___ASN1_OBJECT_free) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction00C, 342, 217, 17))
#define _BIO_free_000500DA ((___BIO_free) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction009, 218, 104, 16))
#define _BIO_free_0148013D ((___BIO_free) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction006, 317, 86, 16))
#define _BIO_new_0189010E ((___BIO_new) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction00B, 270, 107, 16))
#define _BIO_new_018901FF ((___BIO_new) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction006, 511, 22, 16))
#define _BIO_s_mem_0005016D ((___BIO_s_mem) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction00C, 365, 47, 16))
#define _BIO_s_mem_00050243 ((___BIO_s_mem) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction00A, 579, 28, 16))
#define _BIO_write_01480089 ((___BIO_write) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction005, 137, 179, 16))
#define _BIO_write_0189002B ((___BIO_write) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction00A, 43, 116, 16))
#define _c2i_ASN1_INTEGER_014800E1 ((___c2i_ASN1_INTEGER) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction00C, 225, 129, 17))
#define _CC_SHA1_Init_002000B9 ((___CC_SHA1_Init) _LookupFunction015(_ObfuscationFunction005, 32, 136, 33, _ObfuscationFunction005, 185, 254, 16))
#define _CC_SHA1_Update_00C20165 ((___CC_SHA1_Update) _LookupFunction015(_ObfuscationFunction007, 194, 183, 33, _ObfuscationFunction005, 357, 255, 16))
#define _CFArrayAppendValue_00D800D2 ((___CFArrayAppendValue) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00C, 210, 115, 19))
#define _CFArrayGetCount_00D80142 ((___CFArrayGetCount) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00C, 322, 202, 16))
#define _CFArrayGetCount_01AD0150 ((___CFArrayGetCount) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00A, 336, 5, 16))
#define _CFBundleGetMainBundle_005E010A ((___CFBundleGetMainBundle) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction00C, 266, 76, 22))
#define _CFBundleUnloadExecutable_005E0182 ((___CFBundleUnloadExecutable) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction00C, 386, 203, 33))
#define _CFDataAppendBytes_01AD0003 ((___CFDataAppendBytes) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00B, 3, 147, 18))
#define _CFDataCreateMutable_00D80071 ((___CFDataCreateMutable) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction009, 113, 136, 20))
#define _CFDataGetBytePtr_005E01C0 ((___CFDataGetBytePtr) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction005, 448, 110, 17))
#define _CFDataGetLength_00D80197 ((___CFDataGetLength) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction005, 407, 154, 16))
#define _CFDateFormatterCreate_00D801A8 ((___CFDateFormatterCreate) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction008, 424, 103, 22))
#define _CFDateFormatterSetFormat_00D80095 ((___CFDateFormatterSetFormat) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00A, 149, 85, 33))
#define _CFDateFormatterSetProperty_005E01CB ((___CFDateFormatterSetProperty) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction009, 459, 177, 35))
#define _CFDictionaryCreateMutable_005E010F ((___CFDictionaryCreateMutable) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction006, 271, 151, 34))
#define _CFDictionaryCreateMutable_00D8006F ((___CFDictionaryCreateMutable) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00C, 111, 193, 34))
#define _CFDictionaryCreateMutable_00D801DA ((___CFDictionaryCreateMutable) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction009, 474, 245, 34))
#define _CFDictionaryGetValue_01AD01CD ((___CFDictionaryGetValue) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction009, 461, 18, 21))
#define _CFNumberCreate_00D80161 ((___CFNumberCreate) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction004, 353, 40, 16))
#define _CFReadStreamOpen_00D80035 ((___CFReadStreamOpen) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction009, 53, 255, 17))
#define _CFReadStreamOpen_01AD0035 ((___CFReadStreamOpen) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction009, 53, 255, 17))
#define _CFRelease_005E015B ((___CFRelease) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction00B, 347, 153, 16))
#define _CFRelease_005E01B0 ((___CFRelease) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction005, 432, 34, 16))
#define _CFRelease_005E020A ((___CFRelease) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction00C, 522, 24, 16))
#define _CFRelease_00D8015B ((___CFRelease) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00B, 347, 153, 16))
#define _CFRelease_00D801B0 ((___CFRelease) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction005, 432, 34, 16))
#define _CFRelease_00D8020A ((___CFRelease) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00C, 522, 24, 16))
#define _CFRelease_01AD015B ((___CFRelease) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00B, 347, 153, 16))
#define _CFRelease_01AD01B0 ((___CFRelease) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction005, 432, 34, 16))
#define _CFRelease_01AD020A ((___CFRelease) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00C, 522, 24, 16))
#define _CFURLCreateCopyAppendingPathComponent_01AD0083 ((___CFURLCreateCopyAppendingPathComponent) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00A, 131, 233, 38))
#define _CFURLCreateFromFileSystemRepresentation_00D80185 ((___CFURLCreateFromFileSystemRepresentation) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction004, 389, 48, 48))
#define _CFURLCreateFromFileSystemRepresentation_00D801E2 ((___CFURLCreateFromFileSystemRepresentation) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction009, 482, 176, 48))
#define _d2i_PKCS7_bio_0005004C ((___d2i_PKCS7_bio) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction009, 76, 152, 16))
#define _d2i_PKCS7_bio_0148007E ((___d2i_PKCS7_bio) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction003, 126, 68, 16))
#define _d2i_X509_bio_01480227 ((___d2i_X509_bio) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction007, 551, 255, 16))
#define _EVP_DigestFinal_000500EA ((___EVP_DigestFinal) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction005, 234, 230, 16))
#define _EVP_DigestInit_000501EE ((___EVP_DigestInit) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction006, 494, 43, 16))
#define _EVP_DigestUpdate_0189012D ((___EVP_DigestUpdate) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction003, 301, 187, 17))
#define _EVP_get_digestbyname_0005007D ((___EVP_get_digestbyname) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction008, 125, 23, 21))
#define _EVP_MD_CTX_init_014800B1 ((___EVP_MD_CTX_init) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction003, 177, 47, 16))
#define _exit_000E01BF ((___exit) _LookupFunction015(_ObfuscationFunction00C, 14, 40, 33, _ObfuscationFunction00C, 447, 27, 16))
#define _exit_000E0216 ((___exit) _LookupFunction015(_ObfuscationFunction00C, 14, 40, 33, _ObfuscationFunction00C, 534, 60, 16))
#define _exit_00200177 ((___exit) _LookupFunction015(_ObfuscationFunction005, 32, 136, 33, _ObfuscationFunction005, 375, 151, 16))
#define _exit_002001BF ((___exit) _LookupFunction015(_ObfuscationFunction005, 32, 136, 33, _ObfuscationFunction00C, 447, 27, 16))
#define _exit_00200216 ((___exit) _LookupFunction015(_ObfuscationFunction005, 32, 136, 33, _ObfuscationFunction00C, 534, 60, 16))
#define _exit_00C20177 ((___exit) _LookupFunction015(_ObfuscationFunction007, 194, 183, 33, _ObfuscationFunction005, 375, 151, 16))
#define _exit_00C201BF ((___exit) _LookupFunction015(_ObfuscationFunction007, 194, 183, 33, _ObfuscationFunction00C, 447, 27, 16))
#define _exit_00C20216 ((___exit) _LookupFunction015(_ObfuscationFunction007, 194, 183, 33, _ObfuscationFunction00C, 534, 60, 16))
#define _SCDGZQSSSVYY_005E00FE ((___CFDataCreateMutable) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction007, _SCDGZQSSSVYY, 155, 20))
#define _SCDGZQSSSVYY_005E0161 ((___CFNumberCreate) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction004, _SCDGZQSSSVYY, 40, 16))
#define _SCDGZQSSSVYY_00C201F7 ((___getifaddrs) _LookupFunction015(_ObfuscationFunction007, 194, 183, 33, _ObfuscationFunction007, _SCDGZQSSSVYY, 204, 16))
#define _SCDGZQSSSVYY_00D8015F ((___CFEqual) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction007, _SCDGZQSSSVYY, 96, 16))
#define _SCDGZQSSSVYY_00D80197 ((___CFDataGetLength) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction005, _SCDGZQSSSVYY, 154, 16))
#define _SCDGZQSSSVYY_00D801A0 ((___CFBundleGetValueForInfoDictionaryKey) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction005, _SCDGZQSSSVYY, 65, 37))
#define _SCDGZQSSSVYY_00D80215 ((___CFArrayCreateMutable) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction003, _SCDGZQSSSVYY, 210, 21))
#define _SCDGZQSSSVYY_01AD00AF ((___CFArrayCreateMutable) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction009, _SCDGZQSSSVYY, 60, 21))
#define _SCDGZQSSSVYY_01AD015A ((___CFStringCompare) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00C, _SCDGZQSSSVYY, 70, 16))
#define _DBXYLRSFRPCN_0020019E ((___CC_SHA1) _LookupFunction015(_ObfuscationFunction005, 32, 136, 33, _ObfuscationFunction009, _DBXYLRSFRPCN, 135, 16))
#define _DBXYLRSFRPCN_005E006B ((___CFDateCreate) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction008, _DBXYLRSFRPCN, 183, 16))
#define _DBXYLRSFRPCN_00D8003D ((___CFReadStreamRead) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction006, _DBXYLRSFRPCN, 204, 17))
#define _DBXYLRSFRPCN_00D80126 ((___CFDictionaryGetValue) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction004, _DBXYLRSFRPCN, 141, 21))
#define _DBXYLRSFRPCN_00D801A2 ((___CFStringCompare) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00B, _DBXYLRSFRPCN, 61, 16))
#define _DBXYLRSFRPCN_00D80231 ((___CFBundleGetValueForInfoDictionaryKey) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction007, _DBXYLRSFRPCN, 90, 37))
#define _DBXYLRSFRPCN_013900C8 ((___SecKeychainSearchCopyNext) _LookupFunction015(_ObfuscationFunction005, 313, 201, 55, _ObfuscationFunction007, _DBXYLRSFRPCN, 144, 34))
#define _DBXYLRSFRPCN_01AD006D ((___CFTimeZoneCreateWithTimeIntervalFromGMT) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction005, _DBXYLRSFRPCN, 120, 48))
#define _DBXYLRSFRPCN_01AD0161 ((___CFNumberCreate) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction004, _DBXYLRSFRPCN, 40, 16))
#define _LGIPGTIEGWJQ_0015020B ((___SecKeychainOpen) _LookupFunction015(_ObfuscationFunction00A, 21, 139, 55, _ObfuscationFunction006, _LGIPGTIEGWJQ, 251, 16))
#define _LGIPGTIEGWJQ_005E0126 ((___CFDictionaryGetValue) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction004, _LGIPGTIEGWJQ, 141, 21))
#define _LGIPGTIEGWJQ_01AD00C1 ((___CFStringGetFileSystemRepresentation) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction006, _LGIPGTIEGWJQ, 225, 36))
#define _LGIPGTIEGWJQ_01AD0105 ((___CFDataCreate) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction003, _LGIPGTIEGWJQ, 188, 16))
#define _LGIPGTIEGWJQ_01AD015A ((___CFStringCompare) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00C, _LGIPGTIEGWJQ, 70, 16))
#define _XDKPSKJODJNL_005E0105 ((___CFDataCreate) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction003, _XDKPSKJODJNL, 188, 16))
#define _XDKPSKJODJNL_005E01F8 ((___CFArrayGetValueAtIndex) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction009, _XDKPSKJODJNL, 33, 23))
#define _XDKPSKJODJNL_005E023D ((___CFAbsoluteTimeGetCurrent) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction00C, _XDKPSKJODJNL, 160, 33))
#define _XDKPSKJODJNL_01AD00CE ((___CFDataCreate) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction003, _XDKPSKJODJNL, 109, 16))
#define _XDKPSKJODJNL_01AD01DB ((___CFDataAppendBytes) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00C, _XDKPSKJODJNL, 196, 18))
#define _XDKPSKJODJNL_01AD0202 ((___CFDictionarySetValue) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction006, _XDKPSKJODJNL, 42, 21))
#define _CBKSUKALVWPQ_00D8002E ((___CFArrayAppendValue) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00A, _CBKSUKALVWPQ, 49, 19))
#define _CBKSUKALVWPQ_00D800FE ((___CFDataCreateMutable) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction007, _CBKSUKALVWPQ, 155, 20))
#define _CBKSUKALVWPQ_00D80183 ((___CFBundleCopyBundleURL) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00B, _CBKSUKALVWPQ, 166, 22))
#define _CBKSUKALVWPQ_00D80230 ((___CFDataGetBytePtr) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00A, _CBKSUKALVWPQ, 37, 17))
#define _UQUFVRIQHDJC_00C2012A ((___CC_SHA1_Final) _LookupFunction015(_ObfuscationFunction007, 194, 183, 33, _ObfuscationFunction009, _UQUFVRIQHDJC, 4, 16))
#define _UQUFVRIQHDJC_00D801F3 ((___CFBundleGetIdentifier) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction008, _UQUFVRIQHDJC, 178, 22))
#define _UQUFVRIQHDJC_0139008C ((___SecCertificateCopyData) _LookupFunction015(_ObfuscationFunction005, 313, 201, 55, _ObfuscationFunction007, _UQUFVRIQHDJC, 185, 23))
#define _UQUFVRIQHDJC_01AD0011 ((___CFStringCompare) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction005, _UQUFVRIQHDJC, 208, 16))
#define _UQUFVRIQHDJC_01AD0078 ((___CFDateFormatterCreateDateFromString) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00A, _UQUFVRIQHDJC, 16, 36))
#define _UQUFVRIQHDJC_01AD00C9 ((___CFURLCreateWithFileSystemPathRelativeToBase) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction004, _UQUFVRIQHDJC, 105, 52))
#define _FKLMEMUUFOBP_002101E4 ((___SecKeychainSearchCreateFromAttributes) _LookupFunction015(_ObfuscationFunction008, 33, 146, 55, _ObfuscationFunction00B, _FKLMEMUUFOBP, 47, 38))
#define _FKLMEMUUFOBP_005E01CD ((___CFDictionaryGetValue) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction009, _FKLMEMUUFOBP, 18, 21))
#define _FKLMEMUUFOBP_00D80022 ((___CFReadStreamClose) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction006, _FKLMEMUUFOBP, 224, 18))
#define _FKLMEMUUFOBP_00D80197 ((___CFDataGetLength) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction005, _FKLMEMUUFOBP, 154, 16))
#define _FKLMEMUUFOBP_01AD0003 ((___CFDataAppendBytes) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00B, _FKLMEMUUFOBP, 147, 18))
#define _FKLMEMUUFOBP_01AD00FC ((___CFNumberCreate) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction005, _FKLMEMUUFOBP, 191, 16))
#define _FKLMEMUUFOBP_01AD01CD ((___CFDictionaryGetValue) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction009, _FKLMEMUUFOBP, 18, 21))
#define _FKLMEMUUFOBP_01AD0230 ((___CFDataGetBytePtr) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00A, _FKLMEMUUFOBP, 37, 17))
#define _FKLMEMUUFOBP_021B011A ((___NSApplicationMain) _LookupFunction015(_ObfuscationFunction00B, 539, 207, 51, _ObfuscationFunction004, _FKLMEMUUFOBP, 223, 18))
#define _TWZAYFSSKURV_00200133 ((___freeifaddrs) _LookupFunction015(_ObfuscationFunction005, 32, 136, 33, _ObfuscationFunction004, _TWZAYFSSKURV, 243, 16))
#define _TWZAYFSSKURV_005E0110 ((___CFReadStreamCreateWithFile) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction008, _TWZAYFSSKURV, 86, 35))
#define _TWZAYFSSKURV_00D80086 ((___CFDictionaryAddValue) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction005, _TWZAYFSSKURV, 183, 21))
#define _TWZAYFSSKURV_00D8012C ((___CFNumberCreate) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00C, _TWZAYFSSKURV, 169, 16))
#define _TWZAYFSSKURV_00D80163 ((___CFDictionaryAddValue) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction003, _TWZAYFSSKURV, 99, 21))
#define _TWZAYFSSKURV_00D801F2 ((___CFDateCompare) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction005, _TWZAYFSSKURV, 253, 16))
#define _kCFBundleIdentifierKey_00D80171 ((___kCFBundleIdentifierKey) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction008, 369, 235, 23))
#define _kCFDateFormatterTimeZone_01AD00FF ((___kCFDateFormatterTimeZone) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction005, 255, 77, 33))
#define _kCFTypeArrayCallBacks_00D8009A ((___kCFTypeArrayCallBacks) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00C, 154, 177, 22))
#define _kCFTypeArrayCallBacks_00D80201 ((___kCFTypeArrayCallBacks) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction007, 513, 95, 22))
#define _kCFTypeArrayCallBacks_01AD009A ((___kCFTypeArrayCallBacks) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction00C, 154, 177, 22))
#define _kCFTypeDictionaryKeyCallBacks_00D800F0 ((___kCFTypeDictionaryKeyCallBacks) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00C, 240, 222, 38))
#define _kCFTypeDictionaryKeyCallBacks_00D80210 ((___kCFTypeDictionaryKeyCallBacks) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00C, 528, 81, 38))
#define _kCFTypeDictionaryKeyCallBacks_01AD00DF ((___kCFTypeDictionaryKeyCallBacks) _LookupFunction015(_ObfuscationFunction006, 429, 219, 67, _ObfuscationFunction009, 223, 156, 38))
#define _kCFTypeDictionaryValueCallBacks_005E0014 ((___kCFTypeDictionaryValueCallBacks) _LookupFunction015(_ObfuscationFunction004, 94, 241, 67, _ObfuscationFunction005, 20, 0, 32))
#define _kCFTypeDictionaryValueCallBacks_00D80098 ((___kCFTypeDictionaryValueCallBacks) _LookupFunction015(_ObfuscationFunction004, 216, 248, 67, _ObfuscationFunction00A, 152, 80, 32))
#define _kSecClass_0015014E ((___kSecClass) _LookupFunction015(_ObfuscationFunction00A, 21, 139, 55, _ObfuscationFunction006, 334, 56, 16))
#define _kSecClassCertificate_013901C9 ((___kSecClassCertificate) _LookupFunction015(_ObfuscationFunction005, 313, 201, 55, _ObfuscationFunction003, 457, 38, 21))
#define _kSecClassCertificate_013901E8 ((___kSecClassCertificate) _LookupFunction015(_ObfuscationFunction005, 313, 201, 55, _ObfuscationFunction00B, 488, 161, 21))
#define _kSecMatchLimit_001500FB ((___kSecMatchLimit) _LookupFunction015(_ObfuscationFunction00A, 21, 139, 55, _ObfuscationFunction007, 251, 229, 16))
#define _kSecMatchLimit_00210204 ((___kSecMatchLimit) _LookupFunction015(_ObfuscationFunction008, 33, 146, 55, _ObfuscationFunction008, 516, 206, 16))
#define _kSecMatchLimitAll_0015017A ((___kSecMatchLimitAll) _LookupFunction015(_ObfuscationFunction00A, 21, 139, 55, _ObfuscationFunction004, 378, 174, 18))
#define _kSecMatchLimitAll_0021017A ((___kSecMatchLimitAll) _LookupFunction015(_ObfuscationFunction008, 33, 146, 55, _ObfuscationFunction004, 378, 174, 18))
#define _kSecMatchSearchList_00150135 ((___kSecMatchSearchList) _LookupFunction015(_ObfuscationFunction00A, 21, 139, 55, _ObfuscationFunction00B, 309, 54, 20))
#define _kSecMatchSearchList_0139010C ((___kSecMatchSearchList) _LookupFunction015(_ObfuscationFunction005, 313, 201, 55, _ObfuscationFunction00B, 268, 248, 20))
#define _kSecMatchSubjectContains_00150242 ((___kSecMatchSubjectContains) _LookupFunction015(_ObfuscationFunction00A, 21, 139, 55, _ObfuscationFunction005, 578, 157, 33))
#define _kSecMatchSubjectContains_01390242 ((___kSecMatchSubjectContains) _LookupFunction015(_ObfuscationFunction005, 313, 201, 55, _ObfuscationFunction005, 578, 157, 33))
#define _kSecReturnRef_013900CD ((___kSecReturnRef) _LookupFunction015(_ObfuscationFunction005, 313, 201, 55, _ObfuscationFunction003, 205, 183, 16))
#define _kSecReturnRef_01390136 ((___kSecReturnRef) _LookupFunction015(_ObfuscationFunction005, 313, 201, 55, _ObfuscationFunction00B, 310, 40, 16))
#define _longjmp_000E00C0 ((___longjmp) _LookupFunction015(_ObfuscationFunction00C, 14, 40, 33, _ObfuscationFunction004, 192, 224, 16))
#define _longjmp_000E0107 ((___longjmp) _LookupFunction015(_ObfuscationFunction00C, 14, 40, 33, _ObfuscationFunction003, 263, 169, 16))
#define _longjmp_000E0108 ((___longjmp) _LookupFunction015(_ObfuscationFunction00C, 14, 40, 33, _ObfuscationFunction00B, 264, 89, 16))
#define _longjmp_002000C0 ((___longjmp) _LookupFunction015(_ObfuscationFunction005, 32, 136, 33, _ObfuscationFunction004, 192, 224, 16))
#define _longjmp_00200107 ((___longjmp) _LookupFunction015(_ObfuscationFunction005, 32, 136, 33, _ObfuscationFunction003, 263, 169, 16))
#define _longjmp_00200108 ((___longjmp) _LookupFunction015(_ObfuscationFunction005, 32, 136, 33, _ObfuscationFunction00B, 264, 89, 16))
#define _longjmp_00C200C0 ((___longjmp) _LookupFunction015(_ObfuscationFunction007, 194, 183, 33, _ObfuscationFunction004, 192, 224, 16))
#define _longjmp_00C20107 ((___longjmp) _LookupFunction015(_ObfuscationFunction007, 194, 183, 33, _ObfuscationFunction003, 263, 169, 16))
#define _longjmp_00C20108 ((___longjmp) _LookupFunction015(_ObfuscationFunction007, 194, 183, 33, _ObfuscationFunction00B, 264, 89, 16))
#define _OBJ_txt2obj_014800AA ((___OBJ_txt2obj) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction00B, 170, 93, 16))
#define _objc_getClass_0046005A ((___objc_getClass) _LookupFunction015(_ObfuscationFunction003, 70, 67, 23, _ObfuscationFunction005, 90, 146, 16))
#define _objc_getClass_004600FD ((___objc_getClass) _LookupFunction015(_ObfuscationFunction003, 70, 67, 23, _ObfuscationFunction004, 253, 38, 16))
#define _objc_getClass_0046022A ((___objc_getClass) _LookupFunction015(_ObfuscationFunction003, 70, 67, 23, _ObfuscationFunction004, 554, 9, 16))
#define _objc_getClass_022B005A ((___objc_getClass) _LookupFunction015(_ObfuscationFunction00B, 555, 174, 23, _ObfuscationFunction005, 90, 146, 16))
#define _objc_getClass_022B00FD ((___objc_getClass) _LookupFunction015(_ObfuscationFunction00B, 555, 174, 23, _ObfuscationFunction004, 253, 38, 16))
#define _objc_getClass_022B022A ((___objc_getClass) _LookupFunction015(_ObfuscationFunction00B, 555, 174, 23, _ObfuscationFunction004, 554, 9, 16))
#define _objc_getClass_023F005A ((___objc_getClass) _LookupFunction015(_ObfuscationFunction009, 575, 43, 23, _ObfuscationFunction005, 90, 146, 16))
#define _objc_getClass_023F00FD ((___objc_getClass) _LookupFunction015(_ObfuscationFunction009, 575, 43, 23, _ObfuscationFunction004, 253, 38, 16))
#define _objc_getClass_023F022A ((___objc_getClass) _LookupFunction015(_ObfuscationFunction009, 575, 43, 23, _ObfuscationFunction004, 554, 9, 16))
#define _objc_msgSend_0046011E ((___objc_msgSend) _LookupFunction015(_ObfuscationFunction003, 70, 67, 23, _ObfuscationFunction006, 286, 221, 16))
#define _objc_msgSend_00460120 ((___objc_msgSend) _LookupFunction015(_ObfuscationFunction003, 70, 67, 23, _ObfuscationFunction008, 288, 186, 16))
#define _objc_msgSend_0046014A ((___objc_msgSend) _LookupFunction015(_ObfuscationFunction003, 70, 67, 23, _ObfuscationFunction009, 330, 201, 16))
#define _objc_msgSend_022B011E ((___objc_msgSend) _LookupFunction015(_ObfuscationFunction00B, 555, 174, 23, _ObfuscationFunction006, 286, 221, 16))
#define _objc_msgSend_022B0120 ((___objc_msgSend) _LookupFunction015(_ObfuscationFunction00B, 555, 174, 23, _ObfuscationFunction008, 288, 186, 16))
#define _objc_msgSend_023F011E ((___objc_msgSend) _LookupFunction015(_ObfuscationFunction009, 575, 43, 23, _ObfuscationFunction006, 286, 221, 16))
#define _objc_msgSend_023F014A ((___objc_msgSend) _LookupFunction015(_ObfuscationFunction009, 575, 43, 23, _ObfuscationFunction009, 330, 201, 16))
#define _OpenSSL_add_all_digests_01890128 ((___OpenSSL_add_all_digests) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction004, 296, 7, 32))
#define _OpenSSL_add_all_digests_0189015D ((___OpenSSL_add_all_digests) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction00C, 349, 5, 32))
#define _PKCS7_free_000501CA ((___PKCS7_free) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction004, 458, 104, 16))
#define _PKCS7_free_014801CA ((___PKCS7_free) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction004, 458, 104, 16))
#define _PKCS7_get0_signers_014801EF ((___PKCS7_get0_signers) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction007, 495, 28, 19))
#define _PKCS7_verify_00050241 ((___PKCS7_verify) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction00C, 577, 120, 16))
#define _SecItemCopyMatching_0021003A ((___SecItemCopyMatching) _LookupFunction015(_ObfuscationFunction008, 33, 146, 55, _ObfuscationFunction009, 58, 197, 20))
#define _SecItemCopyMatching_0139017F ((___SecItemCopyMatching) _LookupFunction015(_ObfuscationFunction005, 313, 201, 55, _ObfuscationFunction004, 383, 143, 20))
#define _sel_registerName_00460080 ((___sel_registerName) _LookupFunction015(_ObfuscationFunction003, 70, 67, 23, _ObfuscationFunction003, 128, 121, 17))
#define _sel_registerName_00460160 ((___sel_registerName) _LookupFunction015(_ObfuscationFunction003, 70, 67, 23, _ObfuscationFunction005, 352, 0, 17))
#define _sel_registerName_022B0049 ((___sel_registerName) _LookupFunction015(_ObfuscationFunction00B, 555, 174, 23, _ObfuscationFunction009, 73, 139, 17))
#define _sel_registerName_022B0080 ((___sel_registerName) _LookupFunction015(_ObfuscationFunction00B, 555, 174, 23, _ObfuscationFunction003, 128, 121, 17))
#define _sel_registerName_023F0049 ((___sel_registerName) _LookupFunction015(_ObfuscationFunction009, 575, 43, 23, _ObfuscationFunction009, 73, 139, 17))
#define _sel_registerName_023F0080 ((___sel_registerName) _LookupFunction015(_ObfuscationFunction009, 575, 43, 23, _ObfuscationFunction003, 128, 121, 17))
#define _sel_registerName_023F0160 ((___sel_registerName) _LookupFunction015(_ObfuscationFunction009, 575, 43, 23, _ObfuscationFunction005, 352, 0, 17))
#define _setjmp_00C20047 ((___setjmp) _LookupFunction015(_ObfuscationFunction007, 194, 183, 33, _ObfuscationFunction007, 71, 21, 16))
#define _SHA1_00050212 ((___SHA1) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction005, 530, 62, 16))
#define _SHA1_Final_01480040 ((___SHA1_Final) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction006, 64, 183, 16))
#define _SHA1_Init_0189002D ((___SHA1_Init) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction006, 45, 232, 16))
#define _SHA1_Update_0148007C ((___SHA1_Update) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction00A, 124, 193, 16))
#define _sk_free_00050159 ((___sk_free) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction009, 345, 131, 16))
#define _sk_num_01480093 ((___sk_num) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction005, 147, 75, 16))
#define _sk_value_0005020F ((___sk_value) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction008, 527, 29, 16))
#define _X509_digest_00050066 ((___X509_digest) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction007, 102, 63, 16))
#define _X509_free_01890121 ((___X509_free) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction004, 289, 231, 16))
#define _X509_get_ext_by_OBJ_01890079 ((___X509_get_ext_by_OBJ) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction005, 121, 76, 20))
#define _X509_NAME_get_text_by_NID_0189007A ((___X509_NAME_get_text_by_NID) _LookupFunction015(_ObfuscationFunction00A, 393, 13, 16, _ObfuscationFunction00A, 122, 13, 34))
#define _X509_STORE_add_cert_00050033 ((___X509_STORE_add_cert) _LookupFunction015(_ObfuscationFunction00A, 5, 149, 16, _ObfuscationFunction007, 51, 85, 20))
#define _X509_STORE_free_0148010B ((___X509_STORE_free) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction003, 267, 219, 16))
#define _X509_STORE_new_01480008 ((___X509_STORE_new) _LookupFunction015(_ObfuscationFunction00B, 328, 104, 16, _ObfuscationFunction006, 8, 212, 16))
    
    
    // CodeBlock ObfuscationFunction / M(Rot)
    inline static void _ObfuscationFunction003(const char *_p1, char *_p2, int _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = (char) (_p1[_i1] - _p3); _i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef _ObfuscationFunction003CF(const char *_p1, int _p3, int _p4) {
        char _tmp1[585];
        char *_tmp2 = _tmp1;
        _ObfuscationFunction003(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((___CFStringCreateWithBytes) _Pointers[159])(NULL, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Rot)
    inline static void _ObfuscationFunction004(const char *_p1, char *_p2, int _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = (char) (_p1[_i1] - _p3); _i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef _ObfuscationFunction004CF(const char *_p1, int _p3, int _p4) {
        char _tmp1[585];
        _ObfuscationFunction004(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((___CFStringCreateWithCString) _Pointers[433])(NULL, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor1)
    inline static void _ObfuscationFunction005(const char *_p1, char *_p2, int _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] ^ (char) _p3; _i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef _ObfuscationFunction005CF(const char *_p1, int _p3, int _p4) {
        char _tmp1[585];
        char *_tmp2 = _tmp1;
        _ObfuscationFunction005(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((___CFStringCreateWithBytes) _Pointers[463])(NULL, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor1)
    inline static void _ObfuscationFunction006(const char *_p1, char *_p2, int _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] ^ (char) _p3; _i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef _ObfuscationFunction006CF(const char *_p1, int _p3, int _p4) {
        char _tmp1[585];
        _ObfuscationFunction006(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((___CFStringCreateWithCString) _Pointers[86])(NULL, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor2)
    inline static void _ObfuscationFunction007(const char *_p1, char *_p2, int _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = (char) (_p1[_i1] ^ _p3 ^ _p4); _i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef _ObfuscationFunction007CF(const char *_p1, int _p3, int _p4) {
        char _tmp1[585];
        char *_tmp2 = _tmp1;
        _ObfuscationFunction007(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((___CFStringCreateWithBytes) _Pointers[463])(NULL, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor2)
    inline static void _ObfuscationFunction008(const char *_p1, char *_p2, int _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = (char) (_p1[_i1] ^ _p3 ^ _p4); _i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef _ObfuscationFunction008CF(const char *_p1, int _p3, int _p4) {
        char _tmp1[585];
        _ObfuscationFunction008(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((___CFStringCreateWithCString) _Pointers[363])(NULL, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor3)
    inline static void _ObfuscationFunction009(const char *_p1, char *_p2, int _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = (char) (_p1[_i1] ^ (_p3 + _p4)); _i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef _ObfuscationFunction009CF(const char *_p1, int _p3, int _p4) {
        char _tmp1[585];
        char *_tmp2 = _tmp1;
        _ObfuscationFunction009(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((___CFStringCreateWithBytes) _Pointers[159])(NULL, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor3)
    inline static void _ObfuscationFunction00A(const char *_p1, char *_p2, int _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = (char) (_p1[_i1] ^ (_p3 + _p4)); _i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef _ObfuscationFunction00ACF(const char *_p1, int _p3, int _p4) {
        char _tmp1[585];
        _ObfuscationFunction00A(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((___CFStringCreateWithCString) _Pointers[433])(NULL, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor4)
    inline static void _ObfuscationFunction00B(const char *_p1, char *_p2, int _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = (char) (_p1[_i1] ^ (_p3 * _p4)); _i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef _ObfuscationFunction00BCF(const char *_p1, int _p3, int _p4) {
        char _tmp1[585];
        char *_tmp2 = _tmp1;
        _ObfuscationFunction00B(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((___CFStringCreateWithBytes) _Pointers[463])(NULL, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor4)
    inline static void _ObfuscationFunction00C(const char *_p1, char *_p2, int _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = (char) (_p1[_i1] ^ (_p3 * _p4)); _i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef _ObfuscationFunction00CCF(const char *_p1, int _p3, int _p4) {
        char _tmp1[585];
        _ObfuscationFunction00C(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((___CFStringCreateWithCString) _Pointers[86])(NULL, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    
    // CodeBlock LookupFunction
    inline static void *_LookupFunction015(_decrypt _func1, int _index1, int _val1, int _len1, _decrypt _func2, int _index2, int _val2, int _len2) {
        char _tmp1[585], _tmp2[585];
        // Load the library if needed
        if (_Pointers[_index1] == NULL) {
            _func1(_Strings[_index1], _tmp1, _val1, _len1);
            _Pointers[_index1] = ((___dlopen) _Pointers[529])(_tmp1, RTLD_NOW | RTLD_FIRST);
        }
        // Load the function if needed
        if (_Pointers[_index2] == NULL) {
            _func2(_Strings[_index2], _tmp2, _val2, _len2);
            _Pointers[_index2] = ((___dlsym) _Pointers[1])(_Pointers[_index1], _tmp2);
        }
        return _Pointers[_index2];
    }
    
    
    
    
    // CodeBlock GetMainBundle
#ifdef DEBUG
    inline static void _GetMainBundle016(_CheckingContext *_ctx) {
        ___RECEIPT_LOG(" - Retrieving main bundle");
        // Retrieve the main bundle
        _ctx->main_bundle = _CFBundleGetMainBundle_005E010A();
        if (!_ctx->main_bundle) {
            // Dead code
            _CFRelease_005E015B(_ctx->main_bundle);
            _CFBundleUnloadExecutable_005E0182((CFBundleRef) _ctx->main_bundle);
        }
        // Global variables computation
        // Set to 254
        _SCDGZQSSSVYY = 254;
        // Set to 61
        _DBXYLRSFRPCN = 61;
        // Set to 193
        _LGIPGTIEGWJQ = 193;
        // Set to 475
        _XDKPSKJODJNL = 475;
        // Set to 387
        _CBKSUKALVWPQ = 387;
        // Set to 201
        _UQUFVRIQHDJC = 201;
        // Set to 34
        _FKLMEMUUFOBP = 34;
        // Set to 272
        _TWZAYFSSKURV = 272;
    }
#else
#define _GetMainBundle016(_ctx) { \
___RECEIPT_LOG(" - Retrieving main bundle"); \
_ctx->main_bundle = _CFBundleGetMainBundle_005E010A(); \
if (!_ctx->main_bundle) { \
_CFRelease_005E015B(_ctx->main_bundle); \
_CFBundleUnloadExecutable_005E0182((CFBundleRef) _ctx->main_bundle); \
} \
_SCDGZQSSSVYY = 254; \
_DBXYLRSFRPCN = 61; \
_LGIPGTIEGWJQ = 193; \
_XDKPSKJODJNL = 475; \
_CBKSUKALVWPQ = 387; \
_UQUFVRIQHDJC = 201; \
_FKLMEMUUFOBP = 34; \
_TWZAYFSSKURV = 272; \
}
#endif
    
    
    // CodeBlock LoadReceipt
#ifndef RECEIGEN_EXTERNAL_RECEIPT
#ifdef DEBUG
    inline static void _LoadReceipt020(_CheckingContext *_ctx) {
        CFStringRef _str1;
        CFURLRef _url1, _url2;
        CFReadStreamRef _stream;
        CFMutableDataRef _data;
        CFIndex _count;
        uint8_t _buffer[585];
        volatile int _code = 136; _code -= 79; _code *= 3; _code += 2;
        ___RECEIPT_LOG(" - Loading receipt");
        // Compute the path to the receipt
        _url1 = _CBKSUKALVWPQ_00D80183((CFBundleRef) _ctx->main_bundle);
        _str1 = _ObfuscationFunction008CF((_Strings[411]), 222, 37);
        _url2 = _UQUFVRIQHDJC_01AD00C9(NULL, _str1, kCFURLPOSIXPathStyle, false, _url1);
        _CFRelease_005E020A(_str1);
        _CFRelease_005E020A(_url1);
        // Create a stream from the receipt file
        _stream = _TWZAYFSSKURV_005E0110(kCFAllocatorDefault, _url2);
        if (_stream == NULL || !_CFReadStreamOpen_00D80035(_stream)) {
            ___RECEIPT_LOG(" - Error while opening receipt");
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00C20216(_code);
            // Dead code
            _CFRelease_005E020A(_str1);
            _CFRelease_005E020A(_url1);
            _CFRelease_005E020A(_str1);
            goto _LoadReceipt020__bail;
        }
        // Create the data object that will contains receipt data
        _data = _SCDGZQSSSVYY_005E00FE(kCFAllocatorDefault, 0);
        // Read the receipt by chunks
        do {
            _count = _DBXYLRSFRPCN_00D8003D(_stream, &_buffer[0], 585);
            if (_count > 0) {
                _XDKPSKJODJNL_01AD01DB(_data, _buffer, _count);
            }
        } while (_count > 0);
        // Close the stream
        _FKLMEMUUFOBP_00D80022(_stream);
        if (_ctx->receipt_data) _CFRelease_005E020A(_ctx->receipt_data);
        _ctx->receipt_data = _data;
        // Global variables computation
        // From 254 to 503
        _SCDGZQSSSVYY -= 87; _SCDGZQSSSVYY *= 3; _SCDGZQSSSVYY += 2;
        // From 475 to 261
        _XDKPSKJODJNL += 308; _XDKPSKJODJNL /= 3;
        // From 272 to 307
        _TWZAYFSSKURV -= 170; _TWZAYFSSKURV *= 3; _TWZAYFSSKURV += 1;
    _LoadReceipt020__bail:
        if (_stream) _CFRelease_005E020A(_stream);
        _CFRelease_005E020A(_url2);
    }
#else
#define _LoadReceipt020(_ctx) { \
CFStringRef _str1; \
CFURLRef _url1, _url2; \
CFReadStreamRef _stream; \
CFMutableDataRef _data; \
CFIndex _count; \
uint8_t _buffer[585]; \
volatile int _code = 136; _code -= 79; _code *= 3; _code += 2;  \
___RECEIPT_LOG(" - Loading receipt"); \
_url1 = _CBKSUKALVWPQ_00D80183((CFBundleRef) _ctx->main_bundle); \
_str1 = _ObfuscationFunction008CF((_Strings[411]), 222, 37); \
_url2 = _UQUFVRIQHDJC_01AD00C9(NULL, _str1, kCFURLPOSIXPathStyle, false, _url1); \
_CFRelease_005E020A(_str1); \
_CFRelease_005E020A(_url1); \
_stream = _TWZAYFSSKURV_005E0110(kCFAllocatorDefault, _url2); \
if (_stream == NULL || !_CFReadStreamOpen_00D80035(_stream)) { \
___RECEIPT_LOG(" - Error while opening receipt"); \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20216(_code); \
_CFRelease_005E020A(_str1); \
_CFRelease_005E020A(_url1); \
_CFRelease_005E020A(_str1); \
goto _LoadReceipt020__bail; \
} \
_data = _SCDGZQSSSVYY_005E00FE(kCFAllocatorDefault, 0); \
do { \
_count = _DBXYLRSFRPCN_00D8003D(_stream, &_buffer[0], 585); \
if (_count > 0) { \
_XDKPSKJODJNL_01AD01DB(_data, _buffer, _count); \
} \
} while (_count > 0); \
_FKLMEMUUFOBP_00D80022(_stream); \
if (_ctx->receipt_data) _CFRelease_005E020A(_ctx->receipt_data); \
_ctx->receipt_data = _data; \
_SCDGZQSSSVYY -= 87; _SCDGZQSSSVYY *= 3; _SCDGZQSSSVYY += 2;  \
_XDKPSKJODJNL += 308; _XDKPSKJODJNL /= 3;  \
_TWZAYFSSKURV -= 170; _TWZAYFSSKURV *= 3; _TWZAYFSSKURV += 1;  \
_LoadReceipt020__bail: \
if (_stream) _CFRelease_005E020A(_stream);     \
_CFRelease_005E020A(_url2); \
}
#endif
#endif
    
#ifdef RECEIGEN_EXTERNAL_RECEIPT
#ifdef DEBUG
    inline static void _LoadReceipt020(_CheckingContext *_ctx) {
        CFStringRef _str1;
        CFURLRef _url1 = NULL;
        CFReadStreamRef _stream = NULL;
        CFMutableDataRef _data;
        CFIndex _count;
        uint8_t _buffer[585];
        char _path[PATH_MAX];
        int _status;
        glob_t _glob_buffer;
        char *_expanded_path;
        volatile int _code = 35; _code -= 7; _code *= 6; _code += 5;
        _str1 = _ObfuscationFunction005CF((_Strings[242]), 155, 16);
        ___RECEIPT_LOG(" - Loading external receipt at '%s'", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()));
        // Compute the path to the receipt
        if (!_LGIPGTIEGWJQ_01AD00C1(_str1, _path, PATH_MAX)) {
            ___RECEIPT_LOG(" - Cannot convert receipt path");
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00200216(_code);
            // Dead code
            _CFRelease_01AD01B0(_url1);
            _CFRelease_01AD01B0(_str1);
            _CFRelease_01AD01B0(_url1);
            goto _LoadReceipt020__bail;
        }
        _status = ((___glob) _Pointers[306])(_path, GLOB_TILDE | GLOB_ERR, NULL, &_glob_buffer);
        if (_status != 0 || _glob_buffer.gl_pathc != 1) {
            ((___globfree) _Pointers[323])(&_glob_buffer);
            ___RECEIPT_LOG(" - Error while globbing receipt path");
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00200216(_code);
            // Dead code
            _CFRelease_01AD01B0(_str1);
            _CFRelease_01AD01B0(_url1);
            _CFRelease_01AD01B0(_str1);
            goto _LoadReceipt020__bail;
        }
        // Get the globbed path
        _expanded_path = _glob_buffer.gl_pathv[0];
        ___RECEIPT_LOG(" - Receipt path resolved to '%s'", _expanded_path);
        _url1 = _CFURLCreateFromFileSystemRepresentation_00D801E2(kCFAllocatorDefault, (const UInt8 *) _expanded_path, (CFIndex) ((___strlen) _Pointers[381])(_expanded_path), false);
        ((___globfree) _Pointers[323])(&_glob_buffer);
        // Create a stream from the receipt file
        _stream = _TWZAYFSSKURV_005E0110(kCFAllocatorDefault, _url1);
        if (_stream == NULL || !_CFReadStreamOpen_01AD0035(_stream)) {
            ___RECEIPT_LOG(" - Error while opening receipt");
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00200216(_code);
            // Dead code
            _CFRelease_01AD01B0(_str1);
            _CFRelease_01AD01B0(_url1);
            _CFRelease_01AD01B0(_str1);
            goto _LoadReceipt020__bail;
        }
        // Create the data object that will contains receipt data
        _data = _SCDGZQSSSVYY_005E00FE(kCFAllocatorDefault, 0);
        // Read the receipt by chunks
        do {
            _count = _DBXYLRSFRPCN_00D8003D(_stream, &_buffer[0], 585);
            if (_count > 0) {
                _XDKPSKJODJNL_01AD01DB(_data, _buffer, _count);
            }
        } while (_count > 0);
        // Close the stream
        _FKLMEMUUFOBP_00D80022(_stream);
        if (_ctx->receipt_data) _CFRelease_01AD01B0(_ctx->receipt_data);
        _ctx->receipt_data = _data;
        // Global variables computation
        // From 254 to 503
        _SCDGZQSSSVYY -= 87; _SCDGZQSSSVYY *= 3; _SCDGZQSSSVYY += 2;
        // From 475 to 261
        _XDKPSKJODJNL += 308; _XDKPSKJODJNL /= 3;
        // From 272 to 307
        _TWZAYFSSKURV -= 170; _TWZAYFSSKURV *= 3; _TWZAYFSSKURV += 1;
    _LoadReceipt020__bail:
        if (_stream) _CFRelease_01AD01B0(_stream);
        _CFRelease_01AD01B0(_str1);
        if (_url1) _CFRelease_01AD01B0(_url1);
    }
#else
#define _LoadReceipt020(_ctx) { \
CFStringRef _str1; \
CFURLRef _url1 = NULL; \
CFReadStreamRef _stream = NULL; \
CFMutableDataRef _data; \
CFIndex _count; \
uint8_t _buffer[585]; \
char _path[PATH_MAX]; \
int _status; \
glob_t _glob_buffer; \
char *_expanded_path; \
volatile int _code = 35; _code -= 7; _code *= 6; _code += 5;  \
_str1 = _ObfuscationFunction005CF((_Strings[242]), 155, 16); \
___RECEIPT_LOG(" - Loading external receipt at '%s'", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding())); \
if (!_LGIPGTIEGWJQ_01AD00C1(_str1, _path, PATH_MAX)) { \
___RECEIPT_LOG(" - Cannot convert receipt path"); \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00200216(_code); \
_CFRelease_01AD01B0(_url1); \
_CFRelease_01AD01B0(_str1); \
_CFRelease_01AD01B0(_url1); \
goto _LoadReceipt020__bail; \
} \
_status = ((___glob) _Pointers[306])(_path, GLOB_TILDE | GLOB_ERR, NULL, &_glob_buffer); \
if (_status != 0 || _glob_buffer.gl_pathc != 1) { \
((___globfree) _Pointers[323])(&_glob_buffer); \
___RECEIPT_LOG(" - Error while globbing receipt path"); \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00200216(_code); \
_CFRelease_01AD01B0(_str1); \
_CFRelease_01AD01B0(_url1); \
_CFRelease_01AD01B0(_str1); \
goto _LoadReceipt020__bail; \
} \
_expanded_path = _glob_buffer.gl_pathv[0]; \
___RECEIPT_LOG(" - Receipt path resolved to '%s'", _expanded_path); \
_url1 = _CFURLCreateFromFileSystemRepresentation_00D801E2(kCFAllocatorDefault, (const UInt8 *) _expanded_path, (CFIndex) ((___strlen) _Pointers[381])(_expanded_path), false); \
((___globfree) _Pointers[323])(&_glob_buffer); \
_stream = _TWZAYFSSKURV_005E0110(kCFAllocatorDefault, _url1); \
if (_stream == NULL || !_CFReadStreamOpen_01AD0035(_stream)) { \
___RECEIPT_LOG(" - Error while opening receipt"); \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00200216(_code); \
_CFRelease_01AD01B0(_str1); \
_CFRelease_01AD01B0(_url1); \
_CFRelease_01AD01B0(_str1); \
goto _LoadReceipt020__bail; \
} \
_data = _SCDGZQSSSVYY_005E00FE(kCFAllocatorDefault, 0); \
do { \
_count = _DBXYLRSFRPCN_00D8003D(_stream, &_buffer[0], 585); \
if (_count > 0) { \
_XDKPSKJODJNL_01AD01DB(_data, _buffer, _count); \
} \
} while (_count > 0); \
_FKLMEMUUFOBP_00D80022(_stream); \
if (_ctx->receipt_data) _CFRelease_01AD01B0(_ctx->receipt_data); \
_ctx->receipt_data = _data; \
_SCDGZQSSSVYY -= 87; _SCDGZQSSSVYY *= 3; _SCDGZQSSSVYY += 2;  \
_XDKPSKJODJNL += 308; _XDKPSKJODJNL /= 3;  \
_TWZAYFSSKURV -= 170; _TWZAYFSSKURV *= 3; _TWZAYFSSKURV += 1;  \
_LoadReceipt020__bail: \
if (_stream) _CFRelease_01AD01B0(_stream);     \
_CFRelease_01AD01B0(_str1); \
if (_url1) _CFRelease_01AD01B0(_url1); \
}
#endif
#endif
    
    
    // CodeBlock GetGUID
#ifdef DEBUG
    inline static void _GetGUID044(_CheckingContext *_ctx) {
        struct ifaddrs *_ifaddr = NULL, *_ifa = NULL;
        struct sockaddr_dl *_sdl = NULL;
        const char *_link = NULL;
        char *_str1;
        ___RECEIPT_LOG(" - Getting MAC address");
        // Access to the interface table
        if (_SCDGZQSSSVYY_00C201F7(&_ifaddr) == -1) {
            // Dead code
            _CFRelease_01AD020A(_ctx->guid_data);
        } else {
            // Iterate over the interfaces
            for(_ifa = _ifaddr; _ifa; _ifa = _ifa->ifa_next) {
                // Skip loopback interfaces
                if (_ifa->ifa_flags & IFF_LOOPBACK) {
                    continue;
                }
                // Skip loopback interfaces
                if (_ifa->ifa_addr->sa_family != AF_LINK) {
                    continue;
                }
                // Match primary interface
                char _str1_[585];
                _ObfuscationFunction007((_Strings[168]), _str1_, 239, 16);
                _str1 = _str1_;
                if (((___strcmp) _Pointers[455])(_ifa->ifa_name, _str1)) {
                    continue;
                }
                // Extract link structure
                _sdl = (struct sockaddr_dl *) _ifa->ifa_addr;
                _link = LLADDR(_sdl);
                // Copy the MAC address data
                if (_ctx->guid_data) _CFRelease_01AD020A(_ctx->guid_data);
                volatile int _size = 2; _size -= 1; _size *= 5; _size += 1;
                _ctx->guid_data = _XDKPSKJODJNL_005E0105(NULL, (const UInt8 *) _link, (CFIndex) _size);
                break;
            }
            _TWZAYFSSKURV_00200133(_ifaddr);
        }
        // Global variables computation
        // From 503 to 175
        _SCDGZQSSSVYY += 197; _SCDGZQSSSVYY /= 4;
        // From 61 to 200
        _DBXYLRSFRPCN -= 21; _DBXYLRSFRPCN *= 5;
        // From 193 to 523
        _LGIPGTIEGWJQ -= 63; _LGIPGTIEGWJQ *= 4; _LGIPGTIEGWJQ += 3;
        // From 261 to 504
        _XDKPSKJODJNL -= 93; _XDKPSKJODJNL *= 3;
        // Set to 46
        _CBKSUKALVWPQ = 46;
        // Set to 140
        _UQUFVRIQHDJC = 140;
        // From 34 to 484
        _FKLMEMUUFOBP -= 4; _FKLMEMUUFOBP *= 16; _FKLMEMUUFOBP += 4;
        // Set to 134
        _TWZAYFSSKURV = 134;
    }
#else
#define _GetGUID044(_ctx) { \
struct ifaddrs *_ifaddr = NULL, *_ifa = NULL; \
struct sockaddr_dl *_sdl = NULL; \
const char *_link = NULL; \
char *_str1; \
___RECEIPT_LOG(" - Getting MAC address"); \
if (_SCDGZQSSSVYY_00C201F7(&_ifaddr) == -1) { \
_CFRelease_01AD020A(_ctx->guid_data); \
} else { \
for(_ifa = _ifaddr; _ifa; _ifa = _ifa->ifa_next) { \
if (_ifa->ifa_flags & IFF_LOOPBACK) { \
continue; \
} \
if (_ifa->ifa_addr->sa_family != AF_LINK) { \
continue; \
} \
char _str1_[585]; \
_ObfuscationFunction007((_Strings[168]), _str1_, 239, 16); \
_str1 = _str1_;  \
if (((___strcmp) _Pointers[455])(_ifa->ifa_name, _str1)) { \
continue; \
} \
_sdl = (struct sockaddr_dl *) _ifa->ifa_addr; \
_link = LLADDR(_sdl); \
if (_ctx->guid_data) _CFRelease_01AD020A(_ctx->guid_data); \
volatile int _size = 2; _size -= 1; _size *= 5; _size += 1;  \
_ctx->guid_data = _XDKPSKJODJNL_005E0105(NULL, (const UInt8 *) _link, (CFIndex) _size); \
break; \
} \
_TWZAYFSSKURV_00200133(_ifaddr); \
} \
_SCDGZQSSSVYY += 197; _SCDGZQSSSVYY /= 4;  \
_DBXYLRSFRPCN -= 21; _DBXYLRSFRPCN *= 5;  \
_LGIPGTIEGWJQ -= 63; _LGIPGTIEGWJQ *= 4; _LGIPGTIEGWJQ += 3;  \
_XDKPSKJODJNL -= 93; _XDKPSKJODJNL *= 3;  \
_CBKSUKALVWPQ = 46; \
_UQUFVRIQHDJC = 140; \
_FKLMEMUUFOBP -= 4; _FKLMEMUUFOBP *= 16; _FKLMEMUUFOBP += 4;  \
_TWZAYFSSKURV = 134; \
}
#endif
    
    
    // CodeBlock GetRootCA
#if MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_6
#ifdef DEBUG
    inline static void _GetRootCA050(_CheckingContext *_ctx) {
        OSStatus _status;
        SecKeychainRef _keychain = NULL;
        CFTypeRef _searchList = NULL;
        CFDictionaryRef _searchDict = NULL;
        char *_str1;
        CFTypeRef _str2 = NULL;
        CFIndex _idx;
        CFTypeRef _results = NULL;
        SecCertificateRef _certificate = NULL;
        volatile CFIndex _count1 = 1; _count1 /= 1;
        volatile CFIndex _count2 = 3; _count2 -= 2; _count2 *= 3; _count2 += 2;
        const void *_searchKeys[5];
        const void *_searchValues[5];
        volatile int _code = 162; _code -= 105; _code *= 3; _code += 2;
        ___RECEIPT_LOG(" - Loading Apple Root CA");
        char _str1_[585];
        _ObfuscationFunction00C((_Strings[25]), _str1_, 207, 66);
        _str1 = _str1_;
        _status = _LGIPGTIEGWJQ_0015020B(_str1, &_keychain);
        if (_status != errSecSuccess) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00200177(_code);
            // Dead code
            // TODO
            goto _GetRootCA050__bail;
        }
        // Create a search list within the system Keychain
        _searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&_keychain, _count1, _kCFTypeArrayCallBacks_00D8009A);
        // Create the criteria dictionary to find the Apple Root CA certificate
        _str2 = _ObfuscationFunction007CF((_Strings[483]), 187, 16);
        _searchKeys[0] = *_kSecClass_0015014E;
        _searchValues[0] = *_kSecClassCertificate_013901E8;
        _searchKeys[1] = *_kSecMatchSearchList_00150135;
        _searchValues[1] = _searchList;
        _searchKeys[2] = *_kSecMatchSubjectContains_00150242;
        _searchValues[2] = _str2;
        _searchKeys[3] = *_kSecMatchLimit_001500FB;
        _searchValues[3] = *_kSecMatchLimitAll_0015017A;
        _searchKeys[4] = *_kSecReturnRef_013900CD;
        _searchValues[4] = kCFBooleanTrue;
        _searchDict = _CFDictionaryCreateMutable_005E010F(kCFAllocatorDefault, _count2, _kCFTypeDictionaryKeyCallBacks_00D80210, _kCFTypeDictionaryValueCallBacks_00D80098);
        while(_count2-- > 0) {
            _TWZAYFSSKURV_00D80086((CFMutableDictionaryRef) _searchDict, _searchKeys[_count2], _searchValues[_count2]);
        }
        // Perform the actual search
        _status = _SecItemCopyMatching_0139017F(_searchDict, &_results);
        if (_status != errSecSuccess) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00200177(_code);
            // Dead code
            // TODO
            goto _GetRootCA050__bail;
        }
        // Iterate over the results and copy the certificate data
        for(_idx = 0; _idx < _CFArrayGetCount_00D80142((CFArrayRef) _results); _idx++) {
            _certificate = (SecCertificateRef) _XDKPSKJODJNL_005E01F8((CFArrayRef) _results, _idx);
            if (_ctx->ca_data) _CFRelease_00D801B0(_ctx->ca_data);
            _ctx->ca_data = _UQUFVRIQHDJC_0139008C(_certificate);
        }
        // Global variables computation
        // From 175 to 416
        _SCDGZQSSSVYY -= 71; _SCDGZQSSSVYY *= 4;
        // From 200 to 418
        _DBXYLRSFRPCN -= 96; _DBXYLRSFRPCN *= 4; _DBXYLRSFRPCN += 2;
        // From 140 to 499
        _UQUFVRIQHDJC -= 41; _UQUFVRIQHDJC *= 5; _UQUFVRIQHDJC += 4;
    _GetRootCA050__bail:
        if (_str2) _CFRelease_00D801B0(_str2);
        if (_results) _CFRelease_00D801B0(_results);
        if (_searchDict) _CFRelease_00D801B0(_searchDict);
        if (_searchList) _CFRelease_00D801B0(_searchList);
        if (_keychain) _CFRelease_00D801B0(_keychain);
    }
#else
#define _GetRootCA050(_ctx) { \
OSStatus _status; \
SecKeychainRef _keychain = NULL; \
CFTypeRef _searchList = NULL; \
CFDictionaryRef _searchDict = NULL; \
char *_str1; \
CFTypeRef _str2 = NULL; \
CFIndex _idx; \
CFTypeRef _results = NULL; \
SecCertificateRef _certificate = NULL; \
volatile CFIndex _count1 = 1; _count1 /= 1;  \
volatile CFIndex _count2 = 3; _count2 -= 2; _count2 *= 3; _count2 += 2;  \
const void *_searchKeys[5]; \
const void *_searchValues[5]; \
volatile int _code = 162; _code -= 105; _code *= 3; _code += 2;  \
___RECEIPT_LOG(" - Loading Apple Root CA"); \
char _str1_[585]; \
_ObfuscationFunction00C((_Strings[25]), _str1_, 207, 66); \
_str1 = _str1_; \
_status = _LGIPGTIEGWJQ_0015020B(_str1, &_keychain); \
if (_status != errSecSuccess) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00200177(_code); \
goto _GetRootCA050__bail; \
} \
_searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&_keychain, _count1, _kCFTypeArrayCallBacks_00D8009A); \
_str2 = _ObfuscationFunction007CF((_Strings[483]), 187, 16); \
_searchKeys[0] = *_kSecClass_0015014E; \
_searchValues[0] = *_kSecClassCertificate_013901E8; \
_searchKeys[1] = *_kSecMatchSearchList_00150135; \
_searchValues[1] = _searchList; \
_searchKeys[2] = *_kSecMatchSubjectContains_00150242; \
_searchValues[2] = _str2; \
_searchKeys[3] = *_kSecMatchLimit_001500FB; \
_searchValues[3] = *_kSecMatchLimitAll_0015017A; \
_searchKeys[4] = *_kSecReturnRef_013900CD; \
_searchValues[4] = kCFBooleanTrue; \
_searchDict = _CFDictionaryCreateMutable_005E010F(kCFAllocatorDefault, _count2, _kCFTypeDictionaryKeyCallBacks_00D80210, _kCFTypeDictionaryValueCallBacks_00D80098); \
while(_count2-- > 0) { \
_TWZAYFSSKURV_00D80086((CFMutableDictionaryRef) _searchDict, _searchKeys[_count2], _searchValues[_count2]); \
} \
_status = _SecItemCopyMatching_0139017F(_searchDict, &_results); \
if (_status != errSecSuccess) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00200177(_code); \
goto _GetRootCA050__bail; \
} \
for(_idx = 0; _idx < _CFArrayGetCount_00D80142((CFArrayRef) _results); _idx++) { \
_certificate = (SecCertificateRef) _XDKPSKJODJNL_005E01F8((CFArrayRef) _results, _idx); \
if (_ctx->ca_data) _CFRelease_00D801B0(_ctx->ca_data); \
_ctx->ca_data = _UQUFVRIQHDJC_0139008C(_certificate); \
} \
_SCDGZQSSSVYY -= 71; _SCDGZQSSSVYY *= 4;  \
_DBXYLRSFRPCN -= 96; _DBXYLRSFRPCN *= 4; _DBXYLRSFRPCN += 2;  \
_UQUFVRIQHDJC -= 41; _UQUFVRIQHDJC *= 5; _UQUFVRIQHDJC += 4;  \
_GetRootCA050__bail: \
if (_str2) _CFRelease_00D801B0(_str2); \
if (_results) _CFRelease_00D801B0(_results); \
if (_searchDict) _CFRelease_00D801B0(_searchDict); \
if (_searchList) _CFRelease_00D801B0(_searchList); \
if (_keychain) _CFRelease_00D801B0(_keychain); \
}
#endif
#endif
    
#if MAC_OS_X_VERSION_MIN_REQUIRED == MAC_OS_X_VERSION_10_6
#ifdef DEBUG
    inline static void _GetRootCA050(_CheckingContext *_ctx) {
        OSStatus _status;
        SecKeychainRef _keychain = NULL;
        CFTypeRef _searchList = NULL;
        char *_str1, *_str2;
        SecKeychainAttributeList _attributeList;
        SecKeychainAttribute _attribute;
        SecKeychainSearchRef _searchRef = NULL;
        SecKeychainItemRef _itemRef = nil;
        volatile CFIndex _count1 = 1; _count1 /= 1;
        volatile CFIndex _count2 = 2; _count2 -= 1; _count2 *= 4; _count2 += 1;
        volatile CFIndex _count3 = 5; _count3 -= 2; _count3 *= 4; _count3 += 1;
        volatile int _code = 74; _code -= 31; _code *= 4; _code += 1;
        ___RECEIPT_LOG(" - Loading Apple Root CA");
        char _str1_[585];
        _ObfuscationFunction00B((_Strings[180]), _str1_, 94, 66);
        _str1 = _str1_;
        _status = _LGIPGTIEGWJQ_0015020B(_str1, &_keychain);
        if (_status != errSecSuccess) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_000E0216(_code);
            // Dead code
            goto _GetRootCA050__bail;
        }
        // Create a search list within the system Keychain
        _searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&_keychain, _count1, _kCFTypeArrayCallBacks_01AD009A);
        // Create the criteria dictionary to find the Apple Root CA certificate
        char _str2_[585];
        _ObfuscationFunction007((_Strings[402]), _str2_, 180, 16);
        _str2 = _str2_;
        _attributeList.count = 1;
        _attributeList.attr  = &_attribute;
        _attribute.tag = kSecLabelItemAttr;
        _attribute.data = _str2;
        _attribute.length = (UInt32) _count3;
        _status = _FKLMEMUUFOBP_002101E4(_searchList, kSecCertificateItemClass, &_attributeList, &_searchRef);
        if (_status != errSecSuccess) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_000E0216(_code);
            // Dead code
            goto _GetRootCA050__bail;
        }
        // Iterate over the results and copy the certificate data
        while(_DBXYLRSFRPCN_013900C8(_searchRef, &_itemRef) == noErr) {
            if (_ctx->ca_data) _CFRelease_005E020A(_ctx->ca_data);
            _ctx->ca_data = _UQUFVRIQHDJC_0139008C((SecCertificateRef) _itemRef);
        }
        // Global variables computation
        // From 175 to 416
        _SCDGZQSSSVYY -= 71; _SCDGZQSSSVYY *= 4;
        // From 200 to 418
        _DBXYLRSFRPCN -= 96; _DBXYLRSFRPCN *= 4; _DBXYLRSFRPCN += 2;
        // From 140 to 499
        _UQUFVRIQHDJC -= 41; _UQUFVRIQHDJC *= 5; _UQUFVRIQHDJC += 4;
    _GetRootCA050__bail:
        if (_itemRef) _CFRelease_005E020A(_itemRef);
        if (_searchRef) _CFRelease_005E020A(_searchRef);
        if (_searchList) _CFRelease_005E020A(_searchList);
        if (_keychain) _CFRelease_005E020A(_keychain);
    }
#else
#define _GetRootCA050(_ctx) { \
OSStatus _status; \
SecKeychainRef _keychain = NULL; \
CFTypeRef _searchList = NULL; \
char *_str1, *_str2; \
SecKeychainAttributeList _attributeList; \
SecKeychainAttribute _attribute; \
SecKeychainSearchRef _searchRef = NULL; \
SecKeychainItemRef _itemRef = nil; \
volatile CFIndex _count1 = 1; _count1 /= 1;  \
volatile CFIndex _count2 = 2; _count2 -= 1; _count2 *= 4; _count2 += 1;  \
volatile CFIndex _count3 = 5; _count3 -= 2; _count3 *= 4; _count3 += 1;  \
volatile int _code = 74; _code -= 31; _code *= 4; _code += 1;  \
___RECEIPT_LOG(" - Loading Apple Root CA"); \
char _str1_[585]; \
_ObfuscationFunction00B((_Strings[180]), _str1_, 94, 66); \
_str1 = _str1_; \
_status = _LGIPGTIEGWJQ_0015020B(_str1, &_keychain); \
if (_status != errSecSuccess) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _GetRootCA050__bail; \
} \
_searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&_keychain, _count1, _kCFTypeArrayCallBacks_01AD009A); \
char _str2_[585]; \
_ObfuscationFunction007((_Strings[402]), _str2_, 180, 16); \
_str2 = _str2_; \
_attributeList.count = 1; \
_attributeList.attr  = &_attribute; \
_attribute.tag = kSecLabelItemAttr; \
_attribute.data = _str2; \
_attribute.length = (UInt32) _count3; \
_status = _FKLMEMUUFOBP_002101E4(_searchList, kSecCertificateItemClass, &_attributeList, &_searchRef); \
if (_status != errSecSuccess) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _GetRootCA050__bail; \
} \
while(_DBXYLRSFRPCN_013900C8(_searchRef, &_itemRef) == noErr) { \
if (_ctx->ca_data) _CFRelease_005E020A(_ctx->ca_data); \
_ctx->ca_data = _UQUFVRIQHDJC_0139008C((SecCertificateRef) _itemRef); \
} \
_SCDGZQSSSVYY -= 71; _SCDGZQSSSVYY *= 4;  \
_DBXYLRSFRPCN -= 96; _DBXYLRSFRPCN *= 4; _DBXYLRSFRPCN += 2;  \
_UQUFVRIQHDJC -= 41; _UQUFVRIQHDJC *= 5; _UQUFVRIQHDJC += 4;  \
_GetRootCA050__bail: \
if (_itemRef) _CFRelease_005E020A(_itemRef); \
if (_searchRef) _CFRelease_005E020A(_searchRef); \
if (_searchList) _CFRelease_005E020A(_searchList); \
if (_keychain) _CFRelease_005E020A(_keychain); \
}
#endif
#endif
    
    
    // CodeBlock CheckBundleIdentifier
#ifdef DEBUG
    inline static void _CheckBundleIdentifier05B(_CheckingContext *_ctx) {
        CFStringRef _str1 = _ObfuscationFunction00CCF((_Strings[224]), 116, 32);
        ___RECEIPT_LOG(" - Checking bundle identifier");
        volatile int _code = 13; _code -= 2; _code *= 15; _code += 8;
        CFStringRef _str2 = _UQUFVRIQHDJC_00D801F3((CFBundleRef) _ctx->main_bundle);
        if (_DBXYLRSFRPCN_00D801A2(_str1, _str2, 0) != kCFCompareEqualTo) {
            ___RECEIPT_LOG(" - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str2, CFStringGetSystemEncoding()));
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_000E0216(_code);
            // Dead code
            _CFRelease_005E01B0(_str2);
            _CFRelease_005E01B0(_str2);
        }
        // Global variables computation
        // From 418 to 561
        _DBXYLRSFRPCN -= 231; _DBXYLRSFRPCN *= 3;
        // From 523 to 346
        _LGIPGTIEGWJQ += 515; _LGIPGTIEGWJQ /= 3;
        _CFRelease_005E01B0(_str1);
    }
#else
#define _CheckBundleIdentifier05B(_ctx) { \
CFStringRef _str1 = _ObfuscationFunction00CCF((_Strings[224]), 116, 32); \
___RECEIPT_LOG(" - Checking bundle identifier"); \
volatile int _code = 13; _code -= 2; _code *= 15; _code += 8;  \
CFStringRef _str2 = _UQUFVRIQHDJC_00D801F3((CFBundleRef) _ctx->main_bundle); \
if (_DBXYLRSFRPCN_00D801A2(_str1, _str2, 0) != kCFCompareEqualTo) { \
___RECEIPT_LOG(" - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str2, CFStringGetSystemEncoding())); \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
_CFRelease_005E01B0(_str2); \
_CFRelease_005E01B0(_str2); \
} \
_DBXYLRSFRPCN -= 231; _DBXYLRSFRPCN *= 3;  \
_LGIPGTIEGWJQ += 515; _LGIPGTIEGWJQ /= 3;  \
_CFRelease_005E01B0(_str1); \
}
#endif
    
    
    // CodeBlock CheckBundleVersion
#ifdef DEBUG
    inline static void _CheckBundleVersion060(_CheckingContext *_ctx) {
        ___RECEIPT_LOG(" - Checking bundle version");
        volatile int _code = 122; _code -= 65; _code *= 3; _code += 2;
        CFStringRef _str1 = _ObfuscationFunction003CF((_Strings[174]), 57, 16);
        CFStringRef _str2 = _ObfuscationFunction008CF((_Strings[479]), 221, 35);
        CFStringRef _str3 = (CFStringRef) _DBXYLRSFRPCN_00D80231((CFBundleRef) _ctx->main_bundle, _str2);
        if (_LGIPGTIEGWJQ_01AD015A(_str1, _str3, 0) != kCFCompareEqualTo) {
            ___RECEIPT_LOG(" - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str3, CFStringGetSystemEncoding()));
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_000E01BF(_code);
            // Dead code
            _CFRelease_01AD01B0(_str1);
            _CFRelease_01AD01B0(_str2);
            _CFRelease_01AD01B0(_str1);
        }
        // Global variables computation
        // From 416 to 533
        _SCDGZQSSSVYY -= 239; _SCDGZQSSSVYY *= 3; _SCDGZQSSSVYY += 2;
        // From 561 to 109
        _DBXYLRSFRPCN += 202; _DBXYLRSFRPCN /= 7;
        // From 346 to 261
        _LGIPGTIEGWJQ += 176; _LGIPGTIEGWJQ /= 2;
        // From 504 to 514
        _XDKPSKJODJNL -= 333; _XDKPSKJODJNL *= 3; _XDKPSKJODJNL += 1;
        // From 46 to 560
        _CBKSUKALVWPQ -= 6; _CBKSUKALVWPQ *= 14;
        // Set to 120
        _UQUFVRIQHDJC = 120;
        // From 484 to 3
        _FKLMEMUUFOBP += 5; _FKLMEMUUFOBP /= 163;
        // From 134 to 355
        _TWZAYFSSKURV -= 46; _TWZAYFSSKURV *= 4; _TWZAYFSSKURV += 3;
        _CFRelease_01AD01B0(_str2);
        _CFRelease_01AD01B0(_str1);
    }
#else
#define _CheckBundleVersion060(_ctx) { \
___RECEIPT_LOG(" - Checking bundle version"); \
volatile int _code = 122; _code -= 65; _code *= 3; _code += 2;  \
CFStringRef _str1 = _ObfuscationFunction003CF((_Strings[174]), 57, 16); \
CFStringRef _str2 = _ObfuscationFunction008CF((_Strings[479]), 221, 35); \
CFStringRef _str3 = (CFStringRef) _DBXYLRSFRPCN_00D80231((CFBundleRef) _ctx->main_bundle, _str2); \
if (_LGIPGTIEGWJQ_01AD015A(_str1, _str3, 0) != kCFCompareEqualTo) { \
___RECEIPT_LOG(" - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str3, CFStringGetSystemEncoding())); \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E01BF(_code); \
_CFRelease_01AD01B0(_str1); \
_CFRelease_01AD01B0(_str2); \
_CFRelease_01AD01B0(_str1); \
} \
_SCDGZQSSSVYY -= 239; _SCDGZQSSSVYY *= 3; _SCDGZQSSSVYY += 2;  \
_DBXYLRSFRPCN += 202; _DBXYLRSFRPCN /= 7;  \
_LGIPGTIEGWJQ += 176; _LGIPGTIEGWJQ /= 2;  \
_XDKPSKJODJNL -= 333; _XDKPSKJODJNL *= 3; _XDKPSKJODJNL += 1;  \
_CBKSUKALVWPQ -= 6; _CBKSUKALVWPQ *= 14;  \
_UQUFVRIQHDJC = 120; \
_FKLMEMUUFOBP += 5; _FKLMEMUUFOBP /= 163;  \
_TWZAYFSSKURV -= 46; _TWZAYFSSKURV *= 4; _TWZAYFSSKURV += 3;  \
_CFRelease_01AD01B0(_str2); \
_CFRelease_01AD01B0(_str1); \
}
#endif
    
    
    // CodeBlock GetReceiptInformation
#ifdef DEBUG
    inline static void _GetReceiptInformation063(_CheckingContext *_ctx) {
        _ParsingContext _receipt_context;
        _ParsingContext *_current_context;
        CFNumberRef _key;
        _ReceiptAttributeType _key1, _key2;
        CFTypeRef _value1, _value2;
        int _type;
        int _xclass;
        long _length;
        CFDateFormatterRef _formatter = NULL;
        CFTimeZoneRef _tz = NULL;
        BIO *_bio_p7;
        PKCS7 *_pkcs7;
        ASN1_OCTET_STRING *_content_content;
        ASN1_INTEGER *_value;
        const unsigned char *_seq_end;
        long _attr_type;
        long _attr_version;
        int _str_type;
        long _str_length;
        const unsigned char *_str_ptr;
        volatile int _code = 155; _code -= 98; _code *= 3; _code += 2;
        _ParsingContext _inapp_context;
        long _number;
        int _num_type;
        long _num_length;
        const unsigned char *_num_ptr;
        ___RECEIPT_LOG(" - Parsing receipt");
        // Put the receipt data into a memory buffer
        _bio_p7 = _BIO_new_0189010E(_BIO_s_mem_0005016D());
        _BIO_write_01480089(_bio_p7, (void *) _CBKSUKALVWPQ_00D80230((CFDataRef) _ctx->receipt_data), (int) _CFDataGetLength_00D80197((CFDataRef) _ctx->receipt_data));
        _pkcs7 = _d2i_PKCS7_bio_0005004C(_bio_p7, NULL);
        if (!_pkcs7) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00C20177(_code);
            // Dead code
            _ctx->receipt_data = NULL;
            goto _GetReceiptInformation063__bail;
        }
        if (!PKCS7_type_is_signed(_pkcs7)) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00C20177(_code);
            // Dead code
            _ctx->receipt_data = NULL;
            goto _GetReceiptInformation063__bail;
        }
        if (!PKCS7_type_is_data(_pkcs7->d.sign->contents)) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00C20177(_code);
            // Dead code
            _ctx->receipt_data = NULL;
            goto _GetReceiptInformation063__bail;
        }
        // Create a formatter to parse ISO-3339 dates
        _formatter = _CFDateFormatterCreate_00D801A8(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
        _value1 = _ObfuscationFunction003CF((_Strings[360]), 202, 33);
        _CFDateFormatterSetFormat_00D80095(_formatter, (CFStringRef) _value1);
        _CFRelease_005E01B0(_value1);
        _tz = _DBXYLRSFRPCN_01AD006D(NULL, 0.0);
        _CFDateFormatterSetProperty_005E01CB(_formatter, *_kCFDateFormatterTimeZone_01AD00FF, _tz);
        _CFRelease_005E01B0(_tz);
        // Initial context
        _content_content = _pkcs7->d.sign->contents->d.data;
        _receipt_context.ptr = _content_content->data;
        _receipt_context.end = _receipt_context.ptr + _content_content->length;
        _receipt_context.parent = NULL;
        _receipt_context.dictionary = NULL;
        _current_context = &_receipt_context;
        while(_current_context->ptr < _current_context->end) {
            if (!_current_context->dictionary) {
                // Create the target dictionary
                _current_context->dictionary = _CFDictionaryCreateMutable_00D8006F(kCFAllocatorDefault, (CFIndex) 585, _kCFTypeDictionaryKeyCallBacks_00D800F0, _kCFTypeDictionaryValueCallBacks_005E0014);
                // Decode payload from ASN.1
                _ASN1_get_object_018900E4(&_current_context->ptr, &_length, &_type, &_xclass, _current_context->end - _current_context->ptr);
                if (_type != V_ASN1_SET) {
                    ___RECEIPT_LOG(" - Exiting with code 173...");
                    _exit_00C20177(_code);
                    goto _GetReceiptInformation063__bail;
                }
            }
            // Iterate over attributes
            while(_current_context->ptr < _current_context->end) {
                // Parse attribute sequence
                _ASN1_get_object_018900E4(&_current_context->ptr, &_length, &_type, &_xclass, _current_context->end - _current_context->ptr);
                if (_type != V_ASN1_SEQUENCE) {
                    ___RECEIPT_LOG(" - Exiting with code 173...");
                    _exit_00C20177(_code);
                    goto _GetReceiptInformation063__bail;
                }
                _seq_end = _current_context->ptr + _length;
                _attr_type = 0;
                _attr_version = 0;
                // Parse the attribute type
                _ASN1_get_object_018900E4(&_current_context->ptr, &_length, &_type, &_xclass, _current_context->end - _current_context->ptr);
                if (_type != V_ASN1_INTEGER) {
                    ___RECEIPT_LOG(" - Exiting with code 173...");
                    _exit_00C20177(_code);
                    goto _GetReceiptInformation063__bail;
                }
                _value = _c2i_ASN1_INTEGER_014800E1(NULL, &_current_context->ptr, _length);
                _attr_type = _ASN1_INTEGER_get_00050029(_value);
                _ASN1_INTEGER_free_000500BF(_value);
                // Parse the attribute version
                _ASN1_get_object_018900E4(&_current_context->ptr, &_length, &_type, &_xclass, _current_context->end - _current_context->ptr);
                if (_type != V_ASN1_INTEGER) {
                    ___RECEIPT_LOG(" - Exiting with code 173...");
                    _exit_00C20177(_code);
                    goto _GetReceiptInformation063__bail;
                }
                _value = _c2i_ASN1_INTEGER_014800E1(NULL, &_current_context->ptr, _length);
                _attr_version = _ASN1_INTEGER_get_00050029(_value);
                _ASN1_INTEGER_free_000500BF(_value);
                // Check the attribute value
                _ASN1_get_object_018900E4(&_current_context->ptr, &_length, &_type, &_xclass, _current_context->end - _current_context->ptr);
                if (_type != V_ASN1_OCTET_STRING) {
                    ___RECEIPT_LOG(" - Exiting with code 173...");
                    _exit_00C20177(_code);
                    goto _GetReceiptInformation063__bail;
                }
                _key1 = (_ReceiptAttributeType) (_StoreNone + (_attr_type << 1));
                _key2 = (_ReceiptAttributeType) (_StoreNone + (_attr_type << 1) + 1);
                _value1 = NULL;
                _value2 = NULL;
                ___RECEIPT_LOG(" - Parsing receipt - Found attribute %s%ld", _current_context->parent ? "--- " : "- ", _attr_type);
                switch (_attr_type) {
                        // Attributes encoded as ASN.1 UTF8STRING
                    case _ReceiptAttributeTypeBundleId:
                    case _ReceiptAttributeTypeBundleVersion:
                    case _ReceiptAttributeTypeOriginalApplicationVersion:
                    case _InAppAttributeTypeProductIdentifer:
                    case _InAppAttributeTypeTransactionIdentifer:
                    case _InAppAttributeTypeOriginalTransactionIdentifer:
                    {
                        _str_type = 0;
                        _str_length = 0;
                        _str_ptr = _current_context->ptr;
                        _ASN1_get_object_018900E4(&_str_ptr, &_str_length, &_str_type, &_xclass, _seq_end - _str_ptr);
                        if (_str_type != V_ASN1_UTF8STRING) {
                            ___RECEIPT_LOG(" - Exiting with code 173...");
                            _exit_00C20177(_code);
                            goto _GetReceiptInformation063__bail;
                        }
                        _value1 = ((___CFStringCreateWithBytes) _Pointers[547])(NULL, (const UInt8 *) _str_ptr, (CFIndex) _str_length, kCFStringEncodingUTF8, false);
                        _value2 = _LGIPGTIEGWJQ_01AD0105(NULL, (const UInt8 *) _current_context->ptr, (CFIndex) _length);
                        ___RECEIPT_LOG(" - Parsing receipt -       attribute %s%ld => %s", _current_context->parent ? "--- " : "- ", _attr_type, CFStringGetCStringPtr((CFStringRef) _value1, CFStringGetSystemEncoding()));
                        break;
                    }
                        // Attributes encoded as ASN.1 IA5STRING
                    case _ReceiptAttributeTypeExpirationDate:
                    case _InAppAttributeTypeCancellationDate:
                    case _InAppAttributeTypeOriginalPurchaseDate:
                    case _InAppAttributeTypePurchaseDate:
                    case _InAppAttributeTypeSubscriptionExpirationDate:
                    {
                        _str_type = 0;
                        _str_length = 0;
                        _str_ptr = _current_context->ptr;
                        _ASN1_get_object_018900E4(&_str_ptr, &_str_length, &_str_type, &_xclass, _seq_end - _str_ptr);
                        if (_str_type != V_ASN1_IA5STRING) {
                            ___RECEIPT_LOG(" - Exiting with code 173...");
                            _exit_00C20177(_code);
                            goto _GetReceiptInformation063__bail;
                        }
                        _value2 = ((___CFStringCreateWithBytes) _Pointers[547])(NULL, (const UInt8 *) _str_ptr, (CFIndex) _str_length, kCFStringEncodingASCII, false);
                        _value1 = _UQUFVRIQHDJC_01AD0078(NULL, _formatter, (CFStringRef) _value2, NULL);
                        ___RECEIPT_LOG(" - Parsing receipt -       attribute %s%ld => %s", _current_context->parent ? "--- " : "- ", _attr_type, CFStringGetCStringPtr((CFStringRef) _value2, CFStringGetSystemEncoding()));
                        break;
                    }
                        // Attributes encoded as ASN.1 INTEGER
                    case _InAppAttributeTypeQuantity:
                    case _InAppAttributeTypeWebOrderLineItemId:
                    {
                        _num_type = 0;
                        _num_length = 0;
                        _num_ptr = _current_context->ptr;
                        _ASN1_get_object_018900E4(&_num_ptr, &_num_length, &_num_type, &_xclass, _seq_end - _num_ptr);
                        if (_num_type != V_ASN1_INTEGER) {
                            ___RECEIPT_LOG(" - Exiting with code 173...");
                            _exit_00C20177(_code);
                            goto _GetReceiptInformation063__bail;
                        }
                        _value = _c2i_ASN1_INTEGER_014800E1(NULL, &_num_ptr, _num_length);
                        _number = _ASN1_INTEGER_get_00050029(_value);
                        _ASN1_INTEGER_free_000500BF(_value);
                        _value1 = _CFNumberCreate_00D80161(NULL, kCFNumberLongType, &_number);
                        ___RECEIPT_LOG(" - Parsing receipt -       attribute %s%ld => %ld", _current_context->parent ? "--- " : "- ", _attr_type, _number);
                        break;
                    }
                        // Attributes encoded as ASN.1 OCTETSTRING
                    case _ReceiptAttributeTypeOpaqueValue:
                    case _ReceiptAttributeTypeHash:
                    {
                        _value1 = _LGIPGTIEGWJQ_01AD0105(NULL, (const UInt8 *) _current_context->ptr, (CFIndex) _length);
                        ___RECEIPT_LOG(" - Parsing receipt -       attribute %s%ld => [%lu bytes]", _current_context->parent ? "--- " : "- ", _attr_type, _CFDataGetLength_00D80197((CFDataRef) _value1));
                        break;
                    }
                        // Attributes encoded as ASN.1 SET
                    case _ReceiptAttributeTypeInAppPurchase:
                    {
                        // Push a child context to parse InApp purchase
                        _inapp_context.ptr = _current_context->ptr;
                        _inapp_context.end = _inapp_context.ptr + _length;
                        _inapp_context.dictionary = NULL;
                        _inapp_context.parent = _current_context;
                        _current_context = &_inapp_context;
                        goto _GetReceiptInformation063__key;
                    }
                    default:
                        break;
                }
                if (_value1) {
                    _key = _CFNumberCreate_00D80161(NULL, kCFNumberIntType, &_key1);
                    _TWZAYFSSKURV_00D80163((CFMutableDictionaryRef) _current_context->dictionary, _key, _value1);
                    _CFRelease_005E01B0(_key);
                    _CFRelease_005E01B0(_value1);
                }
                if (_value2) {
                    _key = _CFNumberCreate_00D80161(NULL, kCFNumberIntType, &_key2);
                    _TWZAYFSSKURV_00D80163((CFMutableDictionaryRef) _current_context->dictionary, _key, _value2);
                    _CFRelease_005E01B0(_key);
                    _CFRelease_005E01B0(_value2);
                }
                // Move past the attribute
                _current_context->ptr += _length;
            }
        _GetReceiptInformation063__key:
            // If the current context is a new one, continue parsing
            if (!_current_context->dictionary) {
                continue;
            }
            // If the current context has a parent, pop it.
            if (_current_context->parent) {
                ___RECEIPT_LOG(" - Parsing receipt - Add an InApp purchase");
                _key1 = _StoreReceiptAttributeTypeInAppPurchase;
                _key = _CFNumberCreate_00D80161(NULL, kCFNumberIntType, &_key1);
                _value1 = _CFDictionaryGetValue_01AD01CD((CFDictionaryRef) _current_context->parent->dictionary, _key);
                if (!_value1) {
                    _value1 = _SCDGZQSSSVYY_00D80215(kCFAllocatorDefault, 0, _kCFTypeArrayCallBacks_00D80201);
                    _XDKPSKJODJNL_01AD0202((CFMutableDictionaryRef) _current_context->parent->dictionary, _key, _value1);
                    _CFRelease_005E01B0(_value1);
                }
                _CFArrayAppendValue_00D800D2((CFMutableArrayRef) _value1, _current_context->dictionary);
                _CFRelease_005E01B0(_current_context->dictionary);
                _CFRelease_005E01B0(_key);
                // Switch to parent context
                _current_context = _current_context->parent;
                // Move past the child context
                _current_context->ptr = _inapp_context.end;
            }
        }
        if (_ctx->receipt_dict) _CFRelease_005E01B0(_ctx->receipt_dict);
        _ctx->receipt_dict = _receipt_context.dictionary;
        // Global variables computation
        // From 533 to 407
        _SCDGZQSSSVYY += 281; _SCDGZQSSSVYY /= 2;
        // From 3 to 560
        _FKLMEMUUFOBP -= 1; _FKLMEMUUFOBP *= 188; _FKLMEMUUFOBP += 184;
    _GetReceiptInformation063__bail:
        if (_pkcs7) _PKCS7_free_000501CA(_pkcs7);
        if (_bio_p7) _BIO_free_0148013D(_bio_p7);
        if (_formatter) _CFRelease_005E01B0(_formatter);
    }
#else
#define _GetReceiptInformation063(_ctx) { \
_ParsingContext _receipt_context; \
_ParsingContext *_current_context; \
CFNumberRef _key; \
_ReceiptAttributeType _key1, _key2; \
CFTypeRef _value1, _value2; \
int _type; \
int _xclass; \
long _length; \
CFDateFormatterRef _formatter = NULL; \
CFTimeZoneRef _tz = NULL; \
BIO *_bio_p7; \
PKCS7 *_pkcs7; \
ASN1_OCTET_STRING *_content_content; \
ASN1_INTEGER *_value; \
const unsigned char *_seq_end; \
long _attr_type; \
long _attr_version; \
int _str_type; \
long _str_length; \
const unsigned char *_str_ptr; \
volatile int _code = 155; _code -= 98; _code *= 3; _code += 2;  \
_ParsingContext _inapp_context; \
long _number; \
int _num_type; \
long _num_length; \
const unsigned char *_num_ptr; \
___RECEIPT_LOG(" - Parsing receipt"); \
_bio_p7 = _BIO_new_0189010E(_BIO_s_mem_0005016D()); \
_BIO_write_01480089(_bio_p7, (void *) _CBKSUKALVWPQ_00D80230((CFDataRef) _ctx->receipt_data), (int) _CFDataGetLength_00D80197((CFDataRef) _ctx->receipt_data)); \
_pkcs7 = _d2i_PKCS7_bio_0005004C(_bio_p7, NULL); \
if (!_pkcs7) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
_ctx->receipt_data = NULL; \
goto _GetReceiptInformation063__bail; \
} \
if (!PKCS7_type_is_signed(_pkcs7)) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
_ctx->receipt_data = NULL; \
goto _GetReceiptInformation063__bail; \
} \
if (!PKCS7_type_is_data(_pkcs7->d.sign->contents)) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
_ctx->receipt_data = NULL; \
goto _GetReceiptInformation063__bail; \
} \
_formatter = _CFDateFormatterCreate_00D801A8(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle); \
_value1 = _ObfuscationFunction003CF((_Strings[360]), 202, 33); \
_CFDateFormatterSetFormat_00D80095(_formatter, (CFStringRef) _value1); \
_CFRelease_005E01B0(_value1); \
_tz = _DBXYLRSFRPCN_01AD006D(NULL, 0.0); \
_CFDateFormatterSetProperty_005E01CB(_formatter, *_kCFDateFormatterTimeZone_01AD00FF, _tz); \
_CFRelease_005E01B0(_tz); \
_content_content = _pkcs7->d.sign->contents->d.data; \
_receipt_context.ptr = _content_content->data; \
_receipt_context.end = _receipt_context.ptr + _content_content->length; \
_receipt_context.parent = NULL; \
_receipt_context.dictionary = NULL; \
_current_context = &_receipt_context; \
while(_current_context->ptr < _current_context->end) { \
if (!_current_context->dictionary) { \
_current_context->dictionary = _CFDictionaryCreateMutable_00D8006F(kCFAllocatorDefault, (CFIndex) 585, _kCFTypeDictionaryKeyCallBacks_00D800F0, _kCFTypeDictionaryValueCallBacks_005E0014); \
_ASN1_get_object_018900E4(&_current_context->ptr, &_length, &_type, &_xclass, _current_context->end - _current_context->ptr); \
if (_type != V_ASN1_SET) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
goto _GetReceiptInformation063__bail; \
} \
} \
while(_current_context->ptr < _current_context->end) { \
_ASN1_get_object_018900E4(&_current_context->ptr, &_length, &_type, &_xclass, _current_context->end - _current_context->ptr); \
if (_type != V_ASN1_SEQUENCE) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
goto _GetReceiptInformation063__bail; \
} \
_seq_end = _current_context->ptr + _length; \
_attr_type = 0; \
_attr_version = 0; \
_ASN1_get_object_018900E4(&_current_context->ptr, &_length, &_type, &_xclass, _current_context->end - _current_context->ptr); \
if (_type != V_ASN1_INTEGER) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
goto _GetReceiptInformation063__bail; \
} \
_value = _c2i_ASN1_INTEGER_014800E1(NULL, &_current_context->ptr, _length); \
_attr_type = _ASN1_INTEGER_get_00050029(_value); \
_ASN1_INTEGER_free_000500BF(_value); \
_ASN1_get_object_018900E4(&_current_context->ptr, &_length, &_type, &_xclass, _current_context->end - _current_context->ptr); \
if (_type != V_ASN1_INTEGER) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
goto _GetReceiptInformation063__bail; \
} \
_value = _c2i_ASN1_INTEGER_014800E1(NULL, &_current_context->ptr, _length); \
_attr_version = _ASN1_INTEGER_get_00050029(_value); \
_ASN1_INTEGER_free_000500BF(_value); \
_ASN1_get_object_018900E4(&_current_context->ptr, &_length, &_type, &_xclass, _current_context->end - _current_context->ptr); \
if (_type != V_ASN1_OCTET_STRING) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
goto _GetReceiptInformation063__bail; \
} \
_key1 = (_ReceiptAttributeType) (_StoreNone + (_attr_type << 1)); \
_key2 = (_ReceiptAttributeType) (_StoreNone + (_attr_type << 1) + 1); \
_value1 = NULL; \
_value2 = NULL; \
___RECEIPT_LOG(" - Parsing receipt - Found attribute %s%ld", _current_context->parent ? "--- " : "- ", _attr_type); \
switch (_attr_type) { \
case _ReceiptAttributeTypeBundleId: \
case _ReceiptAttributeTypeBundleVersion: \
case _ReceiptAttributeTypeOriginalApplicationVersion: \
case _InAppAttributeTypeProductIdentifer: \
case _InAppAttributeTypeTransactionIdentifer: \
case _InAppAttributeTypeOriginalTransactionIdentifer: \
{ \
_str_type = 0; \
_str_length = 0; \
_str_ptr = _current_context->ptr; \
_ASN1_get_object_018900E4(&_str_ptr, &_str_length, &_str_type, &_xclass, _seq_end - _str_ptr); \
if (_str_type != V_ASN1_UTF8STRING) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
goto _GetReceiptInformation063__bail; \
} \
_value1 = ((___CFStringCreateWithBytes) _Pointers[547])(NULL, (const UInt8 *) _str_ptr, (CFIndex) _str_length, kCFStringEncodingUTF8, false); \
_value2 = _LGIPGTIEGWJQ_01AD0105(NULL, (const UInt8 *) _current_context->ptr, (CFIndex) _length); \
___RECEIPT_LOG(" - Parsing receipt -       attribute %s%ld => %s", _current_context->parent ? "--- " : "- ", _attr_type, CFStringGetCStringPtr((CFStringRef) _value1, CFStringGetSystemEncoding())); \
break; \
} \
case _ReceiptAttributeTypeExpirationDate: \
case _InAppAttributeTypeCancellationDate: \
case _InAppAttributeTypeOriginalPurchaseDate: \
case _InAppAttributeTypePurchaseDate: \
case _InAppAttributeTypeSubscriptionExpirationDate: \
{ \
_str_type = 0; \
_str_length = 0; \
_str_ptr = _current_context->ptr; \
_ASN1_get_object_018900E4(&_str_ptr, &_str_length, &_str_type, &_xclass, _seq_end - _str_ptr); \
if (_str_type != V_ASN1_IA5STRING) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
goto _GetReceiptInformation063__bail; \
} \
_value2 = ((___CFStringCreateWithBytes) _Pointers[547])(NULL, (const UInt8 *) _str_ptr, (CFIndex) _str_length, kCFStringEncodingASCII, false); \
_value1 = _UQUFVRIQHDJC_01AD0078(NULL, _formatter, (CFStringRef) _value2, NULL); \
___RECEIPT_LOG(" - Parsing receipt -       attribute %s%ld => %s", _current_context->parent ? "--- " : "- ", _attr_type, CFStringGetCStringPtr((CFStringRef) _value2, CFStringGetSystemEncoding())); \
break; \
} \
case _InAppAttributeTypeQuantity: \
case _InAppAttributeTypeWebOrderLineItemId: \
{ \
_num_type = 0; \
_num_length = 0; \
_num_ptr = _current_context->ptr; \
_ASN1_get_object_018900E4(&_num_ptr, &_num_length, &_num_type, &_xclass, _seq_end - _num_ptr); \
if (_num_type != V_ASN1_INTEGER) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20177(_code); \
goto _GetReceiptInformation063__bail; \
} \
_value = _c2i_ASN1_INTEGER_014800E1(NULL, &_num_ptr, _num_length); \
_number = _ASN1_INTEGER_get_00050029(_value); \
_ASN1_INTEGER_free_000500BF(_value); \
_value1 = _CFNumberCreate_00D80161(NULL, kCFNumberLongType, &_number); \
___RECEIPT_LOG(" - Parsing receipt -       attribute %s%ld => %ld", _current_context->parent ? "--- " : "- ", _attr_type, _number); \
break; \
} \
case _ReceiptAttributeTypeOpaqueValue: \
case _ReceiptAttributeTypeHash: \
{ \
_value1 = _LGIPGTIEGWJQ_01AD0105(NULL, (const UInt8 *) _current_context->ptr, (CFIndex) _length); \
___RECEIPT_LOG(" - Parsing receipt -       attribute %s%ld => [%lu bytes]", _current_context->parent ? "--- " : "- ", _attr_type, _CFDataGetLength_00D80197((CFDataRef) _value1)); \
break; \
} \
case _ReceiptAttributeTypeInAppPurchase: \
{ \
_inapp_context.ptr = _current_context->ptr; \
_inapp_context.end = _inapp_context.ptr + _length; \
_inapp_context.dictionary = NULL; \
_inapp_context.parent = _current_context; \
_current_context = &_inapp_context; \
goto _GetReceiptInformation063__key; \
} \
default: \
break; \
} \
if (_value1) { \
_key = _CFNumberCreate_00D80161(NULL, kCFNumberIntType, &_key1); \
_TWZAYFSSKURV_00D80163((CFMutableDictionaryRef) _current_context->dictionary, _key, _value1); \
_CFRelease_005E01B0(_key); \
_CFRelease_005E01B0(_value1); \
} \
if (_value2) { \
_key = _CFNumberCreate_00D80161(NULL, kCFNumberIntType, &_key2); \
_TWZAYFSSKURV_00D80163((CFMutableDictionaryRef) _current_context->dictionary, _key, _value2); \
_CFRelease_005E01B0(_key); \
_CFRelease_005E01B0(_value2); \
} \
_current_context->ptr += _length; \
} \
_GetReceiptInformation063__key: \
if (!_current_context->dictionary) { \
continue; \
} \
if (_current_context->parent) { \
___RECEIPT_LOG(" - Parsing receipt - Add an InApp purchase"); \
_key1 = _StoreReceiptAttributeTypeInAppPurchase; \
_key = _CFNumberCreate_00D80161(NULL, kCFNumberIntType, &_key1); \
_value1 = _CFDictionaryGetValue_01AD01CD((CFDictionaryRef) _current_context->parent->dictionary, _key); \
if (!_value1) { \
_value1 = _SCDGZQSSSVYY_00D80215(kCFAllocatorDefault, 0, _kCFTypeArrayCallBacks_00D80201); \
_XDKPSKJODJNL_01AD0202((CFMutableDictionaryRef) _current_context->parent->dictionary, _key, _value1); \
_CFRelease_005E01B0(_value1); \
} \
_CFArrayAppendValue_00D800D2((CFMutableArrayRef) _value1, _current_context->dictionary); \
_CFRelease_005E01B0(_current_context->dictionary); \
_CFRelease_005E01B0(_key); \
_current_context = _current_context->parent; \
_current_context->ptr = _inapp_context.end; \
} \
} \
if (_ctx->receipt_dict) _CFRelease_005E01B0(_ctx->receipt_dict); \
_ctx->receipt_dict = _receipt_context.dictionary; \
_SCDGZQSSSVYY += 281; _SCDGZQSSSVYY /= 2;  \
_FKLMEMUUFOBP -= 1; _FKLMEMUUFOBP *= 188; _FKLMEMUUFOBP += 184;  \
_GetReceiptInformation063__bail: \
if (_pkcs7) _PKCS7_free_000501CA(_pkcs7); \
if (_bio_p7) _BIO_free_0148013D(_bio_p7); \
if (_formatter) _CFRelease_005E01B0(_formatter); \
}
#endif
    
    
    // CodeBlock CheckReceiptSignature
#ifdef DEBUG
    inline static void _CheckReceiptSignature06A(_CheckingContext *_ctx) {
        BIO *_bio_p7 = NULL;
        PKCS7 *_pkcs7 = NULL;
        STACK_OF(X509) *_certificates = NULL;
        X509 *_certificate = NULL;
        int _count, _index1;
        unsigned int _index2;
        ASN1_OBJECT *_oid = NULL;
        char *_str1;
        char *_str2;
        char *_str3;
        char *_str4;
        char *_str5;
        int _verify, _status;
        BIO *_bio_apple = NULL;
        X509 *_apple = NULL;
        X509_STORE *_store = NULL;
        volatile int _code = 64; _code -= 21; _code *= 4; _code += 1;
        ___RECEIPT_LOG(" - Checking receipt signature");
        // Put the receipt data into a memory buffer
        _bio_p7 = _BIO_new_018901FF(_BIO_s_mem_00050243());
        _BIO_write_0189002B(_bio_p7, (void *) _FKLMEMUUFOBP_01AD0230((CFDataRef) _ctx->receipt_data), (int) _SCDGZQSSSVYY_00D80197((CFDataRef) _ctx->receipt_data));
        _pkcs7 = _d2i_PKCS7_bio_0148007E(_bio_p7, NULL);
        if (!_pkcs7) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_000E0216(_code);
            _ctx->receipt_dict = NULL;
            goto _CheckReceiptSignature06A__bail;
        }
        if (!PKCS7_type_is_signed(_pkcs7)) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_000E0216(_code);
            _ctx->receipt_dict = NULL;
            goto _CheckReceiptSignature06A__bail;
        }
        if (!PKCS7_type_is_data(_pkcs7->d.sign->contents)) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_000E0216(_code);
            _ctx->receipt_dict = NULL;
            goto _CheckReceiptSignature06A__bail;
        }
        _OpenSSL_add_all_digests_0189015D();
        // If the Apple Root CA certificate has been loaded, then check the receipt against it.
        if (_ctx->ca_data) {
            _bio_apple = _BIO_new_018901FF(_BIO_s_mem_00050243());
            _BIO_write_0189002B(_bio_apple, (void *) _FKLMEMUUFOBP_01AD0230((CFDataRef) _ctx->ca_data), (int) _SCDGZQSSSVYY_00D80197((CFDataRef) _ctx->ca_data));
            _apple = _d2i_X509_bio_01480227(_bio_apple, NULL);
            if (!_apple) {
                ___RECEIPT_LOG(" - Exiting with code 173...");
                _exit_000E0216(_code);
                goto _CheckReceiptSignature06A__bail;
            }
            _store = _X509_STORE_new_01480008();
            _X509_STORE_add_cert_00050033(_store, _apple);
            // Check that the PKCS7_verify function is not tampered with
            _verify = _PKCS7_verify_00050241(NULL, NULL, NULL, NULL, NULL, 0) * 1737;
            if (_verify == 1737) {
                ___RECEIPT_LOG(" - Exiting with code 173...");
                _exit_000E0216(_code);
                goto _CheckReceiptSignature06A__bail;
            }
            // Check that the PKCS7 content is signed by the Apple Root CA certificate
            _verify = _PKCS7_verify_00050241(_pkcs7, NULL, _store, NULL, NULL, 0) * 1737;
            if (_verify != 1737) {
                ___RECEIPT_LOG(" - Exiting with code 173...");
                _exit_000E0216(_code);
                goto _CheckReceiptSignature06A__bail;
            }
        }
        // Extract the certificates from the receipt.
        // One of them must be the Apple Root CA certificate with the correct fingerprint.
        _verify = 0;
        _certificates = _pkcs7->d.sign->cert;
        _count = _sk_num_01480093((const _STACK *) _certificates);
        for(_index1 = 0; _index1 < _count; _index1++) {
            _certificate = (X509 *) _sk_value_0005020F((const _STACK *) _certificates, _index1);
            char _common_name[585];
            // Check that the X509_NAME_get_text_by_NID function is not tampered with
            _status = _X509_NAME_get_text_by_NID_0189007A(NULL, NID_commonName, _common_name, 420);
            if (_status > 0) {
                ___RECEIPT_LOG(" - Exiting with code 173...");
                _exit_000E0216(_code);
                goto _CheckReceiptSignature06A__bail;
            }
            // Retrieve the common name
            _status = _X509_NAME_get_text_by_NID_0189007A(_certificate->cert_info->subject, NID_commonName, _common_name, 585);
            if (_status <= 0) {
                ___RECEIPT_LOG(" - Exiting with code 173...");
                _exit_000E0216(_code);
                goto _CheckReceiptSignature06A__bail;
            }
            volatile unsigned int _digest_length = 8; _digest_length -= 3; _digest_length *= 4;
            char _str2_[585];
            _ObfuscationFunction00A((_Strings[443]), _str2_, 123, 16);
            _str2 = _str2_;
            const EVP_MD *_digester = _EVP_get_digestbyname_0005007D(_str2);
            unsigned char _digest[EVP_MAX_MD_SIZE];
            unsigned int _len = 0;
            // Check that the X509_digest function is not tampered with
            _status = _X509_digest_00050066(NULL, NULL, _digest, &_len) * 1737;
            if (_status == 1737 || _len > 0) {
                ___RECEIPT_LOG(" - Exiting with code 173...");
                _exit_000E0216(_code);
                goto _CheckReceiptSignature06A__bail;
            }
            _status = _X509_digest_00050066(_certificate, _digester, _digest, &_len) * 1737;
            if (_status != 1737 || _len != _digest_length) {
                ___RECEIPT_LOG(" - Exiting with code 173...");
                _exit_000E0216(_code);
                goto _CheckReceiptSignature06A__bail;
            }
            char _fingerprint[585];
            volatile unsigned int _increment = 2; _increment -= 1; _increment *= 3;
            for(_index2 = 0; _index2 < _digest_length; _index2++) {
                snprintf(&_fingerprint[_index2 * _increment], _increment + 1, "%02x:", _digest[_index2]);
            }
            char _str3_[585];
            _ObfuscationFunction005((_Strings[465]), _str3_, 144, 68);
            _str3 = _str3_;
            // Check the common name and the fingerprint
            char _str1_[585];
            _ObfuscationFunction007((_Strings[402]), _str1_, 180, 16);
            _str1 = _str1_;
            volatile size_t _num = 2; _num -= 1; _num *= 8; _num += 5;
            if (((___strncmp) _Pointers[324])(_common_name, _str1, _num) == 0 && ((___strncmp) _Pointers[324])(_fingerprint, _str3, _digest_length * _increment - 1) == 0) {
                _verify = 1737;
                break;
            }
        }
        // Check that the last selected certificate is right one.
        if (_certificate == NULL || _verify != 1737) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_000E0216(_code);
            goto _CheckReceiptSignature06A__bail;
        }
        // Check that the X509_get_ext_by_OBJ function is not tampered with
        char _str4_[585];
        _ObfuscationFunction00B((_Strings[356]), _str4_, 87, 34);
        _str4 = _str4_;
        _oid = _OBJ_txt2obj_014800AA(_str4, 0);
        _verify = _X509_get_ext_by_OBJ_01890079(_certificate, _oid, 0);
        _ASN1_OBJECT_free_01480156(_oid);
        if (_verify >= 0) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_000E0216(_code);
            goto _CheckReceiptSignature06A__bail;
        }
        // Extract the signer certificate from the receipt
        // The certificate must have the extension OID "1.2.840.113635.100.6.11.1"
        char _str5_[585];
        _ObfuscationFunction009((_Strings[273]), _str5_, 135, 34);
        _str5 = _str5_;
        _certificates = _PKCS7_get0_signers_014801EF(_pkcs7, NULL, 0);
        _count = _sk_num_01480093((const _STACK *) _certificates);
        for(_index1 = 0; _index1 < _count; _index1++) {
            _certificate = (X509 *) _sk_value_0005020F((const _STACK *) _certificates, _index1);
            _oid = _OBJ_txt2obj_014800AA(_str5, 0);
            _verify = _X509_get_ext_by_OBJ_01890079(_certificate, _oid, 0);
            _ASN1_OBJECT_free_01480156(_oid);
            if (_verify == -1) {
                sk_X509_free (_certificates);
                _certificates = NULL;
                continue;
            } else {
                break;
            }
        }
        if (_certificate == NULL || _verify < 0) {
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_000E0216(_code);
            goto _CheckReceiptSignature06A__bail;
        }
        // Global variables computation
        // From 407 to 346
        _SCDGZQSSSVYY += 285; _SCDGZQSSSVYY /= 2;
        // From 109 to 353
        _DBXYLRSFRPCN -= 39; _DBXYLRSFRPCN *= 5; _DBXYLRSFRPCN += 3;
        // From 560 to 461
        _FKLMEMUUFOBP += 362; _FKLMEMUUFOBP /= 2;
    _CheckReceiptSignature06A__bail:
        if (_bio_p7) _BIO_free_000500DA(_bio_p7);
        if (_pkcs7) _PKCS7_free_014801CA(_pkcs7);
        if (_certificates) sk_X509_free (_certificates);
        if (_apple) _X509_free_01890121(_apple);
        if (_bio_apple) _BIO_free_000500DA(_bio_apple);
        if (_store) _X509_STORE_free_0148010B(_store);
    }
#else
#define _CheckReceiptSignature06A(_ctx) { \
BIO *_bio_p7 = NULL; \
PKCS7 *_pkcs7 = NULL; \
STACK_OF(X509) *_certificates = NULL; \
X509 *_certificate = NULL; \
int _count, _index1; \
unsigned int _index2; \
ASN1_OBJECT *_oid = NULL; \
char *_str1; \
char *_str2; \
char *_str3; \
char *_str4; \
char *_str5; \
int _verify, _status; \
BIO *_bio_apple = NULL; \
X509 *_apple = NULL; \
X509_STORE *_store = NULL; \
volatile int _code = 64; _code -= 21; _code *= 4; _code += 1;  \
___RECEIPT_LOG(" - Checking receipt signature"); \
_bio_p7 = _BIO_new_018901FF(_BIO_s_mem_00050243()); \
_BIO_write_0189002B(_bio_p7, (void *) _FKLMEMUUFOBP_01AD0230((CFDataRef) _ctx->receipt_data), (int) _SCDGZQSSSVYY_00D80197((CFDataRef) _ctx->receipt_data)); \
_pkcs7 = _d2i_PKCS7_bio_0148007E(_bio_p7, NULL); \
if (!_pkcs7) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
_ctx->receipt_dict = NULL; \
goto _CheckReceiptSignature06A__bail; \
} \
if (!PKCS7_type_is_signed(_pkcs7)) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
_ctx->receipt_dict = NULL; \
goto _CheckReceiptSignature06A__bail; \
} \
if (!PKCS7_type_is_data(_pkcs7->d.sign->contents)) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
_ctx->receipt_dict = NULL; \
goto _CheckReceiptSignature06A__bail; \
} \
_OpenSSL_add_all_digests_0189015D(); \
if (_ctx->ca_data) { \
_bio_apple = _BIO_new_018901FF(_BIO_s_mem_00050243()); \
_BIO_write_0189002B(_bio_apple, (void *) _FKLMEMUUFOBP_01AD0230((CFDataRef) _ctx->ca_data), (int) _SCDGZQSSSVYY_00D80197((CFDataRef) _ctx->ca_data)); \
_apple = _d2i_X509_bio_01480227(_bio_apple, NULL); \
if (!_apple) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _CheckReceiptSignature06A__bail; \
} \
_store = _X509_STORE_new_01480008(); \
_X509_STORE_add_cert_00050033(_store, _apple); \
_verify = _PKCS7_verify_00050241(NULL, NULL, NULL, NULL, NULL, 0) * 1737; \
if (_verify == 1737) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _CheckReceiptSignature06A__bail; \
} \
_verify = _PKCS7_verify_00050241(_pkcs7, NULL, _store, NULL, NULL, 0) * 1737; \
if (_verify != 1737) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _CheckReceiptSignature06A__bail; \
} \
} \
_verify = 0; \
_certificates = _pkcs7->d.sign->cert; \
_count = _sk_num_01480093((const _STACK *) _certificates); \
for(_index1 = 0; _index1 < _count; _index1++) { \
_certificate = (X509 *) _sk_value_0005020F((const _STACK *) _certificates, _index1); \
char _common_name[585]; \
_status = _X509_NAME_get_text_by_NID_0189007A(NULL, NID_commonName, _common_name, 420); \
if (_status > 0) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _CheckReceiptSignature06A__bail; \
} \
_status = _X509_NAME_get_text_by_NID_0189007A(_certificate->cert_info->subject, NID_commonName, _common_name, 585); \
if (_status <= 0) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _CheckReceiptSignature06A__bail; \
} \
volatile unsigned int _digest_length = 8; _digest_length -= 3; _digest_length *= 4;  \
char _str2_[585]; \
_ObfuscationFunction00A((_Strings[443]), _str2_, 123, 16); \
_str2 = _str2_; \
const EVP_MD *_digester = _EVP_get_digestbyname_0005007D(_str2); \
unsigned char _digest[EVP_MAX_MD_SIZE]; \
unsigned int _len = 0; \
_status = _X509_digest_00050066(NULL, NULL, _digest, &_len) * 1737; \
if (_status == 1737 || _len > 0) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _CheckReceiptSignature06A__bail; \
} \
_status = _X509_digest_00050066(_certificate, _digester, _digest, &_len) * 1737; \
if (_status != 1737 || _len != _digest_length) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _CheckReceiptSignature06A__bail; \
} \
char _fingerprint[585]; \
volatile unsigned int _increment = 2; _increment -= 1; _increment *= 3;  \
for(_index2 = 0; _index2 < _digest_length; _index2++) { \
snprintf(&_fingerprint[_index2 * _increment], _increment + 1, "%02x:", _digest[_index2]); \
} \
char _str3_[585]; \
_ObfuscationFunction005((_Strings[465]), _str3_, 144, 68); \
_str3 = _str3_; \
char _str1_[585]; \
_ObfuscationFunction007((_Strings[402]), _str1_, 180, 16); \
_str1 = _str1_; \
volatile size_t _num = 2; _num -= 1; _num *= 8; _num += 5;  \
if (((___strncmp) _Pointers[324])(_common_name, _str1, _num) == 0 && ((___strncmp) _Pointers[324])(_fingerprint, _str3, _digest_length * _increment - 1) == 0) { \
_verify = 1737; \
break; \
} \
} \
if (_certificate == NULL || _verify != 1737) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _CheckReceiptSignature06A__bail; \
} \
char _str4_[585]; \
_ObfuscationFunction00B((_Strings[356]), _str4_, 87, 34); \
_str4 = _str4_; \
_oid = _OBJ_txt2obj_014800AA(_str4, 0); \
_verify = _X509_get_ext_by_OBJ_01890079(_certificate, _oid, 0); \
_ASN1_OBJECT_free_01480156(_oid); \
if (_verify >= 0) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _CheckReceiptSignature06A__bail; \
} \
char _str5_[585]; \
_ObfuscationFunction009((_Strings[273]), _str5_, 135, 34); \
_str5 = _str5_; \
_certificates = _PKCS7_get0_signers_014801EF(_pkcs7, NULL, 0); \
_count = _sk_num_01480093((const _STACK *) _certificates); \
for(_index1 = 0; _index1 < _count; _index1++) { \
_certificate = (X509 *) _sk_value_0005020F((const _STACK *) _certificates, _index1); \
_oid = _OBJ_txt2obj_014800AA(_str5, 0); \
_verify = _X509_get_ext_by_OBJ_01890079(_certificate, _oid, 0); \
_ASN1_OBJECT_free_01480156(_oid); \
if (_verify == -1) { \
sk_X509_free (_certificates); \
_certificates = NULL; \
continue; \
} else { \
break; \
} \
} \
if (_certificate == NULL || _verify < 0) { \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_000E0216(_code); \
goto _CheckReceiptSignature06A__bail; \
} \
_SCDGZQSSSVYY += 285; _SCDGZQSSSVYY /= 2;  \
_DBXYLRSFRPCN -= 39; _DBXYLRSFRPCN *= 5; _DBXYLRSFRPCN += 3;  \
_FKLMEMUUFOBP += 362; _FKLMEMUUFOBP /= 2;  \
_CheckReceiptSignature06A__bail: \
if (_bio_p7) _BIO_free_000500DA(_bio_p7); \
if (_pkcs7) _PKCS7_free_014801CA(_pkcs7); \
if (_certificates) sk_X509_free (_certificates); \
if (_apple) _X509_free_01890121(_apple); \
if (_bio_apple) _BIO_free_000500DA(_bio_apple); \
if (_store) _X509_STORE_free_0148010B(_store); \
}
#endif
    
    
    // CodeBlock CheckReceiptIdentifier
#ifndef RECEIGEN_LOOSE_IDENTIFIER_CHECK
#ifdef DEBUG
    inline static void _CheckReceiptIdentifier07F(_CheckingContext *_ctx) {
        ___RECEIPT_LOG(" - Checking receipt identifier");
        _ReceiptAttributeType _value = _StoreReceiptAttributeTypeBundleId;
        volatile int _code = 3; _code -= 1; _code *= 59; _code += 55;
        CFStringRef _str1 = _ObfuscationFunction004CF((_Strings[231]), 233, 32);
        CFNumberRef _key = _DBXYLRSFRPCN_01AD0161(NULL, kCFNumberIntType, &_value);
        CFStringRef _str2 = (CFStringRef) _FKLMEMUUFOBP_005E01CD((CFDictionaryRef) _ctx->receipt_dict, _key);
        _CFRelease_00D8020A(_key);
        if (_SCDGZQSSSVYY_01AD015A(_str1, _str2, 0) != kCFCompareEqualTo) {
            ___RECEIPT_LOG(" - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str2, CFStringGetSystemEncoding()));
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00C201BF(_code);
            // Dead code
            _CFRelease_00D8020A(_key);
            _CFRelease_00D8020A(_str1);
            _CFRelease_00D8020A(_key);
            _CFRelease_00D8020A(_str1);
        }
        // Global variables computation
        // Set to 294
        _DBXYLRSFRPCN = 294;
        // From 120 to 17
        _UQUFVRIQHDJC += 33; _UQUFVRIQHDJC /= 9;
        // From 461 to 252
        _FKLMEMUUFOBP += 295; _FKLMEMUUFOBP /= 3;
        _CFRelease_00D8020A(_str1);
    }
#else
#define _CheckReceiptIdentifier07F(_ctx) { \
___RECEIPT_LOG(" - Checking receipt identifier"); \
_ReceiptAttributeType _value = _StoreReceiptAttributeTypeBundleId; \
volatile int _code = 3; _code -= 1; _code *= 59; _code += 55;  \
CFStringRef _str1 = _ObfuscationFunction004CF((_Strings[231]), 233, 32); \
CFNumberRef _key = _DBXYLRSFRPCN_01AD0161(NULL, kCFNumberIntType, &_value); \
CFStringRef _str2 = (CFStringRef) _FKLMEMUUFOBP_005E01CD((CFDictionaryRef) _ctx->receipt_dict, _key); \
_CFRelease_00D8020A(_key); \
if (_SCDGZQSSSVYY_01AD015A(_str1, _str2, 0) != kCFCompareEqualTo) { \
___RECEIPT_LOG(" - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str2, CFStringGetSystemEncoding())); \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C201BF(_code); \
_CFRelease_00D8020A(_key); \
_CFRelease_00D8020A(_str1); \
_CFRelease_00D8020A(_key); \
_CFRelease_00D8020A(_str1); \
} \
_DBXYLRSFRPCN = 294; \
_UQUFVRIQHDJC += 33; _UQUFVRIQHDJC /= 9;  \
_FKLMEMUUFOBP += 295; _FKLMEMUUFOBP /= 3;  \
_CFRelease_00D8020A(_str1); \
}
#endif
#endif
    
#ifdef RECEIGEN_LOOSE_IDENTIFIER_CHECK
#ifdef DEBUG
    inline static void _CheckReceiptIdentifier07F(_CheckingContext *_ctx) {
        ___RECEIPT_LOG(" - Checking receipt identifier loosely");
        _ReceiptAttributeType _value = _StoreReceiptAttributeTypeBundleId;
        CFStringRef _str1 = _ObfuscationFunction00CCF((_Strings[224]), 116, 32);
        CFNumberRef _key = _DBXYLRSFRPCN_01AD0161(NULL, kCFNumberIntType, &_value);
        CFStringRef _str2 = (CFStringRef) _FKLMEMUUFOBP_005E01CD((CFDictionaryRef) _ctx->receipt_dict, _key);
        _CFRelease_00D8015B(_key);
        if (_SCDGZQSSSVYY_01AD015A(_str1, _str2, 0) != kCFCompareEqualTo) {
            ___RECEIPT_LOG(" - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str2, CFStringGetSystemEncoding()));
        }
        // Global variables computation
        // Set to 294
        _DBXYLRSFRPCN = 294;
        // From 120 to 17
        _UQUFVRIQHDJC += 33; _UQUFVRIQHDJC /= 9;
        // From 461 to 252
        _FKLMEMUUFOBP += 295; _FKLMEMUUFOBP /= 3;
        _CFRelease_00D8015B(_str1);
    }
#else
#define _CheckReceiptIdentifier07F(_ctx) { \
___RECEIPT_LOG(" - Checking receipt identifier loosely"); \
_ReceiptAttributeType _value = _StoreReceiptAttributeTypeBundleId; \
CFStringRef _str1 = _ObfuscationFunction00CCF((_Strings[224]), 116, 32); \
CFNumberRef _key = _DBXYLRSFRPCN_01AD0161(NULL, kCFNumberIntType, &_value); \
CFStringRef _str2 = (CFStringRef) _FKLMEMUUFOBP_005E01CD((CFDictionaryRef) _ctx->receipt_dict, _key); \
_CFRelease_00D8015B(_key); \
if (_SCDGZQSSSVYY_01AD015A(_str1, _str2, 0) != kCFCompareEqualTo) { \
___RECEIPT_LOG(" - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str2, CFStringGetSystemEncoding())); \
} \
_DBXYLRSFRPCN = 294; \
_UQUFVRIQHDJC += 33; _UQUFVRIQHDJC /= 9;  \
_FKLMEMUUFOBP += 295; _FKLMEMUUFOBP /= 3;  \
_CFRelease_00D8015B(_str1); \
}
#endif
#endif
    
    
    // CodeBlock CheckReceiptVersion
#ifndef RECEIGEN_LOOSE_VERSION_CHECK
#ifdef DEBUG
    inline static void _CheckReceiptVersion081(_CheckingContext *_ctx) {
        ___RECEIPT_LOG(" - Checking receipt version");
        _ReceiptAttributeType _value = _StoreReceiptAttributeTypeBundleVersion;
        volatile int _code = 68; _code -= 25; _code *= 4; _code += 1;
        CFStringRef _str1 = _ObfuscationFunction005CF((_Strings[6]), 125, 16);
        CFNumberRef _key = _FKLMEMUUFOBP_01AD00FC(NULL, kCFNumberIntType, &_value);
        CFStringRef _str2 = (CFStringRef) _DBXYLRSFRPCN_00D80126((CFDictionaryRef) _ctx->receipt_dict, _key);
        _CFRelease_00D8020A(_key);
        if (_UQUFVRIQHDJC_01AD0011(_str1, _str2, 0) != kCFCompareEqualTo) {
            ___RECEIPT_LOG(" - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str2, CFStringGetSystemEncoding()));
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_00C20216(_code);
            // Dead code
            _CFRelease_00D8020A(_key);
            _CFRelease_00D8020A(_str1);
            _CFRelease_00D8020A(_key);
            _CFRelease_00D8020A(_str1);
        }
        // Global variables computation
        // From 346 to 351
        _SCDGZQSSSVYY -= 229; _SCDGZQSSSVYY *= 3;
        // From 294 to 414
        _DBXYLRSFRPCN -= 156; _DBXYLRSFRPCN *= 3;
        // From 261 to 294
        _LGIPGTIEGWJQ -= 163; _LGIPGTIEGWJQ *= 3;
        // Set to 206
        _XDKPSKJODJNL = 206;
        // From 560 to 254
        _CBKSUKALVWPQ += 456; _CBKSUKALVWPQ /= 4;
        // From 17 to 298
        _UQUFVRIQHDJC -= 2; _UQUFVRIQHDJC *= 19; _UQUFVRIQHDJC += 13;
        // From 252 to 407
        _FKLMEMUUFOBP -= 117; _FKLMEMUUFOBP *= 3; _FKLMEMUUFOBP += 2;
        // From 355 to 300
        _TWZAYFSSKURV += 245; _TWZAYFSSKURV /= 2;
        _CFRelease_00D8020A(_str1);
    }
#else
#define _CheckReceiptVersion081(_ctx) { \
___RECEIPT_LOG(" - Checking receipt version"); \
_ReceiptAttributeType _value = _StoreReceiptAttributeTypeBundleVersion; \
volatile int _code = 68; _code -= 25; _code *= 4; _code += 1;  \
CFStringRef _str1 = _ObfuscationFunction005CF((_Strings[6]), 125, 16); \
CFNumberRef _key = _FKLMEMUUFOBP_01AD00FC(NULL, kCFNumberIntType, &_value); \
CFStringRef _str2 = (CFStringRef) _DBXYLRSFRPCN_00D80126((CFDictionaryRef) _ctx->receipt_dict, _key); \
_CFRelease_00D8020A(_key); \
if (_UQUFVRIQHDJC_01AD0011(_str1, _str2, 0) != kCFCompareEqualTo) { \
___RECEIPT_LOG(" - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str2, CFStringGetSystemEncoding())); \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_00C20216(_code); \
_CFRelease_00D8020A(_key); \
_CFRelease_00D8020A(_str1); \
_CFRelease_00D8020A(_key); \
_CFRelease_00D8020A(_str1); \
} \
_SCDGZQSSSVYY -= 229; _SCDGZQSSSVYY *= 3;  \
_DBXYLRSFRPCN -= 156; _DBXYLRSFRPCN *= 3;  \
_LGIPGTIEGWJQ -= 163; _LGIPGTIEGWJQ *= 3;  \
_XDKPSKJODJNL = 206; \
_CBKSUKALVWPQ += 456; _CBKSUKALVWPQ /= 4;  \
_UQUFVRIQHDJC -= 2; _UQUFVRIQHDJC *= 19; _UQUFVRIQHDJC += 13;  \
_FKLMEMUUFOBP -= 117; _FKLMEMUUFOBP *= 3; _FKLMEMUUFOBP += 2;  \
_TWZAYFSSKURV += 245; _TWZAYFSSKURV /= 2;  \
_CFRelease_00D8020A(_str1); \
}
#endif
#endif
    
#ifdef RECEIGEN_LOOSE_VERSION_CHECK
#ifdef DEBUG
    inline static void _CheckReceiptVersion081(_CheckingContext *_ctx) {
        ___RECEIPT_LOG(" - Checking receipt version loosely");
        _ReceiptAttributeType _value = _StoreReceiptAttributeTypeBundleVersion;
        CFStringRef _str1 = _ObfuscationFunction005CF((_Strings[6]), 125, 16);
        CFNumberRef _key = _FKLMEMUUFOBP_01AD00FC(NULL, kCFNumberIntType, &_value);
        CFStringRef _str2 = (CFStringRef) _DBXYLRSFRPCN_00D80126((CFDictionaryRef) _ctx->receipt_dict, _key);
        _CFRelease_01AD020A(_key);
        if (_UQUFVRIQHDJC_01AD0011(_str1, _str2, 0) != kCFCompareEqualTo) {
            ___RECEIPT_LOG(" - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str2, CFStringGetSystemEncoding()));
        }
        // Global variables computation
        // From 346 to 351
        _SCDGZQSSSVYY -= 229; _SCDGZQSSSVYY *= 3;
        // From 294 to 414
        _DBXYLRSFRPCN -= 156; _DBXYLRSFRPCN *= 3;
        // From 261 to 294
        _LGIPGTIEGWJQ -= 163; _LGIPGTIEGWJQ *= 3;
        // Set to 206
        _XDKPSKJODJNL = 206;
        // From 560 to 254
        _CBKSUKALVWPQ += 456; _CBKSUKALVWPQ /= 4;
        // From 17 to 298
        _UQUFVRIQHDJC -= 2; _UQUFVRIQHDJC *= 19; _UQUFVRIQHDJC += 13;
        // From 252 to 407
        _FKLMEMUUFOBP -= 117; _FKLMEMUUFOBP *= 3; _FKLMEMUUFOBP += 2;
        // From 355 to 300
        _TWZAYFSSKURV += 245; _TWZAYFSSKURV /= 2;
        _CFRelease_01AD020A(_str1);
    }
#else
#define _CheckReceiptVersion081(_ctx) { \
___RECEIPT_LOG(" - Checking receipt version loosely"); \
_ReceiptAttributeType _value = _StoreReceiptAttributeTypeBundleVersion; \
CFStringRef _str1 = _ObfuscationFunction005CF((_Strings[6]), 125, 16); \
CFNumberRef _key = _FKLMEMUUFOBP_01AD00FC(NULL, kCFNumberIntType, &_value); \
CFStringRef _str2 = (CFStringRef) _DBXYLRSFRPCN_00D80126((CFDictionaryRef) _ctx->receipt_dict, _key); \
_CFRelease_01AD020A(_key); \
if (_UQUFVRIQHDJC_01AD0011(_str1, _str2, 0) != kCFCompareEqualTo) { \
___RECEIPT_LOG(" - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(_str2, CFStringGetSystemEncoding())); \
} \
_SCDGZQSSSVYY -= 229; _SCDGZQSSSVYY *= 3;  \
_DBXYLRSFRPCN -= 156; _DBXYLRSFRPCN *= 3;  \
_LGIPGTIEGWJQ -= 163; _LGIPGTIEGWJQ *= 3;  \
_XDKPSKJODJNL = 206; \
_CBKSUKALVWPQ += 456; _CBKSUKALVWPQ /= 4;  \
_UQUFVRIQHDJC -= 2; _UQUFVRIQHDJC *= 19; _UQUFVRIQHDJC += 13;  \
_FKLMEMUUFOBP -= 117; _FKLMEMUUFOBP *= 3; _FKLMEMUUFOBP += 2;  \
_TWZAYFSSKURV += 245; _TWZAYFSSKURV /= 2;  \
_CFRelease_01AD020A(_str1); \
}
#endif
#endif
    
    
    // CodeBlock CheckReceiptHash
#ifdef DEBUG
    inline static void _CheckReceiptHash09E(_CheckingContext *_ctx) {
        CFDataRef _data1, _data2, _data3;
        CFMutableDataRef _data4;
        unsigned char _digest[585];
        volatile int _counter = 6; _counter -= 2; _counter *= 5;
        _ReceiptAttributeType _value;
        CFNumberRef _key;
        char *_str1;
        ___RECEIPT_LOG(" - Checking receipt hash");
        _value = _StoreReceiptAttributeTypeOpaqueValue;
        _key = _TWZAYFSSKURV_00D8012C(NULL, kCFNumberIntType, &_value);
        _data1 = (CFDataRef) _LGIPGTIEGWJQ_005E0126((CFDictionaryRef) _ctx->receipt_dict, _key);
        _CFRelease_01AD015B(_key);
        _value = _StoreReceiptAttributeTypeBundleIdData;
        _key = _TWZAYFSSKURV_00D8012C(NULL, kCFNumberIntType, &_value);
        _data2 = (CFDataRef) _LGIPGTIEGWJQ_005E0126((CFDictionaryRef) _ctx->receipt_dict, _key);
        _CFRelease_01AD015B(_key);
        _value = _StoreReceiptAttributeTypeHash;
        _key = _TWZAYFSSKURV_00D8012C(NULL, kCFNumberIntType, &_value);
        _data3 = (CFDataRef) _LGIPGTIEGWJQ_005E0126((CFDictionaryRef) _ctx->receipt_dict, _key);
        _CFRelease_01AD015B(_key);
        _data4 = _CBKSUKALVWPQ_00D800FE(NULL, _FKLMEMUUFOBP_00D80197((CFDataRef) _ctx->guid_data) + _FKLMEMUUFOBP_00D80197(_data1) + _FKLMEMUUFOBP_00D80197(_data2));
        _CFDataAppendBytes_01AD0003(_data4, _CFDataGetBytePtr_005E01C0((CFDataRef) _ctx->guid_data), _FKLMEMUUFOBP_00D80197((CFDataRef) _ctx->guid_data));
        _CFDataAppendBytes_01AD0003(_data4, _CFDataGetBytePtr_005E01C0(_data1), _FKLMEMUUFOBP_00D80197(_data1));
        _CFDataAppendBytes_01AD0003(_data4, _CFDataGetBytePtr_005E01C0(_data2), _FKLMEMUUFOBP_00D80197(_data2));
        CC_SHA1_CTX _hashctx1;
        _CC_SHA1_Init_002000B9(&_hashctx1);
        _CC_SHA1_Update_00C20165(&_hashctx1, (const void *) _CFDataGetBytePtr_005E01C0((CFDataRef) _ctx->guid_data), (CC_LONG) _FKLMEMUUFOBP_00D80197((CFDataRef) _ctx->guid_data));
        _CC_SHA1_Update_00C20165(&_hashctx1, (const void *) _CFDataGetBytePtr_005E01C0(_data1), (CC_LONG) _FKLMEMUUFOBP_00D80197(_data1));
        _CC_SHA1_Update_00C20165(&_hashctx1, (const void *) _CFDataGetBytePtr_005E01C0(_data2), (CC_LONG) _FKLMEMUUFOBP_00D80197(_data2));
        _UQUFVRIQHDJC_00C2012A(_digest, &_hashctx1);
        _OpenSSL_add_all_digests_01890128();
        EVP_MD_CTX _hashctx2;
        _EVP_MD_CTX_init_014800B1(&_hashctx2);
        char _str1_[585];
        _ObfuscationFunction00A((_Strings[443]), _str1_, 123, 16);
        _str1 = _str1_;
        const EVP_MD *_digester = EVP_get_digestbyname(_str1);
        _EVP_DigestInit_000501EE(&_hashctx2, _digester);
        _EVP_DigestUpdate_0189012D(&_hashctx2, (const void *) _CFDataGetBytePtr_005E01C0((CFDataRef) _ctx->guid_data), (size_t) _FKLMEMUUFOBP_00D80197((CFDataRef) _ctx->guid_data));
        _EVP_DigestUpdate_0189012D(&_hashctx2, (const void *) _CFDataGetBytePtr_005E01C0(_data1), (size_t) _FKLMEMUUFOBP_00D80197(_data1));
        _EVP_DigestUpdate_0189012D(&_hashctx2, (const void *) _CFDataGetBytePtr_005E01C0(_data2), (size_t) _FKLMEMUUFOBP_00D80197(_data2));
        _EVP_DigestFinal_000500EA(&_hashctx2, _digest, NULL);
        volatile int _code = 134; _code -= 77; _code *= 3; _code += 2;
        const unsigned char *_ptr1 = _digest;
        const unsigned char *_ptr2 = _CFDataGetBytePtr_005E01C0(_data3);
        while(--_counter >= 0) {
            if ((*_ptr1++) != (*_ptr2++)) {
                ___RECEIPT_LOG(" - Receipt hash is invalid");
                _CFRelease_01AD015B(_data4);
                ___RECEIPT_LOG(" - Exiting with code 173...");
                _exit_002001BF(_code);
                // Dead code
                _CFRelease_01AD015B(_data1);
                _CFRelease_01AD015B(_data2);
                _CFRelease_01AD015B(_data4);
                goto _CheckReceiptHash09E__bail;
            }
        }
        // Global variables computation
        // From 351 to 353
        _SCDGZQSSSVYY -= 234; _SCDGZQSSSVYY *= 3; _SCDGZQSSSVYY += 2;
        // From 414 to 107
        _DBXYLRSFRPCN += 121; _DBXYLRSFRPCN /= 5;
        // From 206 to 573
        _XDKPSKJODJNL -= 63; _XDKPSKJODJNL *= 4; _XDKPSKJODJNL += 1;
        // From 407 to 461
        _FKLMEMUUFOBP -= 254; _FKLMEMUUFOBP *= 3; _FKLMEMUUFOBP += 2;
        // From 300 to 498
        _TWZAYFSSKURV -= 134; _TWZAYFSSKURV *= 3;
    _CheckReceiptHash09E__bail:
        _CFRelease_01AD015B(_data4);
    }
#else
#define _CheckReceiptHash09E(_ctx) { \
CFDataRef _data1, _data2, _data3; \
CFMutableDataRef _data4; \
unsigned char _digest[585]; \
volatile int _counter = 6; _counter -= 2; _counter *= 5;  \
_ReceiptAttributeType _value; \
CFNumberRef _key; \
char *_str1; \
___RECEIPT_LOG(" - Checking receipt hash"); \
_value = _StoreReceiptAttributeTypeOpaqueValue; \
_key = _TWZAYFSSKURV_00D8012C(NULL, kCFNumberIntType, &_value); \
_data1 = (CFDataRef) _LGIPGTIEGWJQ_005E0126((CFDictionaryRef) _ctx->receipt_dict, _key); \
_CFRelease_01AD015B(_key); \
_value = _StoreReceiptAttributeTypeBundleIdData; \
_key = _TWZAYFSSKURV_00D8012C(NULL, kCFNumberIntType, &_value); \
_data2 = (CFDataRef) _LGIPGTIEGWJQ_005E0126((CFDictionaryRef) _ctx->receipt_dict, _key); \
_CFRelease_01AD015B(_key); \
_value = _StoreReceiptAttributeTypeHash; \
_key = _TWZAYFSSKURV_00D8012C(NULL, kCFNumberIntType, &_value); \
_data3 = (CFDataRef) _LGIPGTIEGWJQ_005E0126((CFDictionaryRef) _ctx->receipt_dict, _key); \
_CFRelease_01AD015B(_key); \
_data4 = _CBKSUKALVWPQ_00D800FE(NULL, _FKLMEMUUFOBP_00D80197((CFDataRef) _ctx->guid_data) + _FKLMEMUUFOBP_00D80197(_data1) + _FKLMEMUUFOBP_00D80197(_data2)); \
_CFDataAppendBytes_01AD0003(_data4, _CFDataGetBytePtr_005E01C0((CFDataRef) _ctx->guid_data), _FKLMEMUUFOBP_00D80197((CFDataRef) _ctx->guid_data)); \
_CFDataAppendBytes_01AD0003(_data4, _CFDataGetBytePtr_005E01C0(_data1), _FKLMEMUUFOBP_00D80197(_data1)); \
_CFDataAppendBytes_01AD0003(_data4, _CFDataGetBytePtr_005E01C0(_data2), _FKLMEMUUFOBP_00D80197(_data2)); \
CC_SHA1_CTX _hashctx1; \
_CC_SHA1_Init_002000B9(&_hashctx1); \
_CC_SHA1_Update_00C20165(&_hashctx1, (const void *) _CFDataGetBytePtr_005E01C0((CFDataRef) _ctx->guid_data), (CC_LONG) _FKLMEMUUFOBP_00D80197((CFDataRef) _ctx->guid_data)); \
_CC_SHA1_Update_00C20165(&_hashctx1, (const void *) _CFDataGetBytePtr_005E01C0(_data1), (CC_LONG) _FKLMEMUUFOBP_00D80197(_data1)); \
_CC_SHA1_Update_00C20165(&_hashctx1, (const void *) _CFDataGetBytePtr_005E01C0(_data2), (CC_LONG) _FKLMEMUUFOBP_00D80197(_data2)); \
_UQUFVRIQHDJC_00C2012A(_digest, &_hashctx1); \
_OpenSSL_add_all_digests_01890128(); \
EVP_MD_CTX _hashctx2; \
_EVP_MD_CTX_init_014800B1(&_hashctx2); \
char _str1_[585]; \
_ObfuscationFunction00A((_Strings[443]), _str1_, 123, 16); \
_str1 = _str1_; \
const EVP_MD *_digester = EVP_get_digestbyname(_str1); \
_EVP_DigestInit_000501EE(&_hashctx2, _digester); \
_EVP_DigestUpdate_0189012D(&_hashctx2, (const void *) _CFDataGetBytePtr_005E01C0((CFDataRef) _ctx->guid_data), (size_t) _FKLMEMUUFOBP_00D80197((CFDataRef) _ctx->guid_data)); \
_EVP_DigestUpdate_0189012D(&_hashctx2, (const void *) _CFDataGetBytePtr_005E01C0(_data1), (size_t) _FKLMEMUUFOBP_00D80197(_data1)); \
_EVP_DigestUpdate_0189012D(&_hashctx2, (const void *) _CFDataGetBytePtr_005E01C0(_data2), (size_t) _FKLMEMUUFOBP_00D80197(_data2)); \
_EVP_DigestFinal_000500EA(&_hashctx2, _digest, NULL); \
volatile int _code = 134; _code -= 77; _code *= 3; _code += 2;  \
const unsigned char *_ptr1 = _digest; \
const unsigned char *_ptr2 = _CFDataGetBytePtr_005E01C0(_data3); \
while(--_counter >= 0) { \
if ((*_ptr1++) != (*_ptr2++)) { \
___RECEIPT_LOG(" - Receipt hash is invalid"); \
_CFRelease_01AD015B(_data4); \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_002001BF(_code); \
_CFRelease_01AD015B(_data1); \
_CFRelease_01AD015B(_data2); \
_CFRelease_01AD015B(_data4); \
goto _CheckReceiptHash09E__bail; \
} \
} \
_SCDGZQSSSVYY -= 234; _SCDGZQSSSVYY *= 3; _SCDGZQSSSVYY += 2;  \
_DBXYLRSFRPCN += 121; _DBXYLRSFRPCN /= 5;  \
_XDKPSKJODJNL -= 63; _XDKPSKJODJNL *= 4; _XDKPSKJODJNL += 1;  \
_FKLMEMUUFOBP -= 254; _FKLMEMUUFOBP *= 3; _FKLMEMUUFOBP += 2;  \
_TWZAYFSSKURV -= 134; _TWZAYFSSKURV *= 3;  \
_CheckReceiptHash09E__bail: \
_CFRelease_01AD015B(_data4); \
}
#endif
    
    
    // CodeBlock CheckReceiptExpirationDate
#ifdef DEBUG
    inline static void _CheckReceiptExpirationDate0A7(_CheckingContext *_ctx) {
        ___RECEIPT_LOG(" - Checking receipt expiration date");
        _ReceiptAttributeType _value = _StoreReceiptAttributeTypeExpirationDate;
        volatile int _code = 74; _code -= 31; _code *= 4; _code += 1; 
        CFDateRef _date1 = _DBXYLRSFRPCN_005E006B(NULL, _XDKPSKJODJNL_005E023D());
        CFNumberRef _key = _SCDGZQSSSVYY_005E0161(NULL, kCFNumberIntType, &_value);
        CFDateRef _date2 = (CFDateRef) _FKLMEMUUFOBP_01AD01CD((CFDictionaryRef) _ctx->receipt_dict, _key);
        _CFRelease_005E015B(_key);
        if (_date2 && _TWZAYFSSKURV_00D801F2(_date1, _date2, 0) == kCFCompareGreaterThan) {
            ___RECEIPT_LOG(" - Receipt has expired");
            ___RECEIPT_LOG(" - Exiting with code 173...");
            _exit_002001BF(_code);
            // Dead code
            _CFRelease_005E015B(_key);
            _CFRelease_005E015B(_date1);
            _CFRelease_005E015B(_key);
            _CFRelease_005E015B(_date1);
        }
        // Global variables computation
        // Set to 282
        _FKLMEMUUFOBP = 282;
        _CFRelease_005E015B(_date1);
    }
#else
#define _CheckReceiptExpirationDate0A7(_ctx) { \
___RECEIPT_LOG(" - Checking receipt expiration date"); \
_ReceiptAttributeType _value = _StoreReceiptAttributeTypeExpirationDate; \
volatile int _code = 74; _code -= 31; _code *= 4; _code += 1;  \
CFDateRef _date1 = _DBXYLRSFRPCN_005E006B(NULL, _XDKPSKJODJNL_005E023D()); \
CFNumberRef _key = _SCDGZQSSSVYY_005E0161(NULL, kCFNumberIntType, &_value); \
CFDateRef _date2 = (CFDateRef) _FKLMEMUUFOBP_01AD01CD((CFDictionaryRef) _ctx->receipt_dict, _key); \
_CFRelease_005E015B(_key); \
if (_date2 && _TWZAYFSSKURV_00D801F2(_date1, _date2, 0) == kCFCompareGreaterThan) { \
___RECEIPT_LOG(" - Receipt has expired"); \
___RECEIPT_LOG(" - Exiting with code 173..."); \
_exit_002001BF(_code); \
_CFRelease_005E015B(_key); \
_CFRelease_005E015B(_date1); \
_CFRelease_005E015B(_key); \
_CFRelease_005E015B(_date1); \
} \
_FKLMEMUUFOBP = 282; \
_CFRelease_005E015B(_date1); \
}
#endif
    
    
    // CodeBlock AppRunner
#ifdef RUNNER
#define RUNNER_SIGNATURE int(*_RUNNER_)(int argc, const char *argv[])
    typedef RUNNER_SIGNATURE;
    static uintptr_t RUNNER_ = ((uintptr_t)RUNNER - 282);
#endif
    
    inline static void _AppRunner0A8(_CheckingContext *_ctx) {
        ___RECEIPT_LOG(" - Running applicaition");
#ifdef RUNNER
        ((_RUNNER_)(RUNNER_ + (uintptr_t)_FKLMEMUUFOBP))((int) _ctx->argc, _ctx->argv);
#else
        _FKLMEMUUFOBP_021B011A((int) _ctx->argc, _ctx->argv);
#endif
    }
    
    
    // CodeBlock CleanUp
#ifdef DEBUG
    inline static void _CleanUp0AC(_CheckingContext *_ctx) {
        ___RECEIPT_LOG(" - Cleaning up");
        CFTypeRef _references[4] = { _ctx->receipt_data, _ctx->guid_data, _ctx->receipt_dict, _ctx->ca_data };
        if (_references[0]) {
            _CFRelease_01AD01B0(_references[0]);
            _references[0] = NULL;
        }
        if (_references[1]) {
            _CFRelease_01AD01B0(_references[1]);
            _references[1] = NULL;
        }
        if (_references[2]) {
            _CFRelease_01AD01B0(_references[2]);
            _references[2] = NULL;
        }
        if (_references[3]) {
            _CFRelease_01AD01B0(_references[3]);
            _references[3] = NULL;
        }
    }
#else
#define _CleanUp0AC(_ctx) { \
___RECEIPT_LOG(" - Cleaning up"); \
CFTypeRef _references[4] = { _ctx->receipt_data, _ctx->guid_data, _ctx->receipt_dict, _ctx->ca_data }; \
if (_references[0]) { \
_CFRelease_01AD01B0(_references[0]); \
_references[0] = NULL; \
} \
if (_references[1]) { \
_CFRelease_01AD01B0(_references[1]); \
_references[1] = NULL; \
} \
if (_references[2]) { \
_CFRelease_01AD01B0(_references[2]); \
_references[2] = NULL; \
} \
if (_references[3]) { \
_CFRelease_01AD01B0(_references[3]); \
_references[3] = NULL; \
} \
}
#endif
    
    
    
    
    // CodeBlock EntryPoint
#ifdef DEBUG
    inline static int CheckReceiptAndRun(int _argc, const char *_argv[]) {
        _Pragma("clang diagnostic push")
        _Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"")
        ___RECEIPT_LOG(" - Entry point");
        // Create contexts
        _CheckingContext _ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
        // Arguments for running the application
        _ctx1.argc = _argc;
        _ctx1.argv = (const char **) _argv;
        // Jump to first step
        goto __label00;
    __label03:
        _GetRootCA050((&_ctx1));
        goto __label04;
    __label0C:
        _AppRunner0A8((&_ctx1));
        goto __label0D;
    __label06:
        _GetReceiptInformation063((&_ctx1));
        goto __label07;
    __label07:
        _CheckReceiptSignature06A((&_ctx1));
        goto __label08;
    __label0B:
        _CheckReceiptExpirationDate0A7((&_ctx1));
        goto __label0C;
    __label00:
        _GetMainBundle016((&_ctx1));
        goto __label01;
    __label08:
        _CheckReceiptIdentifier07F((&_ctx1));
        goto __label09;
    __label05:
        _CheckBundleVersion060((&_ctx1));
        goto __label06;
    __label02:
        _GetGUID044((&_ctx1));
        goto __label03;
    __label0A:
        _CheckReceiptHash09E((&_ctx1));
        goto __label0B;
    __label09:
        _CheckReceiptVersion081((&_ctx1));
        goto __label0A;
    __label01:
        _LoadReceipt020((&_ctx1));
        goto __label02;
    __label0D:
        _CleanUp0AC((&_ctx1));
        goto __label0E;
    __label04:
        _CheckBundleIdentifier05B((&_ctx1));
        goto __label05;
    __label0E:
        while(false);
        return 0;
        _Pragma("clang diagnostic pop")
    }
#else
#define CheckReceiptAndRun(_argc, _argv) ({ \
_Pragma("clang diagnostic push") \
_Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"") \
___RECEIPT_LOG(" - Entry point"); \
_CheckingContext _ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }; \
_ctx1.argc = _argc; \
_ctx1.argv = (const char **) _argv; \
goto __label00; \
__label03: \
_GetRootCA050((&_ctx1)); \
goto __label04; \
__label0C: \
_AppRunner0A8((&_ctx1)); \
goto __label0D; \
__label06: \
_GetReceiptInformation063((&_ctx1)); \
goto __label07; \
__label07: \
_CheckReceiptSignature06A((&_ctx1)); \
goto __label08; \
__label0B: \
_CheckReceiptExpirationDate0A7((&_ctx1)); \
goto __label0C; \
__label00: \
_GetMainBundle016((&_ctx1)); \
goto __label01; \
__label08: \
_CheckReceiptIdentifier07F((&_ctx1)); \
goto __label09; \
__label05: \
_CheckBundleVersion060((&_ctx1)); \
goto __label06; \
__label02: \
_GetGUID044((&_ctx1)); \
goto __label03; \
__label0A: \
_CheckReceiptHash09E((&_ctx1)); \
goto __label0B; \
__label09: \
_CheckReceiptVersion081((&_ctx1)); \
goto __label0A; \
__label01: \
_LoadReceipt020((&_ctx1)); \
goto __label02; \
__label0D: \
_CleanUp0AC((&_ctx1)); \
goto __label0E; \
__label04: \
_CheckBundleIdentifier05B((&_ctx1)); \
goto __label05; \
__label0E: \
while(false); \
0; \
_Pragma("clang diagnostic pop") \
})
#endif
    
    
    
    
    // Pop the new diagnostic context
#pragma clang diagnostic pop
    
    // C++ epilogue
#ifdef __cplusplus
}
#endif

