//
// This code was generated by RECEIGEN 3.4.0.0 and will use:
//
// Platform                   : OSX
// CFBundleIdentifier         : pl.micropixels.NepTunes
// CFBundleShortVersionString : 1.50
// Prefix                     : Troll
// Success Behavior           : DoNothing
// Failure Behavior           : CallBlock
//
// This generated code has to be linked to OpenSSL (either statically or dynamically)
// Refer to the website for more details and specific cases.
//

// C++ prologue
#ifdef __cplusplus
extern "C" {
#endif

// Headers for general purpose functions
#import <AvailabilityMacros.h>
#import <objc/objc.h>
#import <CoreFoundation/CoreFoundation.h>
#import <Foundation/Foundation.h>
// Headers for system calls
#import <dlfcn.h>
#import <setjmp.h>
#import <glob.h>

// Headers for bundle security checks
#import <Security/Security.h>
#import <CommonCrypto/CommonDigest.h>

// Headers from OpenSSL
#import <openssl/bio.h>
#import <openssl/err.h>
#import <openssl/objects.h>
#import <openssl/pkcs7.h>
#import <openssl/sha.h>
#import <openssl/x509.h>

// Define this if you are linking a pre-1.0.0 OpenSSL (like the one found on OS X)
#ifdef RECEIGEN_USE_PRE_1_0_0_OPENSSL
    #ifndef _STACK
        #define _STACK STACK
    #endif
#endif

// Headers for network checks
#import <IOKit/IOKitLib.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <net/if.h>
#import <net/if_dl.h>

// Some compilers provide the capability to test if certain attributes are available.
// This macro provides a compatibility path for other compilers.
#ifndef __has_feature
    #define __has_feature(X)    0
#endif

// Define macros that deal with ARC if enable.
#ifndef __SAFE_CAST
    #if __has_feature(objc_arc)
        #define __SAFE_CAST(T,X)    (__bridge T) X
        #define __RETURN_RETAINED   __attribute__((ns_returns_retained))
    #else
        #define __SAFE_CAST(T,X)    (T) X
        #define __RETURN_RETAINED
    #endif
#endif

// Define to turn-off debug logs
#ifndef RECEIGEN_QUIET_DEBUG
    #define RECEIGEN_QUIET_DEBUG 0
#endif

// Log statement for debugging purpose
#if RECEIGEN_QUIET_DEBUG
        #define __Troll_RECEIPT_LOG(...)
#elif defined DEBUG
    #if __OBJC__
        #define __Troll_RECEIPT_LOG(...)    NSLog(@__VA_ARGS__)
    #else
        #define __Troll_RECEIPT_LOG(...)    fprintf(stderr, __VA_ARGS__); fprintf(stderr, "\n")
    #endif
#else
        #define __Troll_RECEIPT_LOG(...)
#endif

// Otherwise specified, check the entitlements
#ifndef RECEIGEN_CHECK_ENTITLEMENTS
    #define RECEIGEN_CHECK_ENTITLEMENTS 1
#endif

// Function pointer for string decryption
typedef void (*Troll_decrypt)(const char *, char *, int, int);

// Block used when validating receipt at runtime.
typedef void (^Troll_CallBackBlock)(NSDictionary *receipt_dict, BOOL validationResult);

// Keys for each receipt attribute
typedef enum _Troll_ReceiptAttributeType {

    // Bundle identifier
    Troll_ReceiptAttributeTypeBundleId = 2,
    // Application version
    Troll_ReceiptAttributeTypeBundleVersion = 3,
    // Opaque value
    Troll_ReceiptAttributeTypeOpaqueValue = 4,
    // Hash value
    Troll_ReceiptAttributeTypeHash = 5,
    // In-app purchase receipt
    Troll_ReceiptAttributeTypeInAppPurchase = 17,
    // Original Application Version
    Troll_ReceiptAttributeTypeOriginalApplicationVersion = 19,
    // Receipt Expiration Date
    Troll_ReceiptAttributeTypeExpirationDate = 21,
    // Quantity
    Troll_InAppAttributeTypeQuantity = 1701,
    // Product identifier
    Troll_InAppAttributeTypeProductIdentifer = 1702,
    // Transaction identifier
    Troll_InAppAttributeTypeTransactionIdentifer = 1703,
    // Purchase date
    Troll_InAppAttributeTypePurchaseDate = 1704,
    // Original transaction identifier
    Troll_InAppAttributeTypeOriginalTransactionIdentifer = 1705,
    // Original purchase date
    Troll_InAppAttributeTypeOriginalPurchaseDate = 1706,
    // Subscription Expiration Date
    Troll_InAppAttributeTypeSubscriptionExpirationDate = 1708,
    // Web Order Line Item ID
    Troll_InAppAttributeTypeWebOrderLineItemId = 1711,
    // Cancellation Date
    Troll_InAppAttributeTypeCancellationDate = 1712,

    // Storage key base value
    Troll_StoreNone = 2962,
    // Bundle identifier
    Troll_StoreReceiptAttributeTypeBundleId = Troll_StoreNone + (Troll_ReceiptAttributeTypeBundleId << 1),
    Troll_StoreReceiptAttributeTypeBundleIdData = Troll_StoreNone + (Troll_ReceiptAttributeTypeBundleId << 1) + 1,
    // Application version
    Troll_StoreReceiptAttributeTypeBundleVersion = Troll_StoreNone + (Troll_ReceiptAttributeTypeBundleVersion << 1),
    Troll_StoreReceiptAttributeTypeBundleVersionData = Troll_StoreNone + (Troll_ReceiptAttributeTypeBundleId << 1) + 1,
    // Opaque value
    Troll_StoreReceiptAttributeTypeOpaqueValue = Troll_StoreNone + (Troll_ReceiptAttributeTypeOpaqueValue << 1),
    // Hash value
    Troll_StoreReceiptAttributeTypeHash = Troll_StoreNone + (Troll_ReceiptAttributeTypeHash << 1),
    // In-app purchase receipt
    Troll_StoreReceiptAttributeTypeInAppPurchase = Troll_StoreNone + (Troll_ReceiptAttributeTypeInAppPurchase << 1),
    // Original Application Version
    Troll_StoreReceiptAttributeTypeOriginalApplicationVersion = Troll_StoreNone + (Troll_ReceiptAttributeTypeOriginalApplicationVersion << 1),
    // Receipt Expiration Date
    Troll_StoreReceiptAttributeTypeExpirationDate = Troll_StoreNone + (Troll_ReceiptAttributeTypeExpirationDate << 1),
    // Quantity
    Troll_StoreInAppAttributeTypeQuantity = Troll_StoreNone + (Troll_InAppAttributeTypeQuantity << 1),
    // Product identifier
    Troll_StoreInAppAttributeTypeProductIdentifer = Troll_StoreNone + (Troll_InAppAttributeTypeProductIdentifer << 1),
    // Transaction identifier
    Troll_StoreInAppAttributeTypeTransactionIdentifer = Troll_StoreNone + (Troll_InAppAttributeTypeTransactionIdentifer << 1),
    // Purchase date
    Troll_StoreInAppAttributeTypePurchaseDate = Troll_StoreNone + (Troll_InAppAttributeTypePurchaseDate << 1),
    // Original transaction identifier
    Troll_StoreInAppAttributeTypeOriginalTransactionIdentifer = Troll_StoreNone + (Troll_InAppAttributeTypeOriginalTransactionIdentifer << 1),
    // Original purchase date
    Troll_StoreInAppAttributeTypeOriginalPurchaseDate = Troll_StoreNone + (Troll_InAppAttributeTypeOriginalPurchaseDate << 1),
    // Subscription Expiration Date
    Troll_StoreInAppAttributeTypeSubscriptionExpirationDate = Troll_StoreNone + (Troll_InAppAttributeTypeSubscriptionExpirationDate << 1),
    // Web Order Line Item ID
    Troll_StoreInAppAttributeTypeWebOrderLineItemId = Troll_StoreNone + (Troll_InAppAttributeTypeWebOrderLineItemId << 1),
    // Cancellation Date
    Troll_StoreInAppAttributeTypeCancellationDate = Troll_StoreNone + (Troll_InAppAttributeTypeCancellationDate << 1)

} Troll_ReceiptAttributeType;

// Constants for Receipt info query
#define Troll_RECEIPT_ATTRIBUTETYPE_BUNDLE_ID                        [NSNumber numberWithInt:Troll_StoreReceiptAttributeTypeBundleId]
#define Troll_RECEIPT_ATTRIBUTETYPE_BUNDLE_VERSION                   [NSNumber numberWithInt:Troll_StoreReceiptAttributeTypeBundleVersion]
#define Troll_RECEIPT_ATTRIBUTETYPE_ORIGINAL_APPLICATION_VERSION     [NSNumber numberWithInt:Troll_StoreReceiptAttributeTypeOriginalApplicationVersion]
#define Troll_RECEIPT_ATTRIBUTETYPE_EXPIRATION_DATE                  [NSNumber numberWithInt:Troll_StoreReceiptAttributeTypeExpirationDate]

// Constants for InApp info query
#define Troll_INAPP_ATTRIBUTETYPE_QUANTITY                           [NSNumber numberWithInt:Troll_StoreInAppAttributeTypeQuantity]
#define Troll_INAPP_ATTRIBUTETYPE_PRODUCTIDENTIFER                   [NSNumber numberWithInt:Troll_StoreInAppAttributeTypeProductIdentifer]
#define Troll_INAPP_ATTRIBUTETYPE_TRANSACTIONIDENTIFER               [NSNumber numberWithInt:Troll_StoreInAppAttributeTypeTransactionIdentifer]
#define Troll_INAPP_ATTRIBUTETYPE_PURCHASEDATE                       [NSNumber numberWithInt:Troll_StoreInAppAttributeTypePurchaseDate]
#define Troll_INAPP_ATTRIBUTETYPE_ORIGINALTRANSACTIONIDENTIFER       [NSNumber numberWithInt:Troll_StoreInAppAttributeTypeOriginalTransactionIdentifer]
#define Troll_INAPP_ATTRIBUTETYPE_ORIGINALPURCHASEDATE               [NSNumber numberWithInt:Troll_StoreInAppAttributeTypeOriginalPurchaseDate]
#define Troll_INAPP_ATTRIBUTETYPE_SUBSCRIPTIONEXPIRATIONDATE         [NSNumber numberWithInt:Troll_StoreInAppAttributeTypeSubscriptionExpirationDate]
#define Troll_INAPP_ATTRIBUTETYPE_WEBORDERLINEITEMID                 [NSNumber numberWithInt:Troll_StoreInAppAttributeTypeWebOrderLineItemId]
#define Troll_INAPP_ATTRIBUTETYPE_CANCELLATIONDATE                   [NSNumber numberWithInt:Troll_StoreInAppAttributeTypeCancellationDate]

// Shared context for receipt validation
typedef struct _Troll_CheckingContext {
    CFTypeRef dummy0001;
    CFTypeRef dummy0004;
    CFTypeRef receipt_dict;
    CFTypeRef receipt_data;
    CFTypeRef main_bundle;
    CFTypeRef dummy0002;
    CFTypeRef callback_block;
    CFTypeRef dummy0000;
    CFTypeRef dummy0003;
    CFTypeRef ca_data;
    CFTypeRef guid_data;
} Troll_CheckingContext;

// Shared context for receipt parsing
typedef struct _Troll_ParsingContext {
    CFTypeRef dummy0003;
    CFTypeRef dummy0004;
    CFTypeRef dummy0008;
    CFTypeRef dictionary;
    CFTypeRef dummy000E;
    CFTypeRef dummy000D;
    CFTypeRef dummy000A;
    const unsigned char * end;
    struct _Troll_ParsingContext * parent;
    CFTypeRef dummy0009;
    CFTypeRef dummy0002;
    CFTypeRef dummy000C;
    CFTypeRef dummy0007;
    CFTypeRef dummy000B;
    CFTypeRef dummy0000;
    const unsigned char * ptr;
    CFTypeRef dummy0005;
    CFTypeRef dummy0001;
    CFTypeRef dummy0006;
} Troll_ParsingContext;

// Symbol ASN1_get_object
typedef int (*__Troll_ASN1_get_object)(const unsigned char **pp, long *plength, int *ptag, int *pclass, long omax);
// Symbol ASN1_INTEGER_free
typedef void (*__Troll_ASN1_INTEGER_free)(ASN1_INTEGER *a);
// Symbol ASN1_INTEGER_get
typedef long (*__Troll_ASN1_INTEGER_get)(const ASN1_INTEGER *a);
// Symbol ASN1_OBJECT_free
typedef void (*__Troll_ASN1_OBJECT_free)(ASN1_OBJECT *a);
// Symbol BIO_free
typedef int (*__Troll_BIO_free)(BIO *a);
// Symbol BIO_new
typedef BIO *(*__Troll_BIO_new)(BIO_METHOD *type);
// Symbol BIO_s_mem
typedef BIO_METHOD *(*__Troll_BIO_s_mem)(void);
// Symbol BIO_write
typedef int (*__Troll_BIO_write)(BIO *b, const void *buf, int len);
// Symbol c2i_ASN1_INTEGER
typedef ASN1_INTEGER *(*__Troll_c2i_ASN1_INTEGER)(ASN1_INTEGER **a,const unsigned char **pp, long length);
// Symbol CC_SHA1
typedef unsigned char *(*__Troll_CC_SHA1)(const void *data, CC_LONG len, unsigned char *md);
// Symbol CC_SHA1_Final
typedef int (*__Troll_CC_SHA1_Final)(unsigned char *md, CC_SHA1_CTX *c);
// Symbol CC_SHA1_Init
typedef int (*__Troll_CC_SHA1_Init)(CC_SHA1_CTX *c);
// Symbol CC_SHA1_Update
typedef int (*__Troll_CC_SHA1_Update)(CC_SHA1_CTX *c, const void *data, CC_LONG len);
// Symbol CFAbsoluteTimeGetCurrent
typedef CFAbsoluteTime (*__Troll_CFAbsoluteTimeGetCurrent)();
// Symbol CFArrayAppendValue
typedef void (*__Troll_CFArrayAppendValue)(CFMutableArrayRef theArray, const void *value);
// Symbol CFArrayCreateMutable
typedef CFMutableArrayRef (*__Troll_CFArrayCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
// Symbol CFArrayGetCount
typedef CFIndex (*__Troll_CFArrayGetCount)(CFArrayRef theArray);
// Symbol CFArrayGetValueAtIndex
typedef const void *(*__Troll_CFArrayGetValueAtIndex)(CFArrayRef theArray, CFIndex idx);
// Symbol CFBundleCopyBundleURL
typedef CFURLRef (*__Troll_CFBundleCopyBundleURL)(CFBundleRef bundle);
// Symbol CFBundleGetIdentifier
typedef CFStringRef (*__Troll_CFBundleGetIdentifier)(CFBundleRef bundle);
// Symbol CFBundleGetMainBundle
typedef CFBundleRef (*__Troll_CFBundleGetMainBundle)();
// Symbol CFBundleGetValueForInfoDictionaryKey
typedef CFTypeRef (*__Troll_CFBundleGetValueForInfoDictionaryKey)(CFBundleRef bundle, CFStringRef key);
// Symbol CFBundleUnloadExecutable
typedef void (*__Troll_CFBundleUnloadExecutable)(CFBundleRef bundle);
// Symbol CFDataAppendBytes
typedef void (*__Troll_CFDataAppendBytes)(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
// Symbol CFDataCreate
typedef CFDataRef (*__Troll_CFDataCreate)(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
// Symbol CFDataCreateMutable
typedef CFMutableDataRef (*__Troll_CFDataCreateMutable)(CFAllocatorRef allocator, CFIndex capacity);
// Symbol CFDataGetBytePtr
typedef const UInt8 *(*__Troll_CFDataGetBytePtr)(CFDataRef theData);
// Symbol CFDataGetLength
typedef CFIndex (*__Troll_CFDataGetLength)(CFDataRef theData);
// Symbol CFDateCompare
typedef CFComparisonResult (*__Troll_CFDateCompare)(CFDateRef theString1, CFDateRef theString2, CFStringCompareFlags compareOptions);
// Symbol CFDateCreate
typedef CFDateRef (*__Troll_CFDateCreate)(CFAllocatorRef allocator, CFAbsoluteTime at);
// Symbol CFDateFormatterCreate
typedef CFDateFormatterRef (*__Troll_CFDateFormatterCreate)(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
// Symbol CFDateFormatterCreateDateFromString
typedef CFDateRef (*__Troll_CFDateFormatterCreateDateFromString)(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
// Symbol CFDateFormatterSetFormat
typedef void (*__Troll_CFDateFormatterSetFormat)(CFDateFormatterRef formatter, CFStringRef formatString);
// Symbol CFDateFormatterSetProperty
typedef void (*__Troll_CFDateFormatterSetProperty)(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value);
// Symbol CFDictionaryAddValue
typedef void (*__Troll_CFDictionaryAddValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
// Symbol CFDictionaryCreateMutable
typedef CFMutableDictionaryRef (*__Troll_CFDictionaryCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
// Symbol CFDictionaryGetTypeID
typedef CFTypeID (*__Troll_CFDictionaryGetTypeID)(void);
// Symbol CFDictionaryGetValue
typedef const void *(*__Troll_CFDictionaryGetValue)(CFDictionaryRef theDict, const void *key);
// Symbol CFDictionarySetValue
typedef void (*__Troll_CFDictionarySetValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
// Symbol CFEqual
typedef Boolean (*__Troll_CFEqual)(CFTypeRef cf1, CFTypeRef cf2);
// Symbol CFGetTypeID
typedef CFTypeID (*__Troll_CFGetTypeID)(CFTypeRef cf);
// Symbol CFNumberCreate
typedef CFNumberRef (*__Troll_CFNumberCreate)(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
// Symbol CFPropertyListCreateWithData
typedef CFPropertyListRef (*__Troll_CFPropertyListCreateWithData)(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error);
// Symbol CFReadStreamClose
typedef void (*__Troll_CFReadStreamClose)(CFReadStreamRef stream);
// Symbol CFReadStreamCreateWithFile
typedef CFReadStreamRef (*__Troll_CFReadStreamCreateWithFile)(CFAllocatorRef alloc, CFURLRef fileURL);
// Symbol CFReadStreamOpen
typedef Boolean (*__Troll_CFReadStreamOpen)(CFReadStreamRef stream);
// Symbol CFReadStreamRead
typedef CFIndex (*__Troll_CFReadStreamRead)(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength);
// Symbol CFRelease
typedef void (*__Troll_CFRelease)(CFTypeRef cf);
// Symbol CFStringCompare
typedef CFComparisonResult (*__Troll_CFStringCompare)(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
// Symbol CFStringCreateWithBytes
typedef CFStringRef (*__Troll_CFStringCreateWithBytes)(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
// Symbol CFStringCreateWithCString
typedef CFStringRef (*__Troll_CFStringCreateWithCString)(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
// Symbol CFStringGetFileSystemRepresentation
typedef Boolean (*__Troll_CFStringGetFileSystemRepresentation)(CFStringRef string, char *buffer, CFIndex maxBufLen);
// Symbol CFTimeZoneCreateWithTimeIntervalFromGMT
typedef CFTimeZoneRef (*__Troll_CFTimeZoneCreateWithTimeIntervalFromGMT)(CFAllocatorRef allocator, CFTimeInterval ti);
// Symbol CFURLCreateCopyAppendingPathComponent
typedef CFURLRef (*__Troll_CFURLCreateCopyAppendingPathComponent)(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
// Symbol CFURLCreateFromFileSystemRepresentation
typedef CFURLRef (*__Troll_CFURLCreateFromFileSystemRepresentation)(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory);
// Symbol CFURLCreateWithFileSystemPathRelativeToBase
typedef CFURLRef (*__Troll_CFURLCreateWithFileSystemPathRelativeToBase)(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
// Symbol d2i_PKCS7_bio
typedef PKCS7 *(*__Troll_d2i_PKCS7_bio)(BIO *bp,PKCS7 **p7);
// Symbol d2i_X509_bio
typedef X509 *(*__Troll_d2i_X509_bio)(BIO *bp,X509 **x509);
// Symbol dlopen
typedef void *(*__Troll_dlopen)(const char * __path, int __mode);
// Symbol dlsym
typedef void *(*__Troll_dlsym)(void * __handle, const char * __symbol);
// Symbol EVP_DigestFinal
typedef int (*__Troll_EVP_DigestFinal)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
// Symbol EVP_DigestInit
typedef int (*__Troll_EVP_DigestInit)(EVP_MD_CTX *ctx, const EVP_MD *type);
// Symbol EVP_DigestUpdate
typedef int (*__Troll_EVP_DigestUpdate)(EVP_MD_CTX *ctx, const void *d, size_t cnt);
// Symbol EVP_get_digestbyname
typedef const EVP_MD *(*__Troll_EVP_get_digestbyname)(const char *name);
// Symbol EVP_MD_CTX_init
typedef void (*__Troll_EVP_MD_CTX_init)(EVP_MD_CTX *ctx);
// Symbol exit
typedef void (*__Troll_exit)(int status);
// Symbol glob
typedef int (*__Troll_glob)(const char * __restrict, int, int (*)(const char *, int), glob_t * __restrict);
// Symbol glob_b
typedef int (*__Troll_glob_b)(const char * __restrict, int, int (^)(const char *, int), glob_t * __restrict);
// Symbol globfree
typedef void (*__Troll_globfree)(glob_t *);
// Symbol IOBSDNameMatching
typedef CFMutableDictionaryRef (*__Troll_IOBSDNameMatching)(mach_port_t masterPort, uint32_t options, const char * bsdName);
// Symbol IOIteratorNext
typedef io_object_t (*__Troll_IOIteratorNext)(io_iterator_t iterator);
// Symbol IOMasterPort
typedef kern_return_t (*__Troll_IOMasterPort)(mach_port_t bootstrapPort, mach_port_t *masterPort);
// Symbol IOObjectRelease
typedef kern_return_t (*__Troll_IOObjectRelease)(io_object_t object);
// Symbol IORegistryEntryCreateCFProperty
typedef CFTypeRef (*__Troll_IORegistryEntryCreateCFProperty)(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options);
// Symbol IORegistryEntryGetParentEntry
typedef kern_return_t (*__Troll_IORegistryEntryGetParentEntry)(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t * parent);
// Symbol IOServiceGetMatchingServices
typedef kern_return_t (*__Troll_IOServiceGetMatchingServices)(mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t *existing);
// Symbol kCFBundleIdentifierKey
typedef const CFStringRef *__Troll_kCFBundleIdentifierKey;
// Symbol kCFDateFormatterTimeZone
typedef const CFStringRef *__Troll_kCFDateFormatterTimeZone;
// Symbol kCFTypeArrayCallBacks
typedef const CFArrayCallBacks *__Troll_kCFTypeArrayCallBacks;
// Symbol kCFTypeDictionaryKeyCallBacks
typedef const CFDictionaryKeyCallBacks *__Troll_kCFTypeDictionaryKeyCallBacks;
// Symbol kCFTypeDictionaryValueCallBacks
typedef const CFDictionaryValueCallBacks *__Troll_kCFTypeDictionaryValueCallBacks;
// Symbol kSecClass
typedef const CFTypeRef *__Troll_kSecClass;
// Symbol kSecClassCertificate
typedef const CFTypeRef *__Troll_kSecClassCertificate;
// Symbol kSecCodeInfoEntitlements
typedef const CFStringRef *__Troll_kSecCodeInfoEntitlements;
// Symbol kSecCodeInfoPList
typedef const CFStringRef *__Troll_kSecCodeInfoPList;
// Symbol kSecMatchLimit
typedef const CFTypeRef *__Troll_kSecMatchLimit;
// Symbol kSecMatchLimitAll
typedef const CFTypeRef *__Troll_kSecMatchLimitAll;
// Symbol kSecMatchSearchList
typedef const CFTypeRef *__Troll_kSecMatchSearchList;
// Symbol kSecMatchSubjectContains
typedef const CFTypeRef *__Troll_kSecMatchSubjectContains;
// Symbol kSecReturnRef
typedef const CFTypeRef *__Troll_kSecReturnRef;
// Symbol longjmp
typedef void (*__Troll_longjmp)(jmp_buf buf, int ret);
// Symbol OBJ_txt2obj
typedef ASN1_OBJECT *(*__Troll_OBJ_txt2obj)(const char *s, int no_name);
// Symbol objc_getClass
typedef id (*__Troll_objc_getClass)(const char *name);
// Symbol objc_msgSend
typedef id (*__Troll_objc_msgSend)(id theReceiver, SEL theSelector, ...);
// Symbol OpenSSL_add_all_digests
typedef void (*__Troll_OpenSSL_add_all_digests)();
// Symbol PKCS7_free
typedef void (*__Troll_PKCS7_free)(PKCS7 *a);
// Symbol PKCS7_get0_signers
typedef STACK_OF(X509) *(*__Troll_PKCS7_get0_signers)(PKCS7 *p7, STACK_OF(X509) *certs, int flags);
// Symbol PKCS7_verify
typedef int (*__Troll_PKCS7_verify)(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store, BIO *indata, BIO *out, int flags);
// Symbol SecCertificateCopyData
typedef CFDataRef (*__Troll_SecCertificateCopyData)(SecCertificateRef certificate);
// Symbol SecCodeCheckValidity
typedef OSStatus (*__Troll_SecCodeCheckValidity)(SecCodeRef code, SecCSFlags flags, SecRequirementRef requirement);
// Symbol SecCodeCheckValidityWithErrors
typedef OSStatus (*__Troll_SecCodeCheckValidityWithErrors)(SecCodeRef code, SecCSFlags flags, SecRequirementRef requirement, CFErrorRef *errors);
// Symbol SecCodeCopySelf
typedef OSStatus (*__Troll_SecCodeCopySelf)(SecCSFlags flags, SecCodeRef *self);
// Symbol SecCodeCopySigningInformation
typedef OSStatus (*__Troll_SecCodeCopySigningInformation)(SecStaticCodeRef code, SecCSFlags flags, CFDictionaryRef *information);
// Symbol SecItemCopyMatching
typedef OSStatus (*__Troll_SecItemCopyMatching)(CFDictionaryRef query, CFTypeRef *result);
// Symbol SecKeychainOpen
typedef OSStatus (*__Troll_SecKeychainOpen)(const char *pathName, SecKeychainRef *keychain);
// Symbol SecKeychainSearchCopyNext
typedef OSStatus (*__Troll_SecKeychainSearchCopyNext)(SecKeychainSearchRef searchRef, SecKeychainItemRef *itemRef);
// Symbol SecKeychainSearchCreateFromAttributes
typedef OSStatus (*__Troll_SecKeychainSearchCreateFromAttributes)(CFTypeRef keychainOrArray, SecItemClass itemClass, const SecKeychainAttributeList *attrList, SecKeychainSearchRef *searchRef);
// Symbol SecStaticCodeCreateWithPath
typedef OSStatus (*__Troll_SecStaticCodeCreateWithPath)(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode);
// Symbol sel_registerName
typedef SEL (*__Troll_sel_registerName)(const char *str);
// Symbol setjmp
typedef int (*__Troll_setjmp)(jmp_buf buf);
// Symbol SHA1
typedef unsigned char *(*__Troll_SHA1)(const unsigned char *d, unsigned long n, unsigned char *md);
// Symbol SHA1_Final
typedef int (*__Troll_SHA1_Final)(unsigned char *md, SHA_CTX *c);
// Symbol SHA1_Init
typedef int (*__Troll_SHA1_Init)(SHA_CTX *c);
// Symbol SHA1_Update
typedef int (*__Troll_SHA1_Update)(SHA_CTX *c, const void *data, unsigned long len);
// Symbol sk_free
typedef void (*__Troll_sk_free)(_STACK *);
// Symbol sk_num
typedef int (*__Troll_sk_num)(const _STACK *);
// Symbol sk_value
typedef void *(*__Troll_sk_value)(const _STACK *, int);
// Symbol strlen
typedef size_t (*__Troll_strlen)(const char *);
// Symbol strncmp
typedef int (*__Troll_strncmp)(const char *, const char *, size_t);
// Symbol X509_digest
typedef int (*__Troll_X509_digest)(const X509 *data,const EVP_MD *type,unsigned char *md, unsigned int *len);
// Symbol X509_free
typedef void (*__Troll_X509_free)(X509 *a);
// Symbol X509_get_ext_by_OBJ
typedef int (*__Troll_X509_get_ext_by_OBJ)(X509 *x,ASN1_OBJECT *obj,int lastpos);
// Symbol X509_NAME_get_text_by_NID
typedef int (*__Troll_X509_NAME_get_text_by_NID)(X509_NAME *name, int nid, char *buf,int len);
// Symbol X509_STORE_add_cert
typedef int (*__Troll_X509_STORE_add_cert)(X509_STORE *ctx, X509 *x);
// Symbol X509_STORE_free
typedef void (*__Troll_X509_STORE_free)(X509_STORE *v);
// Symbol X509_STORE_new
typedef X509_STORE *(*__Troll_X509_STORE_new)();


// Table for storing strings
static const char *Troll_Strings[639] = {
    // "" / M(None) / S(0) / L(0)
    "\xb2\xa0\x10\x98\x18\xef\x7c\xa8\x67\xa0\xb6\xa9\x28\x31\xfe\xf8\x17\x55\xbf\x74\xb0\x13\x59\x79\x38\x2c\xd6\x28\x53\x93\x97\xb0",
    // "receipt" / M(Rot) / S(127) / L(7)
    "\xf1\xe4\xe2\xe4\xe8\xef\xf3\x7f\x07\x37\x86\x93\xb4\x67\x7e\xac",
    // "CFURLCreateFromFileSystemRepresentation" / M(Xor4) / S(255) / L(39)
    "\x93\x96\x85\x82\x9c\x93\xa2\xb5\xb1\xa4\xb5\x96\xa2\xbf\xbd\x96\xb9\xbc\xb5\x83\xa9\xa3\xa4\xb5\xbd\x82\xb5\xa0\xa2\xb5\xa3\xb5\xbe\xa4\xb1\xa4\xb9\xbf\xbe\xd0\xa8\x52\xb2\x46\x60\x2c\x77\x4a",
    // "X509_digest" / M(Rot) / S(61) / L(11)
    "\x95\x72\x6d\x76\x9c\xa1\xa6\xa4\xa2\xb0\xb1\x3d\x18\x25\xe1\xe3",
    // "" / M(None) / S(0) / L(0)
    "\x74\x8d\xc4\x80\x00\xf7\xb0\xc7\x79\x65\xef\xc9\xc5\x4a\x98\xcc\x97\xcf\xef\x4e\x56\x5b\x0c\xbb\x9c\x43\x8e\x8b\xdd\xe6\xec\x0d",
    // "IOIteratorNext" / M(Xor4) / S(94) / L(14)
    "\xa9\xaf\xa9\x94\x85\x92\x81\x94\x8f\x92\xae\x85\x98\x94\xe0\xbc",
    // "" / M(None) / S(0) / L(0)
    "\x1c\x86\x4b\x39\xfe\xc9\x43\x7d\xaa\x9a\xd0\x43\x40\x23\xb9\xbe\x4a\x18\x40\x34\x13\x16\xea\xf7\x78\x51\x3f\x1a\x96\x9b\xbf\xbe",
    // "CFDataGetBytePtr" / M(Xor4) / S(50) / L(16)
    "\x11\x14\x16\x33\x26\x33\x15\x37\x26\x10\x2b\x26\x37\x02\x26\x20\x52",
    // "" / M(None) / S(0) / L(0)
    "\x92\xd4\x4e\x95\x60\xe1\xc3\xae\x72\x09\xc4\x0e\x36\xa7\x75\x23\x21\xab\x48\x60\xde\x9c\xf5\x77\x7b\x72\xad\xe3\xe9\x5e\x40\x6d",
    // "EVP_DigestInit" / M(Xor3) / S(132) / L(14)
    "\xd1\xc2\xc4\xcb\xd0\xfd\xf3\xf1\xe7\xe0\xdd\xfa\xfd\xe0\x94\x01",
    // "EVP_DigestFinal" / M(Rot) / S(127) / L(15)
    "\xc4\xd5\xcf\xde\xc3\xe8\xe6\xe4\xf2\xf3\xc5\xe8\xed\xe0\xeb\x7f",
    // "" / M(None) / S(0) / L(0)
    "\x67\xa1\xb0\xae\x44\xa6\x51\xbf\x30\x79\x36\xb0\x84\xda\xc0\x66\x39\xac\x3e\x03\xf2\x27\xd3\x09\x60\xbd\x8d\x02\xda\x6a\x2c\x2d",
    // "CFDataAppendBytes" / M(Xor3) / S(90) / L(17)
    "\x2f\x2a\x28\x0d\x18\x0d\x2d\x1c\x1c\x09\x02\x08\x2e\x15\x18\x09\x1f\x6c",
    // "kSecMatchLimit" / M(Xor4) / S(203) / L(14)
    "\xdb\xe3\xd5\xd3\xfd\xd1\xc4\xd3\xd8\xfc\xd9\xdd\xd9\xc4\xb0\x3c",
    // "kCFBundleIdentifierKey" / M(Xor2) / S(180) / L(22)
    "\xc8\xe0\xe5\xe1\xd6\xcd\xc7\xcf\xc6\xea\xc7\xc6\xcd\xd7\xca\xc5\xca\xc6\xd1\xe8\xc6\xda\xa3",
    // "SKReceiptRefreshRequest" / M(Xor3) / S(41) / L(23)
    "\x1a\x02\x1b\x2c\x2a\x2c\x20\x39\x3d\x1b\x2c\x2f\x3b\x2c\x3a\x21\x1b\x2c\x38\x3c\x2c\x3a\x3d\x49\x26\x63\x57\x01\xd8\xe4\x0c\x71",
    // "CFBundleVersion" / M(Xor4) / S(217) / L(15)
    "\xd3\xd6\xd2\xe5\xfe\xf4\xfc\xf5\xc6\xf5\xe2\xe3\xf9\xff\xfe\x90",
    // "" / M(None) / S(0) / L(0)
    "\xa5\x96\x6f\x87\x52\xe7\x9e\xf8\x2e\x3d\xb7\xe0\x7c\x3d\x84\x5d\x33\x1d\xbf\xc8\xd0\x22\x00\x94\xb6\xa7\xc5\x3b\x2b\xd5\x47\xa4",
    // "EVP_DigestFinal" / M(Xor4) / S(200) / L(15)
    "\xc5\xd6\xd0\xdf\xc4\xe9\xe7\xe5\xf3\xf4\xc6\xe9\xee\xe1\xec\x80",
    // "CFNumberCreate" / M(Xor2) / S(181) / L(14)
    "\xe6\xe3\xeb\xd0\xc8\xc7\xc0\xd7\xe6\xd7\xc0\xc4\xd1\xc0\xa5\xfd",
    // "EVP_DigestInit" / M(Xor3) / S(16) / L(14)
    "\x65\x76\x70\x7f\x64\x49\x47\x45\x53\x54\x69\x4e\x49\x54\x20\xca",
    // "IOMasterPort" / M(Xor2) / S(44) / L(12)
    "\x75\x73\x71\x5d\x4f\x48\x59\x4e\x6c\x53\x4e\x48\x3c\x5f\x3c\x59",
    // "CFArrayAppendValue" / M(Rot) / S(217) / L(18)
    "\x1c\x1f\x1a\x4b\x4b\x3a\x52\x1a\x49\x49\x3e\x47\x3d\x2f\x3a\x45\x4e\x3e\xd9",
    // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor4) / S(200) / L(48)
    "\x67\x1b\x31\x3b\x3c\x2d\x25\x67\x04\x21\x2a\x3a\x29\x3a\x31\x67\x0e\x3a\x29\x25\x2d\x3f\x27\x3a\x23\x3b\x67\x01\x07\x03\x21\x3c\x66\x2e\x3a\x29\x25\x2d\x3f\x27\x3a\x23\x67\x01\x07\x03\x21\x3c\x48",
    // "CFDictionaryGetValue" / M(Xor4) / S(129) / L(20)
    "\xd6\xd3\xd1\xfc\xf6\xe1\xfc\xfa\xfb\xf4\xe7\xec\xd2\xf0\xe1\xc3\xf4\xf9\xe0\xf0\x95",
    // "CFReadStreamRead" / M(Xor2) / S(5) / L(16)
    "\x57\x52\x46\x71\x75\x70\x47\x60\x66\x71\x75\x79\x46\x71\x75\x70\x14",
    // "SHA1_Init" / M(Xor2) / S(214) / L(9)
    "\x95\x8e\x87\xf7\x99\x8f\xa8\xaf\xb2\xc6\xdf\xd4\x23\x22\xe9\x6c",
    // "kCFTypeDictionaryValueCallBacks" / M(Rot) / S(7) / L(31)
    "\x72\x4a\x4d\x5b\x80\x77\x6c\x4b\x70\x6a\x7b\x70\x76\x75\x68\x79\x80\x5d\x68\x73\x7c\x6c\x4a\x68\x73\x73\x49\x68\x6a\x72\x7a\x07",
    // "" / M(None) / S(0) / L(0)
    "\x6e\x30\x78\x48\xbf\x95\x40\xff\x3d\x2c\x8b\x20\x6c\xcc\xfc\xbe\x3b\xa8\x91\x15\xff\xd7\x0b\xa5\x65\x34\x2d\xc6\x9f\xb9\x73\xd6",
    // "CFDictionaryCreateMutable" / M(Xor2) / S(118) / L(25)
    "\x17\x12\x10\x3d\x37\x20\x3d\x3b\x3a\x35\x26\x2d\x17\x26\x31\x35\x20\x31\x19\x21\x20\x35\x36\x38\x31\x54\x27\x75\x36\xf1\x3b\x65\xa0\xc7",
    // "" / M(None) / S(0) / L(0)
    "\x5c\xd7\x54\x31\xc0\x8e\xea\x42\xc9\x31\x4c\xac\x51\x60\x19\x4d\x85\x53\x1c\xb8\x5a\xbb\x65\x04\x5b\x6d\x6e\xab\xf4\x5a\xd5\x39",
    // "CC_SHA1_Init" / M(Rot) / S(125) / L(12)
    "\xc0\xc0\xdc\xd0\xc5\xbe\xae\xdc\xc6\xeb\xe6\xf1\x7d\xc7\x48\xbf",
    // "kCFDateFormatterTimeZone" / M(Xor3) / S(8) / L(24)
    "\x42\x6a\x6f\x6d\x48\x5d\x4c\x6f\x46\x5b\x44\x48\x5d\x5d\x4c\x5b\x7d\x40\x44\x4c\x73\x46\x47\x4c\x29\x6b\x9a\xdc\xc0\x8b\x84\x70\x7f",
    // "" / M(None) / S(0) / L(0)
    "\xb4\x93\x9e\x51\xe3\xee\xb4\x46\x5f\x1f\xbe\x8e\xaf\x8a\x9c\xdf\x26\xfb\xea\x1c\x15\x0d\xbb\x1e\x27\x7a\xef\xda\xa0\xdf\x24\xbe",
    // "IORegistryEntryGetParentEntry" / M(Rot) / S(24) / L(29)
    "\x61\x67\x6a\x7d\x7f\x81\x8b\x8c\x8a\x91\x5d\x86\x8c\x8a\x91\x5f\x7d\x8c\x68\x79\x8a\x7d\x86\x8c\x5d\x86\x8c\x8a\x91\x18\xb5\x80\x4a\x7b\x2b\xf6\x2a\x55",
    // "CFStringCompare" / M(Rot) / S(234) / L(15)
    "\x2d\x30\x3d\x5e\x5c\x53\x58\x51\x2d\x59\x57\x5a\x4b\x5c\x4f\xea",
    // "ASN1_get_object" / M(Xor2) / S(155) / L(15)
    "\xca\xd8\xc5\xba\xd4\xec\xee\xff\xd4\xe4\xe9\xe1\xee\xe8\xff\x8b",
    // "IORegistryEntryCreateCFProperty" / M(Rot) / S(16) / L(31)
    "\x59\x5f\x62\x75\x77\x79\x83\x84\x82\x89\x55\x7e\x84\x82\x89\x53\x82\x75\x71\x84\x75\x53\x56\x60\x82\x7f\x80\x75\x82\x84\x89\x10",
    // "CFRelease" / M(Xor2) / S(163) / L(9)
    "\xf0\xf5\xe1\xd6\xdf\xd6\xd2\xc0\xd6\xb3\x66\xf4\xb3\x34\x0f\x1b",
    // "setDelegate:" / M(Rot) / S(234) / L(12)
    "\x5d\x4f\x5e\x2e\x4f\x56\x4f\x51\x4b\x5e\x4f\x24\xea\xa1\x86\xf2",
    // "" / M(None) / S(0) / L(0)
    "\xb2\xf8\xd3\x7b\x18\xc5\x14\x11\x0c\xeb\x74\xfd\x45\x6f\x73\x9a\xd0\x9a\xa6\xd6\x94\x71\x6b\x8a\xf5\x18\x80\x4c\xe4\x41\xb7\x0c",
    // "" / M(None) / S(0) / L(0)
    "\x68\x79\xb6\x69\x48\x54\x14\x1e\xf9\x89\xb2\x4e\x4a\xf0\xf9\x4c\xfc\x36\x18\xd4\x1d\x1f\x76\xbf\x1f\x84\xd6\xc6\x7e\x42\x06\x34",
    // "" / M(None) / S(0) / L(0)
    "\xa0\x77\x3a\x2b\x70\x0d\x4c\x05\x77\xf9\xf0\xdf\x77\xba\x70\xf4\x12\x1e\x8c\xac\x1f\x28\x4c\xbc\x23\xb6\x30\x1b\xe5\x3a\xfe\x90",
    // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Xor2) / S(207) / L(39)
    "\xbc\xb9\xab\x96\x92\x9a\xa5\x90\x91\x9a\xbc\x8d\x9a\x9e\x8b\x9a\xa8\x96\x8b\x97\xab\x96\x92\x9a\xb6\x91\x8b\x9a\x8d\x89\x9e\x93\xb9\x8d\x90\x92\xb8\xb2\xab\xff\x24\x08\x28\x98\xba\xdd\xd5\xac",
    // "CFDataCreateMutable" / M(Xor1) / S(148) / L(19)
    "\xd7\xd2\xd0\xf5\xe0\xf5\xd7\xe6\xf1\xf5\xe0\xf1\xd9\xe1\xe0\xf5\xf6\xf8\xf1\x94",
    // "glob_b" / M(Xor3) / S(56) / L(6)
    "\x2f\x24\x27\x2a\x17\x2a\x48\x04\x5f\x9e\x58\xfa\x82\x79\x6e\x67",
    // "SecCodeCopySelf" / M(Xor3) / S(116) / L(15)
    "\xd7\xe1\xe7\xc7\xeb\xe0\xe1\xc7\xeb\xf4\xfd\xd7\xe1\xe8\xe2\x84",
    // "kCFBundleIdentifierKey" / M(Xor1) / S(23) / L(22)
    "\x7c\x54\x51\x55\x62\x79\x73\x7b\x72\x5e\x73\x72\x79\x63\x7e\x71\x7e\x72\x65\x5c\x72\x6e\x17",
    // "glob_b" / M(Xor2) / S(138) / L(6)
    "\xfd\xf6\xf5\xf8\xc5\xf8\x9a\xc5\x14\x4f\x0b\x99\xce\xa2\xa8\x17",
    // "IOMACAddress" / M(Rot) / S(172) / L(12)
    "\xf5\xfb\xf9\xed\xef\xed\x10\x10\x1e\x11\x1f\x1f\xac\x34\x01\x73",
    // "SecStaticCodeCreateWithPath" / M(Xor3) / S(217) / L(27)
    "\xae\x98\x9e\xae\x89\x9c\x89\x94\x9e\xbe\x92\x99\x98\xbe\x8f\x98\x9c\x89\x98\xaa\x94\x89\x95\xad\x9c\x89\x95\xfd\x4a\x8e\x15\x45\x37\x6e\xef\xc3",
    // "CFDictionarySetValue" / M(Xor1) / S(42) / L(20)
    "\x69\x6c\x6e\x43\x49\x5e\x43\x45\x44\x4b\x58\x53\x79\x4f\x5e\x7c\x4b\x46\x5f\x4f\x2a",
    // "Apple Root CA" / M(Xor3) / S(153) / L(13)
    "\xe8\xd9\xd9\xc5\xcc\x89\xfb\xc6\xc6\xdd\x89\xea\xe8\xa9\xc2\x3d",
    // "Apple Root CA" / M(Xor3) / S(131) / L(13)
    "\xd2\xe3\xe3\xff\xf6\xb3\xc1\xfc\xfc\xe7\xb3\xd0\xd2\x93\x6f\xd9",
    // "" / M(None) / S(0) / L(0)
    "\x13\x94\x96\xbb\xa6\x09\xed\x88\x1b\x6c\x40\x90\x96\x9e\x9c\x4f\x79\x0b\x55\xbc\x6e\xaf\x9b\xca\x7e\xd7\x70\xcb\x1c\xdd\xe1\x41",
    // "" / M(None) / S(0) / L(0)
    "\xfe\x3c\xfd\xf2\x61\x9e\x06\xa8\x25\xcf\xb8\xf9\x12\xa8\x97\x11\x6f\xe6\x57\x88\x50\xec\x60\x73\xe3\xe2\x2b\x83\x34\x34\xee\xf1",
    // "kSecClassCertificate" / M(Rot) / S(40) / L(20)
    "\x93\x7b\x8d\x8b\x6b\x94\x89\x9b\x9b\x6b\x8d\x9a\x9c\x91\x8e\x91\x8b\x89\x9c\x8d\x28",
    // "SHA1_Init" / M(Rot) / S(220) / L(9)
    "\x2f\x24\x1d\x0d\x3b\x25\x4a\x45\x50\xdc\xe9\xb0\x59\x53\x79\x5e",
    // "CFRelease" / M(Xor3) / S(214) / L(9)
    "\xa5\xa0\xb4\x83\x8a\x83\x87\x95\x83\xe6\xfa\x29\x37\x97\x88\x65",
    // "CFURLCreateFromFileSystemRepresentation" / M(Xor4) / S(81) / L(39)
    "\x73\x76\x65\x62\x7c\x73\x42\x55\x51\x44\x55\x76\x42\x5f\x5d\x76\x59\x5c\x55\x63\x49\x43\x44\x55\x5d\x62\x55\x40\x42\x55\x43\x55\x5e\x44\x51\x44\x59\x5f\x5e\x30\xab\xdc\x07\x40\x01\xb1\xc0\x37",
    // "kSecClass" / M(Xor1) / S(53) / L(9)
    "\x5e\x66\x50\x56\x76\x59\x54\x46\x46\x35\xb6\x40\x73\xfb\x9e\x9c",
    // "CFNumberCreate" / M(Xor3) / S(143) / L(14)
    "\xdc\xd9\xd1\xea\xf2\xfd\xfa\xed\xdc\xed\xfa\xfe\xeb\xfa\x9f\x26",
    // "SecCodeCopySelf" / M(Xor4) / S(21) / L(15)
    "\x03\x35\x33\x13\x3f\x34\x35\x13\x3f\x20\x29\x03\x35\x3c\x36\x50",
    // "BIO_write" / M(Xor1) / S(57) / L(9)
    "\x7b\x70\x76\x66\x4e\x4b\x50\x4d\x5c\x39\x53\x56\xfa\xd2\x70\x17",
    // "CFBundleVersion" / M(Rot) / S(124) / L(15)
    "\xbf\xc2\xbe\xf1\xea\xe0\xe8\xe1\xd2\xe1\xee\xef\xe5\xeb\xea\x7c",
    // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor1) / S(140) / L(48)
    "\xa3\xdf\xf5\xff\xf8\xe9\xe1\xa3\xc0\xe5\xee\xfe\xed\xfe\xf5\xa3\xca\xfe\xed\xe1\xe9\xfb\xe3\xfe\xe7\xff\xa3\xc5\xc3\xc7\xe5\xf8\xa2\xea\xfe\xed\xe1\xe9\xfb\xe3\xfe\xe7\xa3\xc5\xc3\xc7\xe5\xf8\x8c",
    // "" / M(None) / S(0) / L(0)
    "\xcb\x68\xb1\x1b\x26\xf5\x0c\x55\xaa\x9b\xca\xca\xe0\x5f\x5c\x4a\x36\x37\xc6\x13\xce\x0d\x23\x79\x80\xe0\xde\x14\xf4\x8b\x6b\xb4",
    // "d2i_PKCS7_bio" / M(Xor1) / S(106) / L(13)
    "\x0e\x58\x03\x35\x3a\x21\x29\x39\x5d\x35\x08\x03\x05\x6a\xd9\x98",
    // "" / M(None) / S(0) / L(0)
    "\x18\x6b\x8c\x43\x6b\xca\xb1\x21\x16\x41\x8f\xd1\xad\x92\x30\xfa\xfe\x41\xde\x7b\xca\x1b\x93\x5e\x1b\x8d\x58\x92\x93\xf2\x66\x9e",
    // "%02X:" / M(Xor1) / S(68) / L(5)
    "\x61\x74\x76\x1c\x7e\x44\x27\xc8\xa7\x18\xe4\x53\xa4\x99\x3f\xf1",
    // "d2i_X509_bio" / M(Xor2) / S(71) / L(12)
    "\x33\x65\x3e\x08\x0f\x62\x67\x6e\x08\x35\x3e\x38\x57\x32\xe3\x74",
    // "CFDateCreate" / M(Xor3) / S(10) / L(12)
    "\x59\x5c\x5e\x7b\x6e\x7f\x59\x68\x7f\x7b\x6e\x7f\x1a\x43\x93\xe6",
    // "CFDictionarySetValue" / M(Rot) / S(115) / L(20)
    "\xb6\xb9\xb7\xdc\xd6\xe7\xdc\xe2\xe1\xd4\xe5\xec\xc6\xd8\xe7\xc9\xd4\xdf\xe8\xd8\x73",
    // "longjmp" / M(Xor2) / S(74) / L(7)
    "\x36\x35\x34\x3d\x30\x37\x2a\x5a\x3d\x79\x7f\x2c\x9b\xcc\x24\x22",
    // "X509_STORE_new" / M(Rot) / S(176) / L(14)
    "\x08\xe5\xe0\xe9\x0f\x03\x04\xff\x02\xf5\x0f\x1e\x15\x27\xb0\xde",
    // "RTLD_MAIN_ONLY" / M(Xor2) / S(58) / L(14)
    "\x78\x7e\x66\x6e\x75\x67\x6b\x63\x64\x75\x65\x64\x66\x73\x2a\x80",
    // "EVP_MD_CTX_init" / M(Xor3) / S(122) / L(15)
    "\xcf\xdc\xda\xd5\xc7\xce\xd5\xc9\xde\xd2\xd5\xe3\xe4\xe3\xfe\x8a",
    // "EVP_DigestUpdate" / M(Xor1) / S(0) / L(16)
    "\x45\x56\x50\x5f\x44\x69\x67\x65\x73\x74\x55\x70\x64\x61\x74\x65\x00",
    // "exit" / M(Xor4) / S(21) / L(4)
    "\x35\x28\x39\x24\x50\x54\xd1\x15\xff\xbf\x07\xd6\x4a\x4c\x37\x99",
    // "CC_SHA1_Init" / M(Rot) / S(162) / L(12)
    "\xe5\xe5\x01\xf5\xea\xe3\xd3\x01\xeb\x10\x0b\x16\xa2\x1a\xbd\x6c",
    // "ASN1_get_object" / M(Xor2) / S(28) / L(15)
    "\x4d\x5f\x42\x3d\x53\x6b\x69\x78\x53\x63\x6e\x66\x69\x6f\x78\x0c",
    // "OBJ_txt2obj" / M(Xor1) / S(242) / L(11)
    "\xbd\xb0\xb8\xad\x86\x8a\x86\xc0\x9d\x90\x98\xf2\x02\xb2\xf5\xa5",
    // "" / M(None) / S(0) / L(0)
    "\xa0\xd1\xf3\xb5\x2f\x9c\xa9\xbf\x72\x9c\xab\x8f\x29\x49\x8f\xe8\xa3\xd2\x5d\xd2\xc5\x4b\xa5\xad\xc0\xbb\x18\xa0\xae\x39\xfb\xc6",
    // "" / M(None) / S(0) / L(0)
    "\x60\x0e\x3c\xc7\x19\xde\x9e\xc5\x34\x04\xb0\x03\x77\x6f\xb7\x22\xdf\x00\x22\x6a\xcc\x38\x5b\x31\xc4\xc7\x96\xa4\xd6\xa9\xe2\x51",
    // "CFBundleCopyBundleURL" / M(Xor2) / S(183) / L(21)
    "\xe2\xe7\xe3\xd4\xcf\xc5\xcd\xc4\xe2\xce\xd1\xd8\xe3\xd4\xcf\xc5\xcd\xc4\xf4\xf3\xed\xa1",
    // "c2i_ASN1_INTEGER" / M(Rot) / S(15) / L(16)
    "\x72\x41\x78\x6e\x50\x62\x5d\x40\x6e\x58\x5d\x63\x54\x56\x54\x61\x0f",
    // "" / M(None) / S(0) / L(0)
    "\xa6\x6c\xc2\x5a\xc2\x1b\xf9\xde\x1c\x64\xd1\xb8\xa0\xd6\x76\x2f\xaa\x7f\x5f\xd4\xff\x73\xd8\xcb\xfd\x61\x17\xaf\x97\xde\x23\x37",
    // "kSecMatchSubjectContains" / M(Xor1) / S(18) / L(24)
    "\x79\x41\x77\x71\x5f\x73\x66\x71\x7a\x41\x67\x70\x78\x77\x71\x66\x51\x7d\x7c\x66\x73\x7b\x7c\x61\x12\x25\x8b\xae\x28\x1a\x10\x5a\x85",
    // "" / M(None) / S(0) / L(0)
    "\x94\x50\x06\xad\xcd\x23\x9d\x22\x74\x4b\x46\x83\x9c\x79\xef\x4f\xf2\x97\x23\x1b\x29\xa2\xa5\xfc\xb8\x63\x78\xd2\x40\xce\xa3\x19",
    // "X509_STORE_add_cert" / M(Xor4) / S(206) / L(19)
    "\x40\x2d\x28\x21\x47\x4b\x4c\x57\x4a\x5d\x47\x79\x7c\x7c\x47\x7b\x7d\x6a\x6c\x18",
    // "%02x" / M(Xor1) / S(56) / L(4)
    "\x1d\x08\x0a\x40\x38\xef\x8f\x2b\x25\x0e\xbd\x77\x9d\xf6\x2d\x4f",
    // "pl.micropixels.NepTunes" / M(Rot) / S(68) / L(23)
    "\xb4\xb0\x72\xb1\xad\xa7\xb6\xb3\xb4\xad\xbc\xa9\xb0\xb7\x72\x92\xa9\xb4\x98\xb9\xb2\xa9\xb7\x44\x1f\x1f\xba\x56\x39\x2b\x6b\x09",
    // "" / M(None) / S(0) / L(0)
    "\xbd\x3f\x24\x3b\x83\x42\x6e\x4f\x90\x83\x8d\x1b\xa6\x91\x78\x01\x2d\xbd\x75\x32\xc7\xf7\x6f\x46\x84\xcd\x4f\xab\x44\x0a\x9a\xc3",
    // "c2i_ASN1_INTEGER" / M(Rot) / S(22) / L(16)
    "\x79\x48\x7f\x75\x57\x69\x64\x47\x75\x5f\x64\x6a\x5b\x5d\x5b\x68\x16",
    // "" / M(None) / S(0) / L(0)
    "\x8f\xe4\x1c\xaf\xc5\xb1\x14\x1b\x7f\xb6\x98\x49\xb7\x69\x6f\xc7\x88\x75\x02\xd8\xe1\x13\x8c\x0b\x9d\xad\xbd\xff\xee\xee\xbd\x8b",
    // "CFBundleIdentifier" / M(Xor1) / S(38) / L(18)
    "\x65\x60\x64\x53\x48\x42\x4a\x43\x6f\x42\x43\x48\x52\x4f\x40\x4f\x43\x54\x26",
    // "CFBundleGetValueForInfoDictionaryKey" / M(Xor3) / S(111) / L(36)
    "\xd7\xd2\xd6\xe1\xfa\xf0\xf8\xf1\xd3\xf1\xe0\xc2\xf5\xf8\xe1\xf1\xd2\xfb\xe6\xdd\xfa\xf2\xfb\xd0\xfd\xf7\xe0\xfd\xfb\xfa\xf5\xe6\xed\xdf\xf1\xed\x94",
    // "EVP_DigestUpdate" / M(Rot) / S(115) / L(16)
    "\xb8\xc9\xc3\xd2\xb7\xdc\xda\xd8\xe6\xe7\xc8\xe3\xd7\xd4\xe7\xd8\x73",
    // "" / M(None) / S(0) / L(0)
    "\x10\xde\xd4\x82\x2b\x2d\x23\x91\x78\xd2\xd0\x5e\x62\xe8\x95\x1a\xa3\x5e\xfa\xff\x6f\x33\x10\xe6\x37\x23\x22\xa6\x4d\x7e\x8d\x71",
    // "OBJ_txt2obj" / M(Xor4) / S(11) / L(11)
    "\xff\xf2\xfa\xef\xc4\xc8\xc4\x82\xdf\xd2\xda\xb0\xb5\xf5\x6c\x37",
    // "CFPropertyListCreateWithData" / M(Xor1) / S(31) / L(28)
    "\x5c\x59\x4f\x6d\x70\x6f\x7a\x6d\x6b\x66\x53\x76\x6c\x6b\x5c\x6d\x7a\x7e\x6b\x7a\x48\x76\x6b\x77\x5b\x7e\x6b\x7e\x1f\xd6\xb0\xfd\xe9\xca\x2d\xf6\x67",
    // "" / M(None) / S(0) / L(0)
    "\xde\x36\x57\xc7\x9c\xd1\x91\xde\x32\xfa\x7e\x6b\x10\x83\x43\x63\xa8\x05\xd6\x55\xbe\x32\xa5\x9c\xc4\xf7\x58\xb9\xb2\x31\xd7\x22",
    // "globfree" / M(Xor2) / S(21) / L(8)
    "\x62\x69\x6a\x67\x63\x77\x60\x60\x05\x7d\xab\x16\x22\x72\x8d\x9a",
    // "EVP_DigestUpdate" / M(Rot) / S(180) / L(16)
    "\xf9\x0a\x04\x13\xf8\x1d\x1b\x19\x27\x28\x09\x24\x18\x15\x28\x19\xb4",
    // "ASN1_INTEGER_free" / M(Xor4) / S(33) / L(17)
    "\x13\x01\x1c\x63\x0d\x1b\x1c\x06\x17\x15\x17\x00\x0d\x34\x20\x37\x37\x52",
    // "CFDataGetBytePtr" / M(Xor2) / S(78) / L(16)
    "\x1c\x19\x1b\x3e\x2b\x3e\x18\x3a\x2b\x1d\x26\x2b\x3a\x0f\x2b\x2d\x5f",
    // "" / M(None) / S(0) / L(0)
    "\x07\xa5\xfa\x76\x61\xea\xab\x94\x10\x42\x93\xab\xdf\xf6\xd6\xbc\xee\x57\xae\x93\xe6\xab\x6d\x44\x7a\xa0\x6c\x24\x42\xbd\xb3\xa8",
    // "CFArrayGetValueAtIndex" / M(Xor2) / S(185) / L(22)
    "\xed\xe8\xef\xdc\xdc\xcf\xd7\xe9\xcb\xda\xf8\xcf\xc2\xdb\xcb\xef\xda\xe7\xc0\xca\xcb\xd6\xae",
    // "alloc" / M(Xor1) / S(140) / L(5)
    "\xed\xe0\xe0\xe3\xef\x8c\x60\x32\xd8\xd9\x55\x27\xdd\x58\xc3\x7c",
    // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Rot) / S(1) / L(32)
    "\x7a\x7a\x7a\x7a\x28\x2e\x28\x4e\x4e\x28\x2e\x28\x65\x65\x28\x55\x28\x49\x49\x28\x3b\x28\x6e\x6e\x28\x3b\x28\x74\x74\x28\x5b\x28\x01",
    // "%02x" / M(Rot) / S(147) / L(4)
    "\xb8\xc3\xc5\x0b\x93\x0d\x0c\x9f\x42\x3d\xe7\x87\x3d\x0f\xdf\x42",
    // "" / M(None) / S(0) / L(0)
    "\xb0\x74\xc4\x59\x21\xee\x80\x4d\x2d\xa8\xe0\x48\xba\x66\x24\x75\x6f\x4e\x22\xbf\xa4\x2e\x2a\xa1\x72\xee\x17\xee\x2f\x49\xce\xc7",
    // "" / M(None) / S(0) / L(0)
    "\x92\x30\x73\xf7\xed\x23\x6b\xfc\xdb\x5a\xb5\xd2\xa2\xde\x16\xa7\x8c\xc0\x4d\x90\x68\x47\x0c\xc2\x98\x0c\x9d\x87\x1e\xcb\xe0\x82",
    // "CFStringGetFileSystemRepresentation" / M(Xor4) / S(85) / L(35)
    "\xb7\xb2\xa7\x80\x86\x9d\x9a\x93\xb3\x91\x80\xb2\x9d\x98\x91\xa7\x8d\x87\x80\x91\x99\xa6\x91\x84\x86\x91\x87\x91\x9a\x80\x95\x80\x9d\x9b\x9a\xf4",
    // "CFDictionarySetValue" / M(Xor4) / S(3) / L(20)
    "\x7c\x79\x7b\x56\x5c\x4b\x56\x50\x51\x5e\x4d\x46\x6c\x5a\x4b\x69\x5e\x53\x4a\x5a\x3f",
    // "" / M(None) / S(0) / L(0)
    "\xe8\xf4\x26\x5d\x37\xd0\xb3\xf7\x16\x00\x4b\x46\x07\xe3\xf2\x86\x4b\x79\xb6\x8a\x72\x1b\x9d\xdf\xd2\xfd\xc8\xfa\xe8\xcd\x80\xae",
    // "glob_b" / M(Xor2) / S(80) / L(6)
    "\x27\x2c\x2f\x22\x1f\x22\x40\xb7\x3b\xc4\x2f\x06\x64\x12\x59\x43",
    // "IOBSDNameMatching" / M(Xor2) / S(1) / L(17)
    "\x5a\x5c\x51\x40\x57\x5d\x72\x7e\x76\x5e\x72\x67\x70\x7b\x7a\x7d\x74\x13",
    // "pl.micropixels.NepTunes" / M(Xor2) / S(35) / L(23)
    "\x73\x6f\x2d\x6e\x6a\x60\x71\x6c\x73\x6a\x7b\x66\x6f\x70\x2d\x4d\x66\x73\x57\x76\x6d\x66\x70\x03\x08\xf6\x77\xe4\xec\xf8\xbf\x68",
    // "ASN1_OBJECT_free" / M(Xor1) / S(178) / L(16)
    "\xf3\xe1\xfc\x83\xed\xfd\xf0\xf8\xf7\xf1\xe6\xed\xd4\xc0\xd7\xd7\xb2",
    // "" / M(None) / S(0) / L(0)
    "\x6b\x9a\x53\xca\xc7\x0f\x78\x3c\xe0\x0f\x4d\xd0\x1f\xe1\xfb\xe5\x41\xee\x52\x5b\xeb\x46\x19\x0d\x86\x4e\xe0\xf4\x40\x43\xa9\xa2",
    // "CFArrayGetValueAtIndex" / M(Xor4) / S(20) / L(22)
    "\x8f\x8a\x8d\xbe\xbe\xad\xb5\x8b\xa9\xb8\x9a\xad\xa0\xb9\xa9\x8d\xb8\x85\xa2\xa8\xa9\xb4\xcc",
    // "" / M(None) / S(0) / L(0)
    "\x46\x4f\x11\xf5\xe3\x4e\x87\xb1\xb8\x0e\xc3\xfc\x3f\xf3\xb5\x88\x42\x27\xb2\x9a\x25\x28\x77\xe8\x2d\x71\x9f\x37\x67\x4f\x57\x4a",
    // "X509_digest" / M(Xor1) / S(67) / L(11)
    "\x1b\x76\x73\x7a\x1c\x27\x2a\x24\x26\x30\x37\x43\x07\xa6\x7e\xda",
    // "kSecMatchLimitAll" / M(Rot) / S(68) / L(17)
    "\xaf\x97\xa9\xa7\x91\xa5\xb8\xa7\xac\x90\xad\xb1\xad\xb8\x85\xb0\xb0\x44",
    // "sha1" / M(Xor1) / S(114) / L(4)
    "\x01\x1a\x13\x43\x72\x49\x37\xe3\x44\xa0\x0c\x7a\x17\x87\x65\xf0",
    // "BIO_free" / M(Xor4) / S(130) / L(8)
    "\x62\x69\x6f\x7f\x46\x52\x45\x45\x20\xce\x0d\xe8\x0f\x29\x3a\x6b",
    // "sk_num" / M(Xor4) / S(209) / L(6)
    "\x63\x7b\x4f\x7e\x65\x7d\x10\x4b\xf5\xc8\xc7\x6a\x27\x76\x6c\xc5",
    // "" / M(None) / S(0) / L(0)
    "\xe7\x39\x0e\x73\xf3\x8f\xc6\x1b\x26\x16\x8d\x41\x54\x05\xd0\xc6\xbb\xea\x6c\x63\x1a\x26\x4e\xe3\x56\xd6\xeb\x65\xac\x43\x5a\x42",
    // "" / M(None) / S(0) / L(0)
    "\xda\x3d\xd1\x7a\x19\x9e\xaa\x9c\x94\x29\x29\xc1\x18\x66\x40\x80\xd8\x11\x4f\x9a\x97\x2a\xc4\x1d\xf2\x43\xee\x51\xf6\x37\x22\x54",
    // "" / M(None) / S(0) / L(0)
    "\x86\x7c\xcb\x59\xb5\xac\xe7\x8a\x3c\xb9\x35\x0b\x23\x1a\xf6\xd5\x01\x64\x77\xad\x13\xd9\x2d\x53\xd9\xa4\x20\xd4\x53\x54\x22\xc0",
    // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor4) / S(244) / L(57)
    "\xc7\xbb\x91\x9b\x9c\x8d\x85\xc7\xa4\x81\x8a\x9a\x89\x9a\x91\xc7\xa3\x8d\x91\x8b\x80\x89\x81\x86\x9b\xc7\xbb\x91\x9b\x9c\x8d\x85\xba\x87\x87\x9c\xab\x8d\x9a\x9c\x81\x8e\x81\x8b\x89\x9c\x8d\x9b\xc6\x83\x8d\x91\x8b\x80\x89\x81\x86\xe8\xd6\xb0\xef\x5f\xce\x21\x1a\xb8",
    // "" / M(None) / S(0) / L(0)
    "\x54\x32\xb9\xed\xe1\x5d\x5f\xfe\x62\x78\xd8\x51\xf7\xec\xa1\xba\x3d\xfd\xda\xc6\x3b\x8a\x22\x88\x89\x90\x6b\xed\x9b\xdb\x01\x4e",
    // "" / M(None) / S(0) / L(0)
    "\x4f\xf1\xc5\xb5\x09\x03\x62\xcf\x8c\x0c\xfa\x43\x7f\xff\xd4\x3e\x71\x69\x48\x74\x2e\x4d\x57\xf8\xa7\xdb\x9c\x78\x9d\x73\x64\xb5",
    // "CFBundleShortVersionString" / M(Xor4) / S(49) / L(26)
    "\xf0\xf5\xf1\xc6\xdd\xd7\xdf\xd6\xe0\xdb\xdc\xc1\xc7\xe5\xd6\xc1\xc0\xda\xdc\xdd\xe0\xc7\xc1\xda\xdd\xd4\xb3\x00\xcd\x72\x1e\xca\x57\x8f\xf2",
    // "IOObjectRelease" / M(Xor1) / S(15) / L(15)
    "\x46\x40\x40\x6d\x65\x6a\x6c\x7b\x5d\x6a\x63\x6a\x6e\x7c\x6a\x0f",
    // "" / M(None) / S(0) / L(0)
    "\xc0\x16\xd5\x93\x68\x7d\x49\xed\xb6\x35\x72\xb9\xcb\x29\x62\xde\x66\xbb\xcd\x5f\xde\x7c\x6e\xcd\xe7\x7a\x7b\x34\x55\xe1\x34\x69",
    // "" / M(None) / S(0) / L(0)
    "\x4b\x4e\xbc\xd1\xf0\x1e\x74\xb7\xf9\x1a\x6c\x19\x69\x89\xc1\x77\x6c\x4e\x24\x08\x27\x48\x71\x0b\x4c\x1d\x90\x25\xf4\x29\x1e\xf2",
    // "RTLD_MAIN_ONLY" / M(Rot) / S(193) / L(14)
    "\x13\x15\x0d\x05\x20\x0e\x02\x0a\x0f\x20\x10\x0f\x0d\x1a\xc1\xe2",
    // "" / M(None) / S(0) / L(0)
    "\x14\x7e\xc2\xc8\xaa\x4e\x2c\xcf\x6f\x3d\x9b\x15\x12\x6b\x89\xc6\xb5\x39\xad\x3c\xc1\xed\xd9\x2c\x89\x95\xb2\x70\x74\xb1\x0d\xbc",
    // "_MASReceipt" / M(Xor2) / S(250) / L(11)
    "\xb5\xa7\xab\xb9\xb8\x8f\x89\x8f\x83\x9a\x9e\xea\xa8\x4e\xd6\x71",
    // "kCFBundleIdentifierKey" / M(Xor4) / S(71) / L(22)
    "\x0a\x22\x27\x23\x14\x0f\x05\x0d\x04\x28\x05\x04\x0f\x15\x08\x07\x08\x04\x13\x2a\x04\x18\x61",
    // "CFDateFormatterSetProperty" / M(Rot) / S(45) / L(26)
    "\x70\x73\x71\x8e\xa1\x92\x73\x9c\x9f\x9a\x8e\xa1\xa1\x92\x9f\x80\x92\xa1\x7d\x9f\x9c\x9d\x92\x9f\xa1\xa6\x2d\xe4\x46\x2e\x5e\x85\xe9\xc5\x9a",
    // "" / M(None) / S(0) / L(0)
    "\x62\x66\x5b\x26\xfb\x4b\x55\x32\x57\x1b\xe0\x7b\x12\xb6\xa2\x2a\x51\xff\x32\xf3\xbc\x39\xd2\xb0\xa9\x2a\x40\x99\x94\xc9\xe5\xc3",
    // "CFBundleGetValueForInfoDictionaryKey" / M(Xor2) / S(195) / L(36)
    "\xa5\xa0\xa4\x93\x88\x82\x8a\x83\xa1\x83\x92\xb0\x87\x8a\x93\x83\xa0\x89\x94\xaf\x88\x80\x89\xa2\x8f\x85\x92\x8f\x89\x88\x87\x94\x9f\xad\x83\x9f\xe6",
    // "CC_SHA1" / M(Xor2) / S(10) / L(7)
    "\x59\x59\x45\x49\x52\x5b\x2b\x1a\x03\xdf\xea\x88\xd7\xac\x1d\xd3",
    // "%02X" / M(Xor2) / S(71) / L(4)
    "\x72\x67\x65\x0f\x57\x6b\x0c\xbe\xd1\xd3\x17\x3c\x34\x4b\xac\xc5",
    // "CFDataGetLength" / M(Xor3) / S(185) / L(15)
    "\x8a\x8f\x8d\xa8\xbd\xa8\x8e\xac\xbd\x85\xac\xa7\xae\xbd\xa1\xc9",
    // "kCFTypeDictionaryKeyCallBacks" / M(Xor4) / S(26) / L(29)
    "\xb7\x9f\x9a\x88\xa5\xac\xb9\x98\xb5\xbf\xa8\xb5\xb3\xb2\xbd\xae\xa5\x97\xb9\xa5\x9f\xbd\xb0\xb0\x9e\xbd\xbf\xb7\xaf\xdc\xd2\x5d\x8b\x28\xe8\x2b\x00\xa0",
    // "X509_free" / M(Xor3) / S(82) / L(9)
    "\x3a\x57\x52\x5b\x3d\x04\x10\x07\x07\x62\xed\x86\x60\x03\x38\x3e",
    // "" / M(None) / S(0) / L(0)
    "\x7f\x92\xa2\x48\x69\x58\x05\x47\x07\xa0\x5a\x18\x3f\x06\x13\xbb\x33\x5b\x3c\x69\x25\xb6\xd7\xc3\x0a\x3e\xfb\xae\xc8\xe4\x7c\x6f",
    // "kSecCodeInfoEntitlements" / M(Xor1) / S(33) / L(24)
    "\x4a\x72\x44\x42\x62\x4e\x45\x44\x68\x4f\x47\x4e\x64\x4f\x55\x48\x55\x4d\x44\x4c\x44\x4f\x55\x52\x21\x20\x7b\xc2\x97\x6c\x3c\x28\xf4",
    // "CFStringCreateWithBytes" / M(Rot) / S(161) / L(23)
    "\xe4\xe7\xf4\x15\x13\x0a\x0f\x08\xe4\x13\x06\x02\x15\x06\xf8\x0a\x15\x09\xe3\x1a\x15\x06\x14\xa1\xf3\x36\x4d\xa3\x12\x94\x29\xba",
    // "" / M(None) / S(0) / L(0)
    "\x0b\xaf\x99\x87\x5d\xc7\x82\xd5\x6a\x28\x94\xbb\x83\x36\x47\x5a\xc5\x35\x64\x72\x96\x31\x7e\xa9\x0b\xa9\x3d\x78\x53\x3b\x0f\x9e",
    // "CFURLCreateFromFileSystemRepresentation" / M(Xor4) / S(181) / L(39)
    "\xb3\xb6\xa5\xa2\xbc\xb3\x82\x95\x91\x84\x95\xb6\x82\x9f\x9d\xb6\x99\x9c\x95\xa3\x89\x83\x84\x95\x9d\xa2\x95\x80\x82\x95\x83\x95\x9e\x84\x91\x84\x99\x9f\x9e\xf0\x50\x8f\xcf\x31\x6b\x78\xf3\x58",
    // "en0" / M(Xor3) / S(25) / L(3)
    "\x4c\x47\x19\x29\x5d\xd8\x94\x57\x0f\x56\x31\xc0\xf0\xb8\xcb\x9e",
    // "%02X:" / M(Xor3) / S(177) / L(5)
    "\xe4\xf1\xf3\x99\xfb\xc1\x1b\xa1\x7b\x12\x92\x80\x56\xad\xfc\x97",
    // "" / M(None) / S(0) / L(0)
    "\x57\xb2\xfd\x3c\xdc\x33\xbc\x24\xd8\x05\x28\x02\xf8\xd3\x0a\x2d\x09\x2a\xb5\x53\x75\x4e\x09\x02\xca\xb4\xdc\x14\x0f\x5b\x00\x8f",
    // "SecCodeCheckValidity" / M(Rot) / S(73) / L(20)
    "\x9c\xae\xac\x8c\xb8\xad\xae\x8c\xb1\xae\xac\xb4\x9f\xaa\xb5\xb2\xad\xb2\xbd\xc2\x49",
    // "CFBundleUnloadExecutable" / M(Rot) / S(80) / L(24)
    "\x93\x96\x92\xc5\xbe\xb4\xbc\xb5\xa5\xbe\xbc\xbf\xb1\xb4\x95\xc8\xb5\xb3\xc5\xc4\xb1\xb2\xbc\xb5\x50\x63\x29\xbd\x15\xc5\x7a\x75\xf1",
    // "SecStaticCodeCreateWithPath" / M(Xor3) / S(8) / L(27)
    "\x7f\x49\x4f\x7f\x58\x4d\x58\x45\x4f\x6f\x43\x48\x49\x6f\x5e\x49\x4d\x58\x49\x7b\x45\x58\x44\x7c\x4d\x58\x44\x2c\x8d\x6e\x0f\x04\xa7\x31\x75\x20",
    // "sk_num" / M(Xor2) / S(241) / L(6)
    "\x92\x8a\xbe\x8f\x94\x8c\xe1\x22\x5c\xea\x08\x7d\xd6\x09\xda\xf7",
    // "CFAbsoluteTimeGetCurrent" / M(Rot) / S(221) / L(24)
    "\x20\x23\x1e\x3f\x50\x4c\x49\x52\x51\x42\x31\x46\x4a\x42\x24\x42\x51\x20\x52\x4f\x4f\x42\x4b\x51\xdd\x64\xed\x42\x5a\x30\x76\xbe\x5f",
    // "X509_digest" / M(Rot) / S(203) / L(11)
    "\x23\x00\xfb\x04\x2a\x2f\x34\x32\x30\x3e\x3f\xcb\x5e\x54\x98\xf0",
    // "EVP_get_digestbyname" / M(Xor4) / S(172) / L(20)
    "\x59\x4a\x4c\x43\x7b\x79\x68\x43\x78\x75\x7b\x79\x6f\x68\x7e\x65\x72\x7d\x71\x79\x1c",
    // "CFDataAppendBytes" / M(Xor2) / S(192) / L(17)
    "\x91\x94\x96\xb3\xa6\xb3\x93\xa2\xa2\xb7\xbc\xb6\x90\xab\xa6\xb7\xa1\xd2",
    // "SHA1_Update" / M(Xor1) / S(88) / L(11)
    "\x0b\x10\x19\x69\x07\x0d\x28\x3c\x39\x2c\x3d\x58\x0b\x9a\xcc\x28",
    // "SecKeychainSearchCreateFromAttributes" / M(Xor2) / S(152) / L(37)
    "\xed\xdb\xdd\xf5\xdb\xc7\xdd\xd6\xdf\xd7\xd0\xed\xdb\xdf\xcc\xdd\xd6\xfd\xcc\xdb\xdf\xca\xdb\xf8\xcc\xd1\xd3\xff\xca\xca\xcc\xd7\xdc\xcb\xca\xdb\xcd\xbe",
    // "CFStringCreateWithBytes" / M(Xor4) / S(156) / L(23)
    "\xc3\xc6\xd3\xf4\xf2\xe9\xee\xe7\xc3\xf2\xe5\xe1\xf4\xe5\xd7\xe9\xf4\xe8\xc2\xf9\xf4\xe5\xf3\x80\x19\x0f\xe5\x32\x7b\x7b\x5c\x86",
    // "" / M(None) / S(0) / L(0)
    "\xed\xa2\xe2\x45\x27\x35\xb0\x63\x00\x73\x19\xa8\x71\x6e\x15\xd9\x78\x1a\x02\x41\x72\xab\xe2\x88\x32\x96\xcf\x14\x75\x9b\x5c\x96",
    // "kSecCodeInfoPList" / M(Xor4) / S(242) / L(17)
    "\x6f\x57\x61\x67\x47\x6b\x60\x61\x4d\x6a\x62\x6b\x54\x48\x6d\x77\x70\x04",
    // "kCFTypeDictionaryKeyCallBacks" / M(Xor1) / S(70) / L(29)
    "\x2d\x05\x00\x12\x3f\x36\x23\x02\x2f\x25\x32\x2f\x29\x28\x27\x34\x3f\x0d\x23\x3f\x05\x27\x2a\x2a\x04\x27\x25\x2d\x35\x46\x97\x4f\xa0\x72\x0b\x44\x28\x7b",
    // "IOMasterPort" / M(Xor2) / S(62) / L(12)
    "\x67\x61\x63\x4f\x5d\x5a\x4b\x5c\x7e\x41\x5c\x5a\x2e\xca\xd6\x7d",
    // "kSecCodeInfoEntitlements" / M(Xor4) / S(235) / L(24)
    "\x20\x18\x2e\x28\x08\x24\x2f\x2e\x02\x25\x2d\x24\x0e\x25\x3f\x22\x3f\x27\x2e\x26\x2e\x25\x3f\x38\x4b\x16\xad\x23\x47\x81\xd3\xc1\x6a",
    // "en0" / M(Xor2) / S(125) / L(3)
    "\x08\x03\x5d\x6d\x85\x8f\x98\x2d\x6c\xca\x23\x18\x43\x83\xad\x3c",
    // "kSecMatchLimitAll" / M(Rot) / S(48) / L(17)
    "\x9b\x83\x95\x93\x7d\x91\xa4\x93\x98\x7c\x99\x9d\x99\xa4\x71\x9c\x9c\x30",
    // "" / M(None) / S(0) / L(0)
    "\xd9\xe7\xc9\x15\x6c\x81\xa7\xbc\xe7\x9f\x5b\xf4\x02\x13\x0c\x5a\x92\xb9\x8c\x04\x13\x37\x43\x62\x53\xa1\xa4\xfa\xaa\x73\x6f\x9b",
    // "SecItemCopyMatching" / M(Xor3) / S(154) / L(19)
    "\xfd\xcb\xcd\xe7\xda\xcb\xc3\xed\xc1\xde\xd7\xe3\xcf\xda\xcd\xc6\xc7\xc0\xc9\xae",
    // "BIO_s_mem" / M(Xor1) / S(82) / L(9)
    "\x10\x1b\x1d\x0d\x21\x0d\x3f\x37\x3f\x52\x84\x12\x2b\xe7\xbf\x70",
    // "" / M(None) / S(0) / L(0)
    "\x8a\x76\x85\xa3\x13\xad\x3f\x83\x3e\x0d\x10\x24\x49\xca\x5f\x1f\x21\x9f\x64\x4d\xb3\x4a\x1c\xbd\x8a\x63\xde\xa4\xb6\xf0\x90\x8c",
    // "" / M(None) / S(0) / L(0)
    "\x05\xdf\x20\x78\xa3\xd8\xb2\xfb\x6e\xd0\x82\xd5\x72\x29\xfe\x60\x46\x2a\x18\x3b\xc5\xed\x8b\x98\x4f\xa6\x73\xf0\xe3\x05\x16\x9c",
    // "CFArrayCreateMutable" / M(Xor2) / S(174) / L(20)
    "\xf8\xfd\xfa\xc9\xc9\xda\xc2\xf8\xc9\xde\xda\xcf\xde\xf6\xce\xcf\xda\xd9\xd7\xde\xbb",
    // "CFDateFormatterSetProperty" / M(Rot) / S(216) / L(26)
    "\x1b\x1e\x1c\x39\x4c\x3d\x1e\x47\x4a\x45\x39\x4c\x4c\x3d\x4a\x2b\x3d\x4c\x28\x4a\x47\x48\x3d\x4a\x4c\x51\xd8\xc7\xe6\x08\x58\x5f\x9d\xf1\x80",
    // "CFEqual" / M(Xor1) / S(32) / L(7)
    "\x63\x66\x65\x51\x55\x41\x4c\x20\x05\x96\x3e\x44\x37\xdb\xf6\x85",
    // "CC_SHA1_Init" / M(Xor1) / S(44) / L(12)
    "\x6f\x6f\x73\x7f\x64\x6d\x1d\x73\x65\x42\x45\x58\x2c\x80\xe3\xaf",
    // "CFDateFormatterSetFormat" / M(Xor4) / S(48) / L(24)
    "\x73\x76\x74\x51\x44\x55\x76\x5f\x42\x5d\x51\x44\x44\x55\x42\x63\x55\x44\x76\x5f\x42\x5d\x51\x44\x30\x46\x14\x07\xf0\x5b\x70\x32\xed",
    // "CFDataGetLength" / M(Xor1) / S(214) / L(15)
    "\x95\x90\x92\xb7\xa2\xb7\x91\xb3\xa2\x9a\xb3\xb8\xb1\xa2\xbe\xd6",
    // "" / M(None) / S(0) / L(0)
    "\x96\xb2\xe7\xf5\xcd\x84\x55\xd8\x5e\x7a\x74\xbb\x95\x0f\x4d\x59\xbf\x4d\x90\x63\x3d\xe9\xc8\x4b\xdc\xf8\xef\x1f\x82\x6c\x5b\xa7",
    // "" / M(None) / S(0) / L(0)
    "\x1e\x45\xa8\xc7\xea\x98\xb3\x3c\x7f\x1f\x88\x71\x9c\x24\xba\xa8\xd2\xb0\x3f\xe7\x15\x79\x55\x3f\xd6\xd3\xcd\x2d\xba\x31\x95\x87",
    // "CC_SHA1_Final" / M(Xor4) / S(249) / L(13)
    "\xd3\xd3\xcf\xc3\xd8\xd1\xa1\xcf\xd6\xf9\xfe\xf1\xfc\x90\x43\x7e",
    // "%02x:" / M(Xor3) / S(26) / L(5)
    "\x0f\x1a\x18\x52\x10\x2a\x92\x23\x44\x8d\x12\x3b\x57\xf4\xa9\xd1",
    // "" / M(None) / S(0) / L(0)
    "\x30\x6e\xb4\x68\x48\x19\x02\x4e\x81\xc7\x78\x8b\xb3\xaa\xd7\x5c\x2b\xad\x4f\xd5\xd9\x9f\x96\xca\x01\x75\xbd\x85\x08\xd6\xd3\xc3",
    // "Contents" / M(Xor2) / S(220) / L(8)
    "\x8f\xa3\xa2\xb8\xa9\xa2\xb8\xbf\xcc\xf2\x66\xd3\x47\x5c\xa4\xf8",
    // "CFArrayGetCount" / M(Rot) / S(250) / L(15)
    "\x3d\x40\x3b\x6c\x6c\x5b\x73\x41\x5f\x6e\x3d\x69\x6f\x68\x6e\xfa",
    // "" / M(None) / S(0) / L(0)
    "\xe6\xf8\xe0\x2e\x92\x74\x8b\x99\x81\x51\xac\xbb\xe4\xf3\x8e\x1e\x45\xe3\xf7\xca\x0f\x9d\x51\x1d\x4f\xc8\x4b\xdc\x58\xfa\x36\xcb",
    // "exit" / M(Xor4) / S(68) / L(4)
    "\x25\x38\x29\x34\x40\xee\x1e\xde\x0b\xb7\x80\x40\x2f\x5d\x5c\x22",
    // "CFURLCreateCopyAppendingPathComponent" / M(Xor1) / S(160) / L(37)
    "\xe3\xe6\xf5\xf2\xec\xe3\xd2\xc5\xc1\xd4\xc5\xe3\xcf\xd0\xd9\xe1\xd0\xd0\xc5\xce\xc4\xc9\xce\xc7\xf0\xc1\xd4\xc8\xe3\xcf\xcd\xd0\xcf\xce\xc5\xce\xd4\xa0",
    // "IOObjectRelease" / M(Xor1) / S(103) / L(15)
    "\x2e\x28\x28\x05\x0d\x02\x04\x13\x35\x02\x0b\x02\x06\x14\x02\x67",
    // "PKCS7_get0_signers" / M(Xor3) / S(244) / L(18)
    "\x57\x4c\x44\x54\x30\x58\x60\x62\x73\x37\x58\x74\x6e\x60\x69\x62\x75\x74\x07",
    // "kSecClassCertificate" / M(Xor4) / S(243) / L(20)
    "\x84\xbc\x8a\x8c\xac\x83\x8e\x9c\x9c\xac\x8a\x9d\x9b\x86\x89\x86\x8c\x8e\x9b\x8a\xef",
    // "." / M(Xor3) / S(55) / L(1)
    "\x69\x47\xea\x40\xd6\x09\x18\xc1\x80\xba\x2e\xb3\xcd\x00\x04\xc9",
    // "" / M(None) / S(0) / L(0)
    "\x3b\xea\xe7\x91\x61\x61\x29\x59\x4c\x22\xab\xb1\x2c\x79\x46\x82\xe6\x65\x7d\xad\xe3\x8e\x6b\xaf\xcc\x0c\xdb\xf9\x5a\x95\x07\x98",
    // "" / M(None) / S(0) / L(0)
    "\x5b\x5b\x98\x59\x6c\x46\x7f\x77\x95\x2d\xd1\x47\x97\xc8\x15\x93\x92\x8b\x18\xd2\x6d\x3d\xa0\x73\x84\xac\x9c\xe9\x17\x41\xf9\x2c",
    // "X509_free" / M(Xor4) / S(128) / L(9)
    "\x58\x35\x30\x39\x5f\x66\x72\x65\x65\x00\x7d\x43\x90\x35\xda\xd6",
    // "CC_SHA1" / M(Xor2) / S(194) / L(7)
    "\x91\x91\x8d\x81\x9a\x93\xe3\xd2\xee\x10\x5a\x71\xa1\x0a\x59\x4a",
    // "_MASReceipt" / M(Rot) / S(136) / L(11)
    "\xe7\xd5\xc9\xdb\xda\xed\xeb\xed\xf1\xf8\xfc\x88\xb9\xa5\xe2\x7b",
    // "CFDateCreate" / M(Xor3) / S(127) / L(12)
    "\xcc\xc9\xcb\xee\xfb\xea\xcc\xfd\xea\xee\xfb\xea\x8f\x6b\x38\xa7",
    // "sk_value" / M(Xor4) / S(135) / L(8)
    "\x03\x1b\x2f\x06\x11\x1c\x05\x15\x70\xcf\x96\x1f\x8b\xbd\x08\x4f",
    // "" / M(None) / S(0) / L(0)
    "\xd5\xab\xb0\x46\x57\xb9\xab\x51\xc3\xff\xd4\xc2\xd5\x0f\xab\xdb\x4e\xd4\xb2\xd5\xc8\x3f\x9c\xf6\x19\x03\x14\xa2\x63\xe3\x41\x3c",
    // "start" / M(Xor4) / S(74) / L(5)
    "\xd3\xd4\xc1\xd2\xd4\xa0\xb2\xaf\xb5\xc4\x06\xd6\xc3\x55\x1e\x37",
    // "1.2.840.113635.100.6.11.1" / M(Xor3) / S(97) / L(25)
    "\xb2\xad\xb1\xad\xbb\xb7\xb3\xad\xb2\xb2\xb0\xb5\xb0\xb6\xad\xb2\xb3\xb3\xad\xb5\xad\xb2\xb2\xad\xb2\x83\x0c\x82\x4a\xb6\x68\x4f\x9d\xe2",
    // "" / M(None) / S(0) / L(0)
    "\x1b\xa0\xc2\x6c\x10\x3c\x22\x7a\x94\x07\xf4\x79\x4f\xfe\xb9\x82\xc1\x57\x2e\x52\x26\x45\x9d\x8c\x24\x54\x6d\x27\x1d\x60\xdf\x3e",
    // "sha1" / M(Xor4) / S(169) / L(4)
    "\xe3\xf8\xf1\xa1\x90\x8b\x18\xd4\x92\xf7\xff\xaf\x98\x80\xc3\xbf",
    // "CFDataCreateMutable" / M(Xor4) / S(237) / L(19)
    "\xc7\xc2\xc0\xe5\xf0\xe5\xc7\xf6\xe1\xe5\xf0\xe1\xc9\xf1\xf0\xe5\xe6\xe8\xe1\x84",
    // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor4) / S(8) / L(43)
    "\xe3\xe6\xf5\xf2\xec\xe3\xd2\xc5\xc1\xd4\xc5\xf7\xc9\xd4\xc8\xe6\xc9\xcc\xc5\xf3\xd9\xd3\xd4\xc5\xcd\xf0\xc1\xd4\xc8\xf2\xc5\xcc\xc1\xd4\xc9\xd6\xc5\xf4\xcf\xe2\xc1\xd3\xc5\xa0\x8c\xab\x9f\xdd\x38\x0b\xba\xc2",
    // "BIO_new" / M(Xor1) / S(67) / L(7)
    "\x01\x0a\x0c\x1c\x2d\x26\x34\x43\x51\x98\xd3\x73\xe2\x60\xa2\xa2",
    // "" / M(None) / S(0) / L(0)
    "\x4d\x52\x4f\x91\xe3\xc6\x60\x27\x95\x4e\xd7\xa5\xd7\x54\xab\x07\x3c\xe4\x00\xe0\x61\xb2\xbb\x36\xc6\xcd\x0f\x7d\x5d\xc4\x3d\xe9",
    // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor2) / S(0) / L(59)
    "\x72\x75\x7e\x75\x01\x7e\x71\x06\x7e\x72\x72\x7e\x76\x07\x7e\x71\x7d\x7e\x77\x05\x7e\x74\x7c\x7e\x02\x02\x7e\x71\x7c\x7e\x00\x75\x7e\x70\x05\x7e\x01\x76\x7e\x76\x70\x7e\x71\x76\x7e\x00\x75\x7e\x7d\x7c\x7e\x00\x02\x7e\x72\x07\x7e\x72\x74\x44\xcd\x2a\x70\x59\x4c\xb7\x41\x47",
    // "" / M(None) / S(0) / L(0)
    "\x0c\xd7\x3b\xba\x14\xef\x39\x1b\x8a\xfb\x59\x74\xe9\xdc\xa0\xef\xa0\x9c\x90\xe9\x28\x47\xee\xf1\xc9\x69\xef\x29\xf7\xd2\xe0\xfa",
    // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor2) / S(36) / L(43)
    "\x53\x56\x45\x42\x5c\x53\x62\x75\x71\x64\x75\x47\x79\x64\x78\x56\x79\x7c\x75\x43\x69\x63\x64\x75\x7d\x40\x71\x64\x78\x42\x75\x7c\x71\x64\x79\x66\x75\x44\x7f\x52\x71\x63\x75\x10\x6a\x16\xb0\x2b\xc0\x6d\x63\x3c",
    // "objc_msgSend" / M(Xor2) / S(37) / L(12)
    "\x5a\x57\x5f\x56\x6a\x58\x46\x52\x66\x50\x5b\x51\x35\xbb\xe0\x50",
    // "" / M(None) / S(0) / L(0)
    "\x3c\xc1\xec\x8b\x57\x36\x32\xe1\x91\x02\xfe\x78\xa5\xf5\x62\x0a\x6d\xc1\x5c\x9d\x90\xcc\xb4\x98\xc5\x0c\xb4\x8c\x71\x8d\xff\xbf",
    // "CC_SHA1_Final" / M(Xor3) / S(97) / L(13)
    "\x32\x32\x2e\x22\x39\x30\x40\x2e\x37\x18\x1f\x10\x1d\x71\x55\xf8",
    // "EVP_DigestInit" / M(Rot) / S(237) / L(14)
    "\x32\x43\x3d\x4c\x31\x56\x54\x52\x60\x61\x36\x5b\x56\x61\xed\xab",
    // "" / M(None) / S(0) / L(0)
    "\x9e\xa4\x8d\x49\x4c\x95\x08\xe6\xdb\x4c\xf8\x50\xe5\xba\xb8\xc9\x6e\x8a\x76\xcd\x43\xcc\x60\x5d\x9a\xa9\x6b\xbe\x19\xef\xcb\x3b",
    // "CFPropertyListCreateWithData" / M(Rot) / S(150) / L(28)
    "\xd9\xdc\xe6\x08\x05\x06\xfb\x08\x0a\x0f\xe2\xff\x09\x0a\xd9\x08\xfb\xf7\x0a\xfb\xed\xff\x0a\xfe\xda\xf7\x0a\xf7\x96\x07\x2e\x0a\xc5\xc5\x8e\xf5\xef",
    // "CFBundleGetValueForInfoDictionaryKey" / M(Xor1) / S(127) / L(36)
    "\x3c\x39\x3d\x0a\x11\x1b\x13\x1a\x38\x1a\x0b\x29\x1e\x13\x0a\x1a\x39\x10\x0d\x36\x11\x19\x10\x3b\x16\x1c\x0b\x16\x10\x11\x1e\x0d\x06\x34\x1a\x06\x7f",
    // "CFReadStreamCreateWithFile" / M(Xor3) / S(125) / L(26)
    "\xe3\xe6\xf2\xc5\xc1\xc4\xf3\xd4\xd2\xc5\xc1\xcd\xe3\xd2\xc5\xc1\xd4\xc5\xf7\xc9\xd4\xc8\xe6\xc9\xcc\xc5\xa0\xbc\x61\xb7\xdf\x1d\x5a\xfa\x07",
    // "CFDataCreate" / M(Rot) / S(203) / L(12)
    "\x0e\x11\x0f\x2c\x3f\x2c\x0e\x3d\x30\x2c\x3f\x30\xcb\x81\xc0\xd2",
    // "sel_registerName" / M(Xor1) / S(12) / L(16)
    "\x7f\x69\x60\x53\x7e\x69\x6b\x65\x7f\x78\x69\x7e\x42\x6d\x61\x69\x0c",
    // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor2) / S(222) / L(59)
    "\xac\xab\xa0\xab\xff\xa0\xaf\xf8\xa0\xac\xac\xa0\xa8\xf9\xa0\xaf\xa3\xa0\xa9\xfb\xa0\xaa\xa2\xa0\xfc\xfc\xa0\xaf\xa2\xa0\xfe\xab\xa0\xae\xfb\xa0\xff\xa8\xa0\xa8\xae\xa0\xaf\xa8\xa0\xfe\xab\xa0\xa3\xa2\xa0\xfe\xfc\xa0\xac\xf9\xa0\xac\xaa\x9a\xbc\x0c\xe3\x26\x00\xff\x35\xf5",
    // "kSecReturnRef" / M(Xor3) / S(225) / L(13)
    "\x9a\xa2\x94\x92\xa3\x94\x85\x84\x83\x9f\xa3\x94\x97\xf1\x6d\x0e",
    // "SHA1_Final" / M(Xor3) / S(153) / L(10)
    "\xfa\xe1\xe8\x98\xf6\xef\xc0\xc7\xc8\xc5\xa9\x0a\x97\xf5\x29\x83",
    // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Rot) / S(181) / L(40)
    "\xeb\xe6\xe6\x1a\xea\x17\xeb\xeb\xe7\x18\xea\xee\xe8\x16\xe5\xed\x1b\x1b\xea\xed\x19\xe6\xe9\x16\x1a\xe7\xe7\xe9\xea\xe7\x19\xe6\xee\xed\x19\x1b\xeb\x18\xeb\xe5\xb5\x2c\xd2\x4d\x66\x84\x07\x1a\x62",
    // "IOServiceGetMatchingServices" / M(Rot) / S(84) / L(28)
    "\x9d\xa3\xa7\xb9\xc6\xca\xbd\xb7\xb9\x9b\xb9\xc8\xa1\xb5\xc8\xb7\xbc\xbd\xc2\xbb\xa7\xb9\xc6\xca\xbd\xb7\xb9\xc7\x54\xac\x83\x9b\xee\x0f\x23\xbc\x6b",
    // "SecKeychainSearchCreateFromAttributes" / M(Xor4) / S(140) / L(37)
    "\x9b\xad\xab\x83\xad\xb1\xab\xa0\xa9\xa1\xa6\x9b\xad\xa9\xba\xab\xa0\x8b\xba\xad\xa9\xbc\xad\x8e\xba\xa7\xa5\x89\xbc\xbc\xba\xa1\xaa\xbd\xbc\xad\xbb\xc8",
    // "OpenSSL_add_all_digests" / M(Xor2) / S(92) / L(23)
    "\x33\x0c\x19\x12\x2f\x2f\x30\x23\x1d\x18\x18\x23\x1d\x10\x10\x23\x18\x15\x1b\x19\x0f\x08\x0f\x7c\xe0\x4e\x29\x06\x5e\xe7\x45\xdd",
    // "" / M(None) / S(0) / L(0)
    "\x19\x42\xad\x13\x68\xb2\x79\xf0\xa0\xaf\x1e\xd4\x2c\xe6\xac\x28\x84\x1b\xf0\xb7\x45\x04\x62\xca\xfc\x45\x6b\x1a\xd9\x19\xd4\x37",
    // "IOBSDNameMatching" / M(Xor4) / S(52) / L(17)
    "\xe1\xe7\xea\xfb\xec\xe6\xc9\xc5\xcd\xe5\xc9\xdc\xcb\xc0\xc1\xc6\xcf\xa8",
    // "CFRelease" / M(Rot) / S(196) / L(9)
    "\x07\x0a\x16\x29\x30\x29\x25\x37\x29\xc4\xf0\xe7\x49\x57\x88\x4b",
    // "CFDataAppendBytes" / M(Xor1) / S(183) / L(17)
    "\xf4\xf1\xf3\xd6\xc3\xd6\xf6\xc7\xc7\xd2\xd9\xd3\xf5\xce\xc3\xd2\xc4\xb7",
    // "CFBundleIdentifier" / M(Xor1) / S(179) / L(18)
    "\xf0\xf5\xf1\xc6\xdd\xd7\xdf\xd6\xfa\xd7\xd6\xdd\xc7\xda\xd5\xda\xd6\xc1\xb3",
    // "CFDateFormatterSetFormat" / M(Xor3) / S(21) / L(24)
    "\x75\x70\x72\x57\x42\x53\x70\x59\x44\x5b\x57\x42\x42\x53\x44\x65\x53\x42\x70\x59\x44\x5b\x57\x42\x36\xef\x1c\x72\x17\xb0\x3b\xc2\xf8",
    // "SecCodeCheckValidity" / M(Xor4) / S(167) / L(20)
    "\xe0\xd6\xd0\xf0\xdc\xd7\xd6\xf0\xdb\xd6\xd0\xd8\xe5\xd2\xdf\xda\xd7\xda\xc7\xca\xb3",
    // "%02x:" / M(Xor1) / S(144) / L(5)
    "\xb5\xa0\xa2\xe8\xaa\x90\x77\x3e\xd3\x37\x3b\x72\x3c\xec\x57\x68",
    // "receipt" / M(Rot) / S(214) / L(7)
    "\x48\x3b\x39\x3b\x3f\x46\x4a\xd6\xd5\x65\x32\x21\x3a\x61\xa9\xe2",
    // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor1) / S(47) / L(66)
    "\x00\x7c\x56\x5c\x5b\x4a\x42\x00\x63\x46\x4d\x5d\x4e\x5d\x56\x00\x69\x5d\x4e\x42\x4a\x58\x40\x5d\x44\x5c\x00\x6c\x40\x5d\x4a\x69\x40\x5a\x41\x4b\x4e\x5b\x46\x40\x41\x01\x49\x5d\x4e\x42\x4a\x58\x40\x5d\x44\x00\x6c\x40\x5d\x4a\x69\x40\x5a\x41\x4b\x4e\x5b\x46\x40\x41\x2f",
    // "longjmp" / M(Xor1) / S(123) / L(7)
    "\x17\x14\x15\x1c\x11\x16\x0b\x7b\x08\x64\xab\xd7\x1f\xed\x73\xaa",
    // "CFBundleShortVersionString" / M(Xor1) / S(25) / L(26)
    "\x5a\x5f\x5b\x6c\x77\x7d\x75\x7c\x4a\x71\x76\x6b\x6d\x4f\x7c\x6b\x6a\x70\x76\x77\x4a\x6d\x6b\x70\x77\x7e\x19\x22\xcb\xba\x38\x75\xe1\x11\xae",
    // "CFDateCreate" / M(Xor4) / S(142) / L(12)
    "\xa3\xa6\xa4\x81\x94\x85\xa3\x92\x85\x81\x94\x85\xe0\x06\x95\xbe",
    // "" / M(None) / S(0) / L(0)
    "\x87\x55\x95\xda\x55\x5d\x87\x74\x22\xd1\x58\x90\xee\x02\xd4\x8f\x50\x09\x40\x52\x02\x59\x14\xc2\xc1\xc4\x36\xb7\x8a\x5f\xc4\xa9",
    // "CFDateFormatterCreate" / M(Xor3) / S(128) / L(21)
    "\xd5\xd0\xd2\xf7\xe2\xf3\xd0\xf9\xe4\xfb\xf7\xe2\xe2\xf3\xe4\xd5\xe4\xf3\xf7\xe2\xf3\x96",
    // "BIO_free" / M(Xor3) / S(197) / L(8)
    "\x97\x9c\x9a\x8a\xb3\xa7\xb0\xb0\xd5\xa8\xe5\x06\xce\x90\x92\x3c",
    // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor1) / S(239) / L(57)
    "\xc0\xbc\x96\x9c\x9b\x8a\x82\xc0\xa3\x86\x8d\x9d\x8e\x9d\x96\xc0\xa4\x8a\x96\x8c\x87\x8e\x86\x81\x9c\xc0\xbc\x96\x9c\x9b\x8a\x82\xbd\x80\x80\x9b\xac\x8a\x9d\x9b\x86\x89\x86\x8c\x8e\x9b\x8a\x9c\xc1\x84\x8a\x96\x8c\x87\x8e\x86\x81\xef\xc2\xb7\xb8\x8c\xa7\xd3\xb4\x95",
    // "" / M(None) / S(0) / L(0)
    "\x66\x18\x52\x4d\xa1\x0c\xfd\xbe\xb3\xed\xc5\x99\x89\xaf\x04\x6d\xf1\xbe\xe8\x2a\xdf\x5c\xcf\xdc\x00\x45\xe6\x6f\x59\xe3\xb3\x82",
    // "CFBundleGetIdentifier" / M(Rot) / S(16) / L(21)
    "\x53\x56\x52\x85\x7e\x74\x7c\x75\x57\x75\x84\x59\x74\x75\x7e\x84\x79\x76\x79\x75\x82\x10",
    // "IORegistryEntryCreateCFProperty" / M(Xor4) / S(59) / L(31)
    "\x29\x2f\x32\x05\x07\x09\x13\x14\x12\x19\x25\x0e\x14\x12\x19\x23\x12\x05\x01\x14\x05\x23\x26\x30\x12\x0f\x10\x05\x12\x14\x19\x60",
    // "setDelegate:" / M(Xor4) / S(27) / L(12)
    "\xc3\xd5\xc4\xf4\xd5\xdc\xd5\xd7\xd1\xc4\xd5\x8a\xb0\xeb\xe4\x99",
    // "Contents/_MASReceipt/receipt" / M(Xor2) / S(16) / L(28)
    "\x76\x5a\x5b\x41\x50\x5b\x41\x46\x1a\x6a\x78\x74\x66\x67\x50\x56\x50\x5c\x45\x41\x1a\x47\x50\x56\x50\x5c\x45\x41\x35\xac\x56\x33\xad\x63\x78\x4e\xec",
    // "" / M(None) / S(0) / L(0)
    "\x70\x97\x7e\x92\x6f\x87\x6b\xd9\xbd\xd3\xbb\xf7\x05\xb1\x57\x3d\x94\x38\xf6\xe8\xf1\xf1\x8d\xb3\x63\xb8\xa5\x62\x09\x59\x91\xc5",
    // "." / M(Xor3) / S(192) / L(1)
    "\xfe\xd0\xbd\x09\xe4\x35\x19\xbb\x68\x69\xe3\xee\x5f\xce\xf7\x46",
    // "CFBundleGetMainBundle" / M(Xor3) / S(106) / L(21)
    "\xc3\xc6\xc2\xf5\xee\xe4\xec\xe5\xc7\xe5\xf4\xcd\xe1\xe9\xee\xc2\xf5\xee\xe4\xec\xe5\x80",
    // "CFStringCreateWithCString" / M(Xor1) / S(233) / L(25)
    "\xaa\xaf\xba\x9d\x9b\x80\x87\x8e\xaa\x9b\x8c\x88\x9d\x8c\xbe\x80\x9d\x81\xaa\xba\x9d\x9b\x80\x87\x8e\xe9\x9d\x62\x2d\x35\x21\x10\x7d\x60",
    // "" / M(None) / S(0) / L(0)
    "\xab\x13\xc6\x86\x5f\x16\x8c\x17\x25\x23\xa3\x8b\x4a\x23\xf7\x1d\x27\x1a\x92\x13\x88\x3b\xa0\x47\x39\xa2\x04\xfd\x2f\xbd\xa0\x2a",
    // "1.2.840.113635.100.6.11.1" / M(Xor1) / S(153) / L(25)
    "\xa8\xb7\xab\xb7\xa1\xad\xa9\xb7\xa8\xa8\xaa\xaf\xaa\xac\xb7\xa8\xa9\xa9\xb7\xaf\xb7\xa8\xa8\xb7\xa8\x99\x38\xe3\xf4\x0d\x69\x9a\xa3\x77",
    // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor4) / S(77) / L(59)
    "\x42\x45\x4e\x45\x31\x4e\x41\x36\x4e\x42\x42\x4e\x46\x37\x4e\x41\x4d\x4e\x47\x35\x4e\x44\x4c\x4e\x32\x32\x4e\x41\x4c\x4e\x30\x45\x4e\x40\x35\x4e\x31\x46\x4e\x46\x40\x4e\x41\x46\x4e\x30\x45\x4e\x4d\x4c\x4e\x30\x32\x4e\x42\x37\x4e\x42\x44\x74\xbc\x03\xf4\x49\x4c\xf8\xd4\x45",
    // "CFStringCreateWithCString" / M(Xor4) / S(0) / L(25)
    "\x43\x46\x53\x74\x72\x69\x6e\x67\x43\x72\x65\x61\x74\x65\x57\x69\x74\x68\x43\x53\x74\x72\x69\x6e\x67\x00\x5b\x8a\xbb\x5b\xd1\xbc\x90\x9e",
    // "longjmp" / M(Xor3) / S(243) / L(7)
    "\x6f\x6c\x6d\x64\x69\x6e\x73\x03\x4a\x4b\x13\xd0\x64\xe1\x12\xe6",
    // "start" / M(Xor1) / S(91) / L(5)
    "\x28\x2f\x3a\x29\x2f\x5b\x8e\xc6\x39\x76\x12\xaf\xb1\x7d\x32\xf0",
    // "CC_SHA1_Final" / M(Xor2) / S(34) / L(13)
    "\x71\x71\x6d\x61\x7a\x73\x03\x6d\x74\x5b\x5c\x53\x5e\x32\x7f\x3b",
    // "strlen" / M(Xor3) / S(136) / L(6)
    "\xeb\xec\xea\xf4\xfd\xf6\x98\x20\xd7\xc3\x3c\xbf\xd7\x26\xb9\xcc",
    // "" / M(None) / S(0) / L(0)
    "\x3b\xd9\x1e\xbb\x4f\x0c\xef\x3e\x93\x2e\x8b\x83\xe0\x0d\x8e\x10\xb7\x7a\xad\xca\x96\x98\xd5\xb3\x22\xc9\x2f\x21\x8a\xc7\x01\x8e",
    // "CFReadStreamCreateWithFile" / M(Xor3) / S(56) / L(26)
    "\x18\x1d\x09\x3e\x3a\x3f\x08\x2f\x29\x3e\x3a\x36\x18\x29\x3e\x3a\x2f\x3e\x0c\x32\x2f\x33\x1d\x32\x37\x3e\x5b\xd8\xc2\xda\xac\xe9\x6c\x24\xf8",
    // "" / M(None) / S(0) / L(0)
    "\xe2\xab\xe7\x8f\xba\x4f\x7e\x82\xc2\x47\xd2\x49\x7c\xc4\xe7\x41\x91\x4f\xb1\x4f\xd1\xbb\xb5\xc8\x92\xb8\x24\x1a\xaa\x41\x2a\xb4",
    // "kSecMatchLimit" / M(Xor3) / S(82) / L(14)
    "\x09\x31\x07\x01\x2f\x03\x16\x01\x0a\x2e\x0b\x0f\x0b\x16\x62\x88",
    // "c2i_ASN1_INTEGER" / M(Rot) / S(122) / L(16)
    "\xdd\xac\xe3\xd9\xbb\xcd\xc8\xab\xd9\xc3\xc8\xce\xbf\xc1\xbf\xcc\x7a",
    // "Apple Root CA" / M(Rot) / S(143) / L(13)
    "\xd0\xff\xff\xfb\xf4\xaf\xe1\xfe\xfe\x03\xaf\xd2\xd0\x8f\x04\x26",
    // "CFArrayAppendValue" / M(Xor4) / S(13) / L(18)
    "\xb4\xb1\xb6\x85\x85\x96\x8e\xb6\x87\x87\x92\x99\x93\xa1\x96\x9b\x82\x92\xf7",
    // "" / M(None) / S(0) / L(0)
    "\x73\x14\x8e\xb0\xef\xd6\x9e\x84\xea\xab\x47\x5d\xae\x1e\x75\xef\x51\x28\x44\x20\xc8\xad\x86\x57\x0e\x3a\x61\x3e\xce\x46\x0d\x89",
    // "OBJ_txt2obj" / M(Xor3) / S(24) / L(11)
    "\x67\x6a\x62\x77\x5c\x50\x5c\x1a\x47\x4a\x42\x28\x73\x77\xb9\xcc",
    // "dlopen" / M(Xor3) / S(41) / L(6)
    "\x5d\x55\x56\x49\x5c\x57\x39\x92\xdb\xfd\x66\xac\x8d\x37\xee\xf2",
    // "IOServiceGetMatchingServices" / M(Xor3) / S(160) / L(28)
    "\x8c\x8a\x96\xa0\xb7\xb3\xac\xa6\xa0\x82\xa0\xb1\x88\xa4\xb1\xa6\xad\xac\xab\xa2\x96\xa0\xb7\xb3\xac\xa6\xa0\xb6\xc5\xe7\xbb\xf0\xfa\x98\x9e\xcf\xbb",
    // "CFDictionaryAddValue" / M(Rot) / S(117) / L(20)
    "\xb8\xbb\xb9\xde\xd8\xe9\xde\xe4\xe3\xd6\xe7\xee\xb6\xd9\xd9\xcb\xd6\xe1\xea\xda\x75",
    // "BIO_new" / M(Rot) / S(145) / L(7)
    "\xd3\xda\xe0\xf0\xff\xf6\x08\x91\xfd\x02\x61\x3b\x2d\xec\x38\xc5",
    // "CFDateFormatterCreateDateFromString" / M(Rot) / S(100) / L(35)
    "\xa7\xaa\xa8\xc5\xd8\xc9\xaa\xd3\xd6\xd1\xc5\xd8\xd8\xc9\xd6\xa7\xd6\xc9\xc5\xd8\xc9\xa8\xc5\xd8\xc9\xaa\xd6\xd3\xd1\xb7\xd8\xd6\xcd\xd2\xcb\x64",
    // "kSecMatchSearchList" / M(Rot) / S(242) / L(19)
    "\x5d\x45\x57\x55\x3f\x53\x66\x55\x5a\x45\x57\x53\x64\x55\x5a\x3e\x5b\x65\x66\xf2",
    // "strncmp" / M(Rot) / S(94) / L(7)
    "\xd1\xd2\xd0\xcc\xc1\xcb\xce\x5e\x94\x71\x09\x18\xa9\xa6\xa3\x26",
    // "" / M(None) / S(0) / L(0)
    "\x2b\x7c\x24\xf9\x9b\xa3\x26\x75\x77\xb4\x98\x64\x90\x04\x51\x47\x7d\x0f\xd6\x76\xa0\x82\x86\x82\x91\x82\x38\x89\x49\xfd\xf2\xb9",
    // "" / M(None) / S(0) / L(0)
    "\xb1\x23\x89\x9a\x3c\xf5\x51\x87\xe9\x98\xef\xb6\x86\x77\x3b\x95\xdb\x91\xa3\xdd\x7d\x28\x6b\x49\x3d\x59\x07\x81\x1b\xa3\x50\x0e",
    // "CFDataCreateMutable" / M(Xor4) / S(222) / L(19)
    "\x1b\x1e\x1c\x39\x2c\x39\x1b\x2a\x3d\x39\x2c\x3d\x15\x2d\x2c\x39\x3a\x34\x3d\x58",
    // "/usr/lib/libobjc.dylib" / M(Xor4) / S(190) / L(22)
    "\x3d\x67\x61\x60\x3d\x7e\x7b\x70\x3d\x7e\x7b\x70\x7d\x70\x78\x71\x3c\x76\x6b\x7e\x7b\x70\x12",
    // "CFGetTypeID" / M(Xor1) / S(44) / L(11)
    "\x6f\x6a\x6b\x49\x58\x78\x55\x5c\x49\x65\x68\x2c\xaf\x56\xba\x3a",
    // "dlopen" / M(Xor4) / S(138) / L(6)
    "\xc4\xcc\xcf\xd0\xc5\xce\xa0\x29\xa5\xc8\xd2\xe3\xfd\x23\xc3\xb7",
    // "CFReadStreamClose" / M(Xor1) / S(60) / L(17)
    "\x7f\x7a\x6e\x59\x5d\x58\x6f\x48\x4e\x59\x5d\x51\x7f\x50\x53\x4f\x59\x3c",
    // "" / M(None) / S(0) / L(0)
    "\x44\x65\xfa\xdc\x55\x0c\xf4\x37\x15\x89\x88\x80\x63\x13\x2c\x5c\x72\x34\x82\x71\x3c\x68\xf1\x75\x86\x1a\x89\xe5\x03\x2d\x5b\xae",
    // "CFReadStreamOpen" / M(Xor1) / S(192) / L(16)
    "\x83\x86\x92\xa5\xa1\xa4\x93\xb4\xb2\xa5\xa1\xad\x8f\xb0\xa5\xae\xc0",
    // "" / M(None) / S(0) / L(0)
    "\xda\x82\x33\x85\x86\x32\xf1\x14\x12\x84\xf0\xf2\x43\x1c\xdf\x47\x16\xcf\xff\x45\xf1\x32\xec\x56\xd5\xda\x7b\xe5\xf6\x9c\xb1\xeb",
    // "" / M(None) / S(0) / L(0)
    "\xeb\x0b\xa6\x40\x72\xf4\x2f\xde\x13\x36\xaf\x69\xf6\x52\x15\x6c\x15\x64\x7a\x9b\x36\x5c\x2c\x9c\x7d\xf5\x57\x0a\xf8\x11\x2d\x7b",
    // "IOMasterPort" / M(Xor3) / S(230) / L(12)
    "\xbf\xb9\xbb\x97\x85\x82\x93\x84\xa6\x99\x84\x82\xf6\xf9\xf7\x84",
    // "IORegistryEntryGetParentEntry" / M(Xor1) / S(89) / L(29)
    "\x10\x16\x0b\x3c\x3e\x30\x2a\x2d\x2b\x20\x1c\x37\x2d\x2b\x20\x1e\x3c\x2d\x09\x38\x2b\x3c\x37\x2d\x1c\x37\x2d\x2b\x20\x59\x97\x0f\xbe\x14\xa9\x55\x66\xd1",
    // "setjmp" / M(Rot) / S(89) / L(6)
    "\xcc\xbe\xcd\xc3\xc6\xc9\x59\x32\x6c\xcc\x9a\x61\x1c\x33\x75\x46",
    // "globfree" / M(Xor2) / S(141) / L(8)
    "\xfa\xf1\xf2\xff\xfb\xef\xf8\xf8\x9d\x5b\x3b\x25\x24\x47\x19\x86",
    // "CFDictionaryGetTypeID" / M(Xor2) / S(144) / L(21)
    "\xc5\xc0\xc2\xef\xe5\xf2\xef\xe9\xe8\xe7\xf4\xff\xc1\xe3\xf2\xd2\xff\xf6\xe3\xcf\xc2\x86",
    // "PKCS7_verify" / M(Xor4) / S(59) / L(12)
    "\xe0\xfb\xf3\xe3\x87\xef\xc6\xd5\xc2\xd9\xd6\xc9\xb0\xcb\x8b\xd3",
    // "start" / M(Rot) / S(73) / L(5)
    "\xbc\xbd\xaa\xbb\xbd\x49\x6d\xa2\x7e\x31\x63\x5f\x9c\x8c\xc3\xc3",
    // "kSecReturnRef" / M(Xor3) / S(21) / L(13)
    "\x4e\x76\x40\x46\x77\x40\x51\x50\x57\x4b\x77\x40\x43\x25\x02\xe8",
    // "CFBundleGetIdentifier" / M(Xor4) / S(45) / L(21)
    "\x9d\x98\x9c\xab\xb0\xba\xb2\xbb\x99\xbb\xaa\x97\xba\xbb\xb0\xaa\xb7\xb8\xb7\xbb\xac\xde",
    // "BIO_new" / M(Xor4) / S(181) / L(7)
    "\x12\x19\x1f\x0f\x3e\x35\x27\x50\x02\x79\x70\x64\xb6\x30\x88\x09",
    // "" / M(None) / S(0) / L(0)
    "\xdc\x33\xda\x9e\xc0\x65\x9a\x40\x3e\xc6\x35\x6f\x59\xd2\xff\x32\x69\xcf\x89\xb6\xac\x8b\x55\x9e\x75\x0e\x37\x7b\xc4\xfc\x4d\x78",
    // "" / M(None) / S(0) / L(0)
    "\xf9\x30\x8d\x87\x34\x38\xfe\x79\x24\x48\x2f\xdb\xb8\xdd\x3a\xd0\x5b\x21\xf0\x74\x8c\x94\x9c\xd8\xe1\x4f\x7c\x63\x64\x1d\x47\xfd",
    // "" / M(None) / S(0) / L(0)
    "\xa0\xb8\x94\x24\xf3\x60\x13\x3c\x51\xfa\x11\x8f\x21\x9c\x20\x8e\x40\x6c\x82\x89\x06\x41\xd8\xf7\xf0\xf9\x75\x99\xa5\x00\x0c\x45",
    // "CFDataGetLength" / M(Rot) / S(171) / L(15)
    "\xee\xf1\xef\x0c\x1f\x0c\xf2\x10\x1f\xf7\x10\x19\x12\x1f\x13\xab",
    // "kCFTypeArrayCallBacks" / M(Rot) / S(53) / L(21)
    "\xa0\x78\x7b\x89\xae\xa5\x9a\x76\xa7\xa7\x96\xae\x78\x96\xa1\xa1\x77\x96\x98\xa0\xa8\x35",
    // "CFDateCompare" / M(Xor3) / S(125) / L(13)
    "\xce\xcb\xc9\xec\xf9\xe8\xce\xe2\xe0\xfd\xec\xff\xe8\x8d\x3d\xd0",
    // "X509_STORE_new" / M(Xor1) / S(136) / L(14)
    "\xd0\xbd\xb8\xb1\xd7\xdb\xdc\xc7\xda\xcd\xd7\xe6\xed\xff\x88\x3a",
    // "setjmp" / M(Xor4) / S(35) / L(6)
    "\x43\x55\x44\x5a\x5d\x40\x30\x8c\x9e\x44\x8f\x4c\xe9\x10\xfa\xec",
    // "" / M(None) / S(0) / L(0)
    "\x95\x11\x1e\x52\xaa\xca\x05\xa4\x8a\x56\xf9\xa0\xae\xc4\x92\x2a\x7c\x7b\xb0\xe6\x5d\xbc\xaa\x7a\xaa\x88\x56\xc9\xec\xac\x30\x5f",
    // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Rot) / S(24) / L(39)
    "\x5b\x5e\x6c\x81\x85\x7d\x72\x87\x86\x7d\x5b\x8a\x7d\x79\x8c\x7d\x6f\x81\x8c\x80\x6c\x81\x85\x7d\x61\x86\x8c\x7d\x8a\x8e\x79\x84\x5e\x8a\x87\x85\x5f\x65\x6c\x18\x9c\x1e\xb5\x13\x56\xa3\x71\x27",
    // "CFDictionaryAddValue" / M(Rot) / S(46) / L(20)
    "\x71\x74\x72\x97\x91\xa2\x97\x9d\x9c\x8f\xa0\xa7\x6f\x92\x92\x84\x8f\x9a\xa3\x93\x2e",
    // "objc_getClass" / M(Xor4) / S(177) / L(13)
    "\x7f\x72\x7a\x73\x4f\x77\x75\x64\x53\x7c\x71\x63\x63\x10\x3f\xa7",
    // "" / M(None) / S(0) / L(0)
    "\xef\x09\x1f\x75\x1a\xab\xa5\xac\x4a\xe8\x2f\x35\x80\x08\xb5\x36\xff\x80\xcd\xf3\xed\x31\x57\xe7\x42\x83\x74\x0a\xe3\x09\x7a\x55",
    // "CFBundleCopyBundleURL" / M(Xor2) / S(111) / L(21)
    "\x3a\x3f\x3b\x0c\x17\x1d\x15\x1c\x3a\x16\x09\x00\x3b\x0c\x17\x1d\x15\x1c\x2c\x2b\x35\x79",
    // "d2i_PKCS7_bio" / M(Rot) / S(119) / L(13)
    "\xdb\xa9\xe0\xd6\xc7\xc2\xba\xca\xae\xd6\xd9\xe0\xe6\x77\x82\x03",
    // "X509_STORE_free" / M(Xor4) / S(62) / L(15)
    "\xb8\xd5\xd0\xd9\xbf\xb3\xb4\xaf\xb2\xa5\xbf\x86\x92\x85\x85\xe0",
    // "sk_value" / M(Xor3) / S(209) / L(8)
    "\x92\x8a\xbe\x97\x80\x8d\x94\x84\xe1\x36\xb7\x5a\xc7\xbd\x1a\x01",
    // "CFBundleShortVersionString" / M(Xor3) / S(246) / L(26)
    "\x5a\x5f\x5b\x6c\x77\x7d\x75\x7c\x4a\x71\x76\x6b\x6d\x4f\x7c\x6b\x6a\x70\x76\x77\x4a\x6d\x6b\x70\x77\x7e\x19\x9c\x93\xbf\x8f\xfe\xed\x69\xbe",
    // "" / M(None) / S(0) / L(0)
    "\x82\x1d\xda\x04\x28\x97\xa5\x58\x31\x91\x64\x25\x90\xe1\x74\xa4\x8f\x49\x7f\x89\x21\xb4\xd5\xb4\xba\x0b\x5a\xd1\x99\x87\xfb\xdc",
    // "sk_num" / M(Rot) / S(82) / L(6)
    "\xc5\xbd\xb1\xc0\xc7\xbf\x52\xb4\x87\xe5\x7b\xe9\x54\x20\xf9\x16",
    // "SHA1" / M(Xor2) / S(238) / L(4)
    "\xad\xb6\xbf\xcf\xfe\x0b\x35\xe1\x5b\x5a\xc6\x12\xc0\x57\x12\xaa",
    // "CFBundleIdentifier" / M(Xor1) / S(214) / L(18)
    "\x95\x90\x94\xa3\xb8\xb2\xba\xb3\x9f\xb2\xb3\xb8\xa2\xbf\xb0\xbf\xb3\xa4\xd6",
    // "CC_SHA1_Update" / M(Rot) / S(77) / L(14)
    "\x90\x90\xac\xa0\x95\x8e\x7e\xac\xa2\xbd\xb1\xae\xc1\xb2\x4d\x87",
    // "" / M(None) / S(0) / L(0)
    "\x6d\x09\x90\x50\x8f\x5e\x0e\xd2\x60\x93\x39\x66\x54\x31\x0e\x1a\x9f\xc5\xae\xc7\x85\x2d\x5a\x15\x44\x4f\x58\x2d\xc2\xc4\x57\xc3",
    // "" / M(None) / S(0) / L(0)
    "\x9e\x4f\xa5\x67\x18\x02\xc0\x3e\xc9\xe9\xd7\x86\x7d\xc0\x40\xfa\x6b\xc9\xb8\x11\xf5\x55\xa1\x72\x14\xdb\x75\xee\x4c\xba\x7b\x00",
    // "EVP_get_digestbyname" / M(Xor3) / S(194) / L(20)
    "\x92\x81\x87\x88\xb0\xb2\xa3\x88\xb3\xbe\xb0\xb2\xa4\xa3\xb5\xae\xb9\xb6\xba\xb2\xd7",
    // "" / M(None) / S(0) / L(0)
    "\x96\x9d\x55\x15\xdd\x03\x80\x19\xfd\xa5\x63\xfd\x0d\x2f\x10\x03\x23\xb3\x49\x75\x00\x1f\x8d\xd6\x51\x3d\xe0\x41\x7e\x72\x81\xb6",
    // "" / M(None) / S(0) / L(0)
    "\xee\xa1\x3e\x98\xa0\x40\xc1\x04\x49\x0a\x83\xb1\x48\x44\xd6\xbc\x04\xe3\x61\xff\x7c\x7e\xe0\x76\xcf\x9f\x38\x55\x07\x6f\x00\x3f",
    // "d2i_PKCS7_bio" / M(Xor1) / S(79) / L(13)
    "\x2b\x7d\x26\x10\x1f\x04\x0c\x1c\x78\x10\x2d\x26\x20\x4f\xb8\x0b",
    // "" / M(None) / S(0) / L(0)
    "\xe2\x15\x89\xba\x5f\x41\x44\xee\x24\x91\xe2\x79\x38\x2b\xb9\xec\x94\xf1\xad\xca\xfc\x50\xee\x8e\x4f\x8b\xf0\x2a\xa6\x92\x41\x52",
    // "" / M(None) / S(0) / L(0)
    "\xb8\xb5\x04\xaf\x9f\xee\x38\x0c\x5d\x6a\x5f\x85\xa7\x0d\x0c\xca\x0a\xd1\xd5\xd1\x44\xab\x29\xe3\xf7\xac\x36\x71\x96\x9e\x41\x97",
    // "/usr/lib/libobjc.dylib" / M(Xor1) / S(80) / L(22)
    "\x7f\x25\x23\x22\x7f\x3c\x39\x32\x7f\x3c\x39\x32\x3f\x32\x3a\x33\x7e\x34\x29\x3c\x39\x32\x50",
    // "CFDateFormatterCreateDateFromString" / M(Xor1) / S(16) / L(35)
    "\x53\x56\x54\x71\x64\x75\x56\x7f\x62\x7d\x71\x64\x64\x75\x62\x53\x62\x75\x71\x64\x75\x54\x71\x64\x75\x56\x62\x7f\x7d\x43\x64\x62\x79\x7e\x77\x10",
    // "SHA1_Update" / M(Rot) / S(37) / L(11)
    "\x78\x6d\x66\x56\x84\x7a\x95\x89\x86\x99\x8a\x25\x2b\xfa\x77\xad",
    // "SecKeychainOpen" / M(Xor2) / S(243) / L(15)
    "\xb0\x86\x80\xa8\x86\x9a\x80\x8b\x82\x8a\x8d\xac\x93\x86\x8d\xe3",
    // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor2) / S(148) / L(40)
    "\x93\x94\x94\xc0\x90\xc7\x93\x93\x97\xc6\x90\x9c\x96\xc4\x95\x9d\xc3\xc3\x90\x9d\xc1\x94\x91\xc4\xc0\x97\x97\x91\x90\x97\xc1\x94\x9c\x9d\xc1\xc3\x93\xc6\x93\x95\xa5\xf8\xba\xfd\x34\x89\xe0\x7f\x76",
    // "%02x" / M(Xor1) / S(87) / L(4)
    "\x72\x67\x65\x2f\x57\x09\x1b\xca\x7c\x37\x2a\x0f\x2d\x51\x83\x0f",
    // "IORegistryEntryCreateCFProperty" / M(Xor3) / S(131) / L(31)
    "\xea\xec\xf1\xc6\xc4\xca\xd0\xd7\xd1\xda\xe6\xcd\xd7\xd1\xda\xe0\xd1\xc6\xc2\xd7\xc6\xe0\xe5\xf3\xd1\xcc\xd3\xc6\xd1\xd7\xda\xa3",
    // "CC_SHA1_Update" / M(Rot) / S(133) / L(14)
    "\xc8\xc8\xe4\xd8\xcd\xc6\xb6\xe4\xda\xf5\xe9\xe6\xf9\xea\x85\x36",
    // "dlopen" / M(Rot) / S(43) / L(6)
    "\x8f\x97\x9a\x9b\x90\x99\x2b\x85\xeb\x78\xf5\x57\xf6\x5d\x94\x3b",
    // "kSecCodeInfoEntitlements" / M(Xor1) / S(136) / L(24)
    "\xe3\xdb\xed\xeb\xcb\xe7\xec\xed\xc1\xe6\xee\xe7\xcd\xe6\xfc\xe1\xfc\xe4\xed\xe5\xed\xe6\xfc\xfb\x88\x82\xd8\xd5\x35\xf9\x8f\x3e\x28",
    // "" / M(None) / S(0) / L(0)
    "\xa7\xd9\x98\x99\xf7\x57\xb3\x41\xb1\x8e\xa9\x05\x1d\x98\xee\x2f\x34\x21\xa9\x80\x4b\x5c\x1c\xae\xa4\xb6\x76\xbf\x96\x78\x47\x97",
    // "kSecCodeInfoPList" / M(Xor4) / S(47) / L(17)
    "\x25\x1d\x2b\x2d\x0d\x21\x2a\x2b\x07\x20\x28\x21\x1e\x02\x27\x3d\x3a\x4e",
    // "" / M(None) / S(0) / L(0)
    "\x98\xd8\x88\x30\xf0\xae\x93\xff\xee\x66\x98\x84\x2a\xe1\x6f\xfc\x2a\xa1\x71\xca\xfc\xf1\x21\x7c\xd2\x84\x4d\x5d\x57\x9d\x8c\x60",
    // "" / M(None) / S(0) / L(0)
    "\xcf\x80\xab\x3c\x9d\x5f\x3c\x92\x67\xda\xab\x5b\xfd\x80\x2b\x24\xcb\x73\xa6\x24\xe4\x0f\x9e\xfd\xb8\x2c\x33\x69\x3c\x3a\xaa\x23",
    // "" / M(None) / S(0) / L(0)
    "\x5f\xee\x34\x2f\x90\xb9\x49\x02\x55\x17\xd8\x64\x55\xc7\x6a\x39\xca\xb9\xb8\xb9\x06\xd6\xf8\xbe\x71\xd9\x86\x3b\x3d\x60\xb3\xd4",
    // "setjmp" / M(Xor2) / S(20) / L(6)
    "\x77\x61\x70\x6e\x69\x74\x04\xab\x19\xd9\x88\xe4\x45\x5b\xee\x6e",
    // "" / M(None) / S(0) / L(0)
    "\xab\x7f\xe4\x1e\xd1\x29\x27\x7d\xe5\x05\x30\x7d\xf5\x36\xa4\xf0\x12\xad\x70\x08\xf6\x29\x6c\x9c\xed\x72\xa2\xe9\x6d\x59\x72\x75",
    // "/usr/lib/libobjc.dylib" / M(Xor4) / S(191) / L(22)
    "\x06\x5c\x5a\x5b\x06\x45\x40\x4b\x06\x45\x40\x4b\x46\x4b\x43\x4a\x07\x4d\x50\x45\x40\x4b\x29",
    // "" / M(None) / S(0) / L(0)
    "\xb6\x75\x6f\xd1\xac\x47\x7b\x46\xb0\x31\xfa\xfd\xaf\xbc\xce\xb6\x20\x10\xc1\x62\xb1\xce\x1c\x44\xc8\xf7\x8f\x51\xed\x77\x85\x2d",
    // "CFArrayGetValueAtIndex" / M(Xor3) / S(190) / L(22)
    "\x96\x93\x94\xa7\xa7\xb4\xac\x92\xb0\xa1\x83\xb4\xb9\xa0\xb0\x94\xa1\x9c\xbb\xb1\xb0\xad\xd5",
    // "/usr/lib/libSystem.dylib" / M(Xor2) / S(224) / L(24)
    "\xee\xb4\xb2\xb3\xee\xad\xa8\xa3\xee\xad\xa8\xa3\x92\xb8\xb2\xb5\xa4\xac\xef\xa5\xb8\xad\xa8\xa3\xc1\xdd\xd7\x1d\xe4\xa0\xdf\xe7\x0a",
    // "kSecCodeInfoPList" / M(Xor4) / S(177) / L(17)
    "\x19\x21\x17\x11\x31\x1d\x16\x17\x3b\x1c\x14\x1d\x22\x3e\x1b\x01\x06\x72",
    // "strncmp" / M(Xor2) / S(216) / L(7)
    "\xbb\xbc\xba\xa6\xab\xa5\xb8\xc8\xd6\xc0\xa6\x06\xf5\x67\xfa\xc2",
    // "IOServiceGetMatchingServices" / M(Xor1) / S(58) / L(28)
    "\x73\x75\x69\x5f\x48\x4c\x53\x59\x5f\x7d\x5f\x4e\x77\x5b\x4e\x59\x52\x53\x54\x5d\x69\x5f\x48\x4c\x53\x59\x5f\x49\x3a\xda\x2b\x02\x6a\x73\x0e\x41\x9a",
    // "PKCS7_verify" / M(Xor2) / S(248) / L(12)
    "\xb8\xa3\xab\xbb\xdf\xb7\x9e\x8d\x9a\x81\x8e\x91\xe8\xa5\x9a\xb6",
    // "SecCodeCheckValidityWithErrors" / M(Rot) / S(29) / L(30)
    "\x70\x82\x80\x60\x8c\x81\x82\x60\x85\x82\x80\x88\x73\x7e\x89\x86\x81\x86\x91\x96\x74\x86\x91\x85\x62\x8f\x8f\x8c\x8f\x90\x1d\x5c\x52\x46\xca\xa9\x7d\x85\x18",
    // "" / M(None) / S(0) / L(0)
    "\x42\x3f\x1e\x3c\x28\x3a\x7d\xcd\x91\xfc\x75\x6f\x29\x59\x17\xbb\xa8\x58\x6d\x4e\x33\xd6\xd0\xf9\x04\xf3\x6d\x54\x02\x93\xb4\x9f",
    // "" / M(None) / S(0) / L(0)
    "\xe9\xa4\x37\xa1\x2f\x10\x06\x1f\xb7\x41\xed\x95\x76\x85\x2a\x57\xc8\x0f\x84\x08\xf1\x39\x1e\x6e\xa9\x4f\xdf\x7c\xe9\xe1\x5b\x58",
    // "CFDictionaryGetValue" / M(Xor3) / S(11) / L(20)
    "\x63\x66\x64\x49\x43\x54\x49\x4f\x4e\x41\x52\x59\x67\x45\x54\x76\x41\x4c\x55\x45\x20",
    // "SecCertificateCopyData" / M(Xor3) / S(199) / L(22)
    "\x8d\xbb\xbd\x9d\xbb\xac\xaa\xb7\xb8\xb7\xbd\xbf\xaa\xbb\x9d\xb1\xae\xa7\x9a\xbf\xaa\xbf\xde",
    // "1.50" / M(Xor1) / S(209) / L(4)
    "\xe0\xff\xe4\xe1\xd1\x6d\xc2\xb1\x5a\x8d\xd1\xc2\x4e\xf8\x1b\xe4",
    // "Contents/_MASReceipt" / M(Xor2) / S(120) / L(20)
    "\x2e\x02\x03\x19\x08\x03\x19\x1e\x42\x32\x20\x2c\x3e\x3f\x08\x0e\x08\x04\x1d\x19\x6d",
    // "CFArrayGetCount" / M(Xor3) / S(165) / L(15)
    "\xf6\xf3\xf4\xc7\xc7\xd4\xcc\xf2\xd0\xc1\xf6\xda\xc0\xdb\xc1\xb5",
    // "SecCodeCheckValidityWithErrors" / M(Xor2) / S(32) / L(30)
    "\x54\x62\x64\x44\x68\x63\x62\x44\x6f\x62\x64\x6c\x51\x66\x6b\x6e\x63\x6e\x73\x7e\x50\x6e\x73\x6f\x42\x75\x75\x68\x75\x74\x07\xc9\xab\x2e\xdb\x8e\xf8\x1a\xd6",
    // "" / M(None) / S(0) / L(0)
    "\x96\x3f\xa5\x9f\x47\x0e\x33\xb3\x79\xbb\x63\xc4\x52\xb9\xd2\x0a\xca\xb4\x7a\x79\xa5\xb8\x5e\xef\x81\x0e\x50\xa0\x05\x11\x0c\x8d",
    // "" / M(None) / S(0) / L(0)
    "\xc9\xa3\x37\xf4\xf9\x36\x0c\xcc\xa4\x9b\x74\xd5\xc9\xe4\x7b\xe2\x2e\x9c\xbb\x81\xf8\x9f\x99\x86\x77\xb5\x32\xec\x49\xb8\xae\x9b",
    // "strncmp" / M(Xor2) / S(141) / L(7)
    "\xee\xe9\xef\xf3\xfe\xf0\xed\x9d\xa2\xdb\xc0\x34\x08\x2c\x0f\xf2",
    // "exit" / M(Xor4) / S(66) / L(4)
    "\x45\x58\x49\x54\x20\x7c\x3c\xb0\xec\x0f\x9d\x25\x74\x0a\x10\x54",
    // "d2i_X509_bio" / M(Rot) / S(166) / L(12)
    "\x0a\xd8\x0f\x05\xfe\xdb\xd6\xdf\x05\x08\x0f\x15\xa6\x35\x9e\x0c",
    // "SKReceiptRefreshRequest" / M(Xor2) / S(54) / L(23)
    "\x45\x5d\x44\x73\x75\x73\x7f\x66\x62\x44\x73\x70\x64\x73\x65\x7e\x44\x73\x67\x63\x73\x65\x62\x16\x0e\x8f\x76\xb5\x79\xe2\xd0\xad",
    // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor1) / S(216) / L(40)
    "\xee\xe9\xe9\x9d\xed\x9a\xee\xee\xea\x9b\xed\xe1\xeb\x99\xe8\xe0\x9e\x9e\xed\xe0\x9c\xe9\xec\x99\x9d\xea\xea\xec\xed\xea\x9c\xe9\xe1\xe0\x9c\x9e\xee\x9b\xee\xe8\xd8\x2c\xce\x62\x96\x6c\x3d\x79\x13",
    // "CFAbsoluteTimeGetCurrent" / M(Xor2) / S(17) / L(24)
    "\x73\x76\x71\x52\x43\x5f\x5c\x45\x44\x55\x64\x59\x5d\x55\x77\x55\x44\x73\x45\x42\x42\x55\x5e\x44\x30\xc7\xe9\x9e\xc9\xda\xe9\x17\xe9",
    // "SHA1_Update" / M(Xor4) / S(48) / L(11)
    "\x53\x48\x41\x31\x5f\x55\x70\x64\x61\x74\x65\x00\x38\xbc\x2a\xef",
    // "" / M(None) / S(0) / L(0)
    "\x25\x05\xca\xc0\x06\x39\x5d\xe3\xa9\x31\xbb\x92\x06\xf7\x60\x82\x4b\xfd\x8a\x91\x73\x3d\xed\x19\x1c\xb8\x0c\x18\x7a\xe1\xfc\x92",
    // "CFDataCreate" / M(Xor4) / S(63) / L(12)
    "\xb3\xb6\xb4\x91\x84\x91\xb3\x82\x95\x91\x84\x95\xf0\x14\x29\xa9",
    // "objc_getClass" / M(Xor2) / S(121) / L(13)
    "\x06\x0b\x03\x0a\x36\x0e\x0c\x1d\x2a\x05\x08\x1a\x1a\x69\x58\xb0",
    // "_MASReceipt/receipt" / M(Xor4) / S(88) / L(19)
    "\xbf\xad\xa1\xb3\xb2\x85\x83\x85\x89\x90\x94\xcf\x92\x85\x83\x85\x89\x90\x94\xe0",
    // "X509_STORE_new" / M(Xor4) / S(144) / L(14)
    "\x58\x35\x30\x39\x5f\x53\x54\x4f\x52\x45\x5f\x6e\x65\x77\x00\x95",
    // "" / M(None) / S(0) / L(0)
    "\x2c\x7b\x84\x68\x2a\x3b\x6b\x14\x92\xde\xe7\x48\x5e\xe9\x8d\x7b\x9b\x41\x33\x85\x70\xa4\x32\xbf\xb5\x70\xad\x14\x14\x56\x57\xf6",
    // "kSecMatchSearchList" / M(Xor2) / S(58) / L(19)
    "\x45\x7d\x4b\x4d\x63\x4f\x5a\x4d\x46\x7d\x4b\x4f\x5c\x4d\x46\x62\x47\x5d\x5a\x2e",
    // "" / M(None) / S(0) / L(0)
    "\x6e\x8f\xc2\x56\xfb\xa2\x5b\xba\xcc\x43\x69\x1f\xaa\x10\x52\x6a\x51\x77\xe4\xe1\x29\x0a\x1a\xff\x6d\xd4\xdc\x00\x07\xe2\xd3\x03",
    // "globfree" / M(Xor3) / S(61) / L(8)
    "\x2a\x21\x22\x2f\x2b\x3f\x28\x28\x4d\x2c\x30\x71\x18\xce\x38\xd6",
    // "kSecMatchSubjectContains" / M(Xor1) / S(47) / L(24)
    "\x44\x7c\x4a\x4c\x62\x4e\x5b\x4c\x47\x7c\x5a\x4d\x45\x4a\x4c\x5b\x6c\x40\x41\x5b\x4e\x46\x41\x5c\x2f\x59\x06\xd8\x7c\x7b\xdf\x3a\x52",
    // "kCFTypeArrayCallBacks" / M(Xor3) / S(206) / L(21)
    "\x8f\xa7\xa2\xb0\x9d\x94\x81\xa5\x96\x96\x85\x9d\xa7\x85\x88\x88\xa6\x85\x87\x8f\x97\xe4",
    // "" / M(None) / S(0) / L(0)
    "\x40\xf9\xd9\x28\x5b\xba\x92\xa3\x2b\x7a\x7a\x14\x71\xd6\xe1\x6a\xb2\x39\xc3\xc5\xe2\x4f\x1d\xb4\x72\xf0\xe3\x33\xef\xe0\xe5\x96",
    // "" / M(None) / S(0) / L(0)
    "\x94\x59\xa8\x3e\x84\x18\xca\x72\x83\x1c\x3f\x98\x3d\x6f\x11\x83\x68\x83\x0b\x87\xa1\x1d\x03\x82\xf7\xcc\x4b\xcb\x42\x62\x4b\x4e",
    // "%02x:" / M(Xor1) / S(245) / L(5)
    "\xd0\xc5\xc7\x8d\xcf\xf5\x46\x68\xcb\x61\x1b\xc7\xbe\x27\x5e\xf4",
    // "CFDateCompare" / M(Xor2) / S(167) / L(13)
    "\xf4\xf1\xf3\xd6\xc3\xd2\xf4\xd8\xda\xc7\xd6\xc5\xd2\xb7\xb0\x5c",
    // "/System/Library/Frameworks/Security.framework/Security" / M(Xor4) / S(38) / L(54)
    "\x05\x79\x53\x59\x5e\x4f\x47\x05\x66\x43\x48\x58\x4b\x58\x53\x05\x6c\x58\x4b\x47\x4f\x5d\x45\x58\x41\x59\x05\x79\x4f\x49\x5f\x58\x43\x5e\x53\x04\x4c\x58\x4b\x47\x4f\x5d\x45\x58\x41\x05\x79\x4f\x49\x5f\x58\x43\x5e\x53\x2a",
    // "CFDictionaryAddValue" / M(Rot) / S(249) / L(20)
    "\x3c\x3f\x3d\x62\x5c\x6d\x62\x68\x67\x5a\x6b\x72\x3a\x5d\x5d\x4f\x5a\x65\x6e\x5e\xf9",
    // "PKCS7_free" / M(Xor1) / S(59) / L(10)
    "\x6b\x70\x78\x68\x0c\x64\x5d\x49\x5e\x5e\x3b\xdc\x22\xf0\x1a\x17",
    // "EVP_MD_CTX_init" / M(Xor3) / S(26) / L(15)
    "\x6f\x7c\x7a\x75\x67\x6e\x75\x69\x7e\x72\x75\x43\x44\x43\x5e\x2a",
    // "CFBundleUnloadExecutable" / M(Xor2) / S(112) / L(24)
    "\x12\x17\x13\x24\x3f\x35\x3d\x34\x04\x3f\x3d\x3e\x30\x35\x14\x29\x34\x32\x24\x25\x30\x33\x3d\x34\x51\x61\xa3\x8c\xb9\x3b\x75\xbf\x04",
    // "BIO_free" / M(Xor1) / S(172) / L(8)
    "\xee\xe5\xe3\xf3\xca\xde\xc9\xc9\xac\xdd\xd2\xb8\x53\x37\x2d\x77",
    // "/System/Library/Frameworks/Security.framework/Security" / M(Xor4) / S(166) / L(54)
    "\x85\xf9\xd3\xd9\xde\xcf\xc7\x85\xe6\xc3\xc8\xd8\xcb\xd8\xd3\x85\xec\xd8\xcb\xc7\xcf\xdd\xc5\xd8\xc1\xd9\x85\xf9\xcf\xc9\xdf\xd8\xc3\xde\xd3\x84\xcc\xd8\xcb\xc7\xcf\xdd\xc5\xd8\xc1\x85\xf9\xcf\xc9\xdf\xd8\xc3\xde\xd3\xaa",
    // "" / M(None) / S(0) / L(0)
    "\xf0\x88\xe4\x54\x08\x24\x61\x8a\x4f\xc7\x77\xe1\x8e\x48\xe2\x8a\xd2\x1b\xbd\x97\xb7\x6f\x8f\xd5\x96\x41\x96\xde\x7f\xae\x7e\xe2",
    // "SHA1_Init" / M(Xor2) / S(122) / L(9)
    "\x39\x22\x2b\x5b\x35\x23\x04\x03\x1e\x6a\x83\x0c\xd7\x41\x84\xc3",
    // "" / M(None) / S(0) / L(0)
    "\x7b\x40\x57\x09\x60\x23\xd9\x16\x09\xa7\x88\x2d\x35\x3d\x67\x29\x20\x70\xa1\xfe\xed\x92\x5d\xdd\xcc\xce\x8c\x34\x0a\xb5\xbd\x39",
    // "" / M(None) / S(0) / L(0)
    "\x6a\xd2\xfe\x3d\xc4\x91\x34\xf6\xd7\xcf\x47\xa6\xc7\x34\xc0\x7b\xe0\x58\x55\xe6\x54\xce\x9e\xfe\x50\xd1\x50\xc8\xa7\xec\x14\xc0",
    // "" / M(None) / S(0) / L(0)
    "\xe7\x46\xcd\xdf\x43\xbd\xa8\x26\x00\xc6\x42\x53\x60\xd9\x14\xbc\xa9\x81\xda\x12\x1b\xf1\x13\xa1\x9e\x62\x9e\x7e\xe4\x14\xc9\xd2",
    // "CFStringCreateWithCString" / M(Xor2) / S(2) / L(25)
    "\x63\x66\x73\x54\x52\x49\x4e\x47\x63\x52\x45\x41\x54\x45\x77\x49\x54\x48\x63\x73\x54\x52\x49\x4e\x47\x20\x78\x87\x31\x8c\xa6\xec\x96\x36",
    // "CFBundleGetIdentifier" / M(Xor2) / S(112) / L(21)
    "\x25\x20\x24\x13\x08\x02\x0a\x03\x21\x03\x12\x2f\x02\x03\x08\x12\x0f\x00\x0f\x03\x14\x66",
    // "" / M(None) / S(0) / L(0)
    "\x60\x60\x45\x5d\x8f\x2e\xdf\x54\x4d\xb6\x9b\xf5\xda\xfb\x74\xc9\x8f\xc9\x1c\x19\x4b\xc1\xa2\x9a\x42\xdf\x40\x21\xca\xa6\xdd\x32",
    // "CFBundleVersion" / M(Xor1) / S(152) / L(15)
    "\xdb\xde\xda\xed\xf6\xfc\xf4\xfd\xce\xfd\xea\xeb\xf1\xf7\xf6\x98",
    // "X509_free" / M(Xor1) / S(179) / L(9)
    "\xeb\x86\x83\x8a\xec\xd5\xc1\xd6\xd6\xb3\xa0\x09\xc6\xb8\x36\x62",
    // "dlsym" / M(Xor3) / S(82) / L(5)
    "\x06\x0e\x11\x1b\x0f\x62\x9c\xf3\x8a\xb6\x77\x38\xb7\x02\xc6\x94",
    // "%02X:" / M(Xor1) / S(82) / L(5)
    "\x77\x62\x60\x0a\x68\x52\x53\x99\xcb\x15\x86\x93\x3c\xaf\xa1\x52",
    // "" / M(None) / S(0) / L(0)
    "\xf5\xbc\x7f\x45\x5a\xf1\xe7\xd6\x94\xf2\x55\xe2\x7a\xb4\x3e\xbd\x5b\xb0\xc9\x62\x2e\x0e\x63\xd1\x51\x57\xb1\x79\x99\x4b\xd9\x7a",
    // "" / M(None) / S(0) / L(0)
    "\xe0\xd2\x30\x37\x20\xa1\x4d\x4c\x7f\x19\xde\x12\x63\xca\x45\x84\x50\x12\xbc\xea\xae\xd6\x19\x7f\x51\xd2\x45\x4f\x60\xb7\x46\xa4",
    // "" / M(None) / S(0) / L(0)
    "\xe3\x06\x61\x83\x66\xcc\xbd\x8f\x5d\x8c\x9d\xc7\x36\x22\x4e\xeb\x5f\xa1\x48\x18\xe4\x93\xa0\x35\x9c\xa8\x9a\xb3\x80\x0c\xc8\xa3",
    // "sha1" / M(Xor3) / S(108) / L(4)
    "\x0f\x14\x1d\x4d\x7c\xc3\x9b\x8b\x7b\xab\x3b\x31\xf5\x45\x0e\x33",
    // "X509_get_ext_by_OBJ" / M(Xor2) / S(97) / L(19)
    "\x2d\x40\x45\x4c\x2a\x12\x10\x01\x2a\x10\x0d\x01\x2a\x17\x0c\x2a\x3a\x37\x3f\x75",
    // "" / M(None) / S(0) / L(0)
    "\x94\xa7\x5a\x29\x1e\xd4\xda\xb1\x32\x9a\xe1\x00\x0c\x6e\xce\xb8\x75\xb6\x63\x50\x2e\x68\xce\x66\x54\x6d\x65\x3e\xd8\xe7\x3b\x33",
    // "pl.micropixels.NepTunes" / M(Xor3) / S(22) / L(23)
    "\x46\x5a\x18\x5b\x5f\x55\x44\x59\x46\x5f\x4e\x53\x5a\x45\x18\x78\x53\x46\x62\x43\x58\x53\x45\x36\x70\xb5\xdf\x6e\x6b\x1e\x4d\x97",
    // "CFDataGetBytePtr" / M(Xor4) / S(170) / L(16)
    "\x09\x0c\x0e\x2b\x3e\x2b\x0d\x2f\x3e\x08\x33\x3e\x2f\x1a\x3e\x38\x4a",
    // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor1) / S(248) / L(43)
    "\xbb\xbe\xad\xaa\xb4\xbb\x8a\x9d\x99\x8c\x9d\xaf\x91\x8c\x90\xbe\x91\x94\x9d\xab\x81\x8b\x8c\x9d\x95\xa8\x99\x8c\x90\xaa\x9d\x94\x99\x8c\x91\x8e\x9d\xac\x97\xba\x99\x8b\x9d\xf8\x3f\xfe\x13\x18\x46\xd0\x49\x63",
    // "EVP_MD_CTX_init" / M(Xor3) / S(121) / L(15)
    "\xcc\xdf\xd9\xd6\xc4\xcd\xd6\xca\xdd\xd1\xd6\xe0\xe7\xe0\xfd\x89",
    // "" / M(None) / S(0) / L(0)
    "\x6a\xe1\xca\x2b\x1d\x13\xc1\xd4\xf8\x11\xb9\x9a\x80\xa0\x7a\x69\x24\x2d\x11\x0a\x7b\x1d\x38\x76\x85\xea\x9f\xe0\x9f\x09\xa4\xc7",
    // "CFDateFormatterSetProperty" / M(Xor1) / S(221) / L(26)
    "\x9e\x9b\x99\xbc\xa9\xb8\x9b\xb2\xaf\xb0\xbc\xa9\xa9\xb8\xaf\x8e\xb8\xa9\x8d\xaf\xb2\xad\xb8\xaf\xa9\xa4\xdd\x8e\xc1\x20\x47\xa9\x2a\xfd\xc2",
    // "" / M(None) / S(0) / L(0)
    "\x88\xba\xe4\xa8\xc6\x39\x5a\x96\xbf\xd6\x4c\x28\x83\xeb\x79\x3e\x4e\x7d\x8e\x31\x49\xa1\x57\x6f\xac\x52\x88\x71\x46\x57\x19\x0a",
    // "SecCodeCopySigningInformation" / M(Xor3) / S(23) / L(29)
    "\x6e\x58\x5e\x7e\x52\x59\x58\x7e\x52\x4d\x44\x6e\x54\x5a\x53\x54\x53\x5a\x74\x53\x5b\x52\x4f\x50\x5c\x49\x54\x52\x53\x3d\xf8\xc4\x56\xc5\x73\x57\x24\x64",
    // "SHA1_Final" / M(Rot) / S(40) / L(10)
    "\x7b\x70\x69\x59\x87\x6e\x91\x96\x89\x94\x28\xc5\x76\x96\x5d\x6d",
    // "CFArrayCreateMutable" / M(Xor4) / S(234) / L(20)
    "\x71\x74\x73\x40\x40\x53\x4b\x71\x40\x57\x53\x46\x57\x7f\x47\x46\x53\x50\x5e\x57\x32",
    // "CFDateFormatterCreate" / M(Rot) / S(110) / L(21)
    "\xb1\xb4\xb2\xcf\xe2\xd3\xb4\xdd\xe0\xdb\xcf\xe2\xe2\xd3\xe0\xb1\xe0\xd3\xcf\xe2\xd3\x6e",
    // "CFBundleGetMainBundle" / M(Xor1) / S(79) / L(21)
    "\x0c\x09\x0d\x3a\x21\x2b\x23\x2a\x08\x2a\x3b\x02\x2e\x26\x21\x0d\x3a\x21\x2b\x23\x2a\x4f",
    // "%02X" / M(Xor1) / S(101) / L(4)
    "\x40\x55\x57\x3d\x65\xe6\xfe\x9e\xc2\x9d\x9f\x5b\x21\xa6\x32\xac",
    // "" / M(None) / S(0) / L(0)
    "\x56\xfb\xe6\x4f\xd1\x85\x3c\xd0\x2a\xb9\x1f\x8e\x34\x17\xc6\xd4\x1c\x32\xa7\x91\xac\x9a\x98\x22\x8e\xa2\xc1\x54\x07\x1a\xde\xee",
    // "CFEqual" / M(Xor4) / S(91) / L(7)
    "\xf3\xf6\xf5\xc1\xc5\xd1\xdc\xb0\x27\x22\xc8\x14\x67\xcf\x35\x45",
    // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor3) / S(103) / L(32)
    "\xf1\xf1\xf1\xf1\xaf\xa5\xaf\xc5\xc5\xaf\xa5\xaf\xec\xec\xaf\xdc\xaf\xc0\xc0\xaf\xb2\xaf\xe5\xe5\xaf\xb2\xaf\xfb\xfb\xaf\xd2\xaf\x88",
    // "OpenSSL_add_all_digests" / M(Xor1) / S(2) / L(23)
    "\x4d\x72\x67\x6c\x51\x51\x4e\x5d\x63\x66\x66\x5d\x63\x6e\x6e\x5d\x66\x6b\x65\x67\x71\x76\x71\x02\x17\x73\x0f\x9c\xf3\x2e\x4b\x62",
    // "PKCS7_get0_signers" / M(Xor2) / S(135) / L(18)
    "\xc4\xdf\xd7\xc7\xa3\xcb\xf3\xf1\xe0\xa4\xcb\xe7\xfd\xf3\xfa\xf1\xe6\xe7\x94",
    // "ASN1_INTEGER_get" / M(Rot) / S(239) / L(16)
    "\x30\x42\x3d\x20\x4e\x38\x3d\x43\x34\x36\x34\x41\x4e\x56\x54\x63\xef",
    // "sk_free" / M(Rot) / S(248) / L(7)
    "\x6b\x63\x57\x5e\x6a\x5d\x5d\xf8\x50\xf5\x30\x58\xf4\x05\xe1\x3a",
    // "" / M(None) / S(0) / L(0)
    "\xe7\x67\xdf\x01\x87\x62\x8b\x44\x2a\x97\x00\x6f\x92\xa9\x66\x15\xb8\x8a\x37\x1d\x8f\x0e\x10\xe1\x57\x46\x8f\xcb\xec\x00\x03\x36",
    // "CFArrayAppendValue" / M(Rot) / S(218) / L(18)
    "\x1d\x20\x1b\x4c\x4c\x3b\x53\x1b\x4a\x4a\x3f\x48\x3e\x30\x3b\x46\x4f\x3f\xda",
    // "" / M(None) / S(0) / L(0)
    "\x4a\xe0\x55\x2d\x65\xd0\x1e\xac\xed\x43\xbe\x5b\x7e\xdc\x91\x9b\xc9\x8c\x9c\xe8\x08\x5a\xbb\x0e\x90\x72\xc6\x63\x7e\x24\x13\x30",
    // "IOIteratorNext" / M(Rot) / S(220) / L(14)
    "\x25\x2b\x25\x50\x41\x4e\x3d\x50\x4b\x4e\x2a\x41\x54\x50\xdc\x9e",
    // "CC_SHA1_Update" / M(Xor4) / S(57) / L(14)
    "\xd3\xd3\xcf\xc3\xd8\xd1\xa1\xcf\xc5\xe0\xf4\xf1\xe4\xf5\x90\x67",
    // "SHA1" / M(Rot) / S(196) / L(4)
    "\x17\x0c\x05\xf5\xc4\x6c\x71\x25\x5c\x8b\xc6\x0f\x18\x2b\x11\x3f",
    // "" / M(None) / S(0) / L(0)
    "\xa3\x9a\x4c\x3c\x5f\x8d\x42\x22\xa9\x0f\xf8\x76\xb3\xaa\x25\xef\xce\x61\xe7\x58\x68\x47\x7f\x21\xdc\xcc\xba\x58\x67\x0e\x95\xc0",
    // "CFNumberCreate" / M(Xor3) / S(227) / L(14)
    "\xb0\xb5\xbd\x86\x9e\x91\x96\x81\xb0\x81\x96\x92\x87\x96\xf3\x4c",
    // "init" / M(Rot) / S(55) / L(4)
    "\xa0\xa5\xa0\xab\x37\x53\x4a\x91\xc3\x9e\xd0\x1d\x55\x28\xca\x64",
    // "" / M(None) / S(0) / L(0)
    "\xdf\xb6\x24\x53\x20\x0e\xfe\x07\x79\xb2\x4e\x43\x7d\xf5\xc7\xcc\x29\x2e\x5d\x89\xfb\x1d\x97\x0d\xea\xa1\xc2\x07\xa7\xbd\x80\xcb",
    // "IOMACAddress" / M(Xor4) / S(215) / L(12)
    "\x39\x3f\x3d\x31\x33\x31\x14\x14\x02\x15\x03\x03\x70\x74\xe8\x77",
    // "ASN1_get_object" / M(Xor4) / S(241) / L(15)
    "\x51\x43\x5e\x21\x4f\x77\x75\x64\x4f\x7f\x72\x7a\x75\x73\x64\x10",
    // "SecCodeCopySigningInformation" / M(Xor2) / S(72) / L(29)
    "\x3d\x0b\x0d\x2d\x01\x0a\x0b\x2d\x01\x1e\x17\x3d\x07\x09\x00\x07\x00\x09\x27\x00\x08\x01\x1c\x03\x0f\x1a\x07\x01\x00\x6e\x40\x69\xda\x6f\x4f\xb8\x6e\x12",
    // "1.50" / M(Rot) / S(92) / L(4)
    "\x8d\x8a\x91\x8c\x5c\x48\xf8\xbf\x09\xc8\x99\x32\x28\xf8\xc1\xb9",
    // "CC_SHA1" / M(Xor3) / S(78) / L(7)
    "\x1d\x1d\x01\x0d\x16\x1f\x6f\x5e\xfb\xa8\x18\xe5\x42\x0e\xa6\x0b",
    // "CFStringGetFileSystemRepresentation" / M(Rot) / S(194) / L(35)
    "\x05\x08\x15\x36\x34\x2b\x30\x29\x09\x27\x36\x08\x2b\x2e\x27\x15\x3b\x35\x36\x27\x2f\x14\x27\x32\x34\x27\x35\x27\x30\x36\x23\x36\x2b\x31\x30\xc2",
    // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor1) / S(65) / L(66)
    "\x6e\x12\x38\x32\x35\x24\x2c\x6e\x0d\x28\x23\x33\x20\x33\x38\x6e\x07\x33\x20\x2c\x24\x36\x2e\x33\x2a\x32\x6e\x02\x2e\x33\x24\x07\x2e\x34\x2f\x25\x20\x35\x28\x2e\x2f\x6f\x27\x33\x20\x2c\x24\x36\x2e\x33\x2a\x6e\x02\x2e\x33\x24\x07\x2e\x34\x2f\x25\x20\x35\x28\x2e\x2f\x41",
    // "CFDateCompare" / M(Rot) / S(58) / L(13)
    "\x7d\x80\x7e\x9b\xae\x9f\x7d\xa9\xa7\xaa\x9b\xac\x9f\x3a\x0c\xca",
    // "OpenSSL_add_all_digests" / M(Xor4) / S(56) / L(23)
    "\x4f\x70\x65\x6e\x53\x53\x4c\x5f\x61\x64\x64\x5f\x61\x6c\x6c\x5f\x64\x69\x67\x65\x73\x74\x73\x00\x84\x30\x03\x8a\x88\x94\x7b\x79",
    // "kSecClassCertificate" / M(Xor2) / S(156) / L(20)
    "\xe2\xda\xec\xea\xca\xe5\xe8\xfa\xfa\xca\xec\xfb\xfd\xe0\xef\xe0\xea\xe8\xfd\xec\x89",
    // "ASN1_INTEGER_get" / M(Rot) / S(12) / L(16)
    "\x4d\x5f\x5a\x3d\x6b\x55\x5a\x60\x51\x53\x51\x5e\x6b\x73\x71\x80\x0c",
    // "SecKeychainSearchCopyNext" / M(Xor1) / S(69) / L(25)
    "\x16\x20\x26\x0e\x20\x3c\x26\x2d\x24\x2c\x2b\x16\x20\x24\x37\x26\x2d\x06\x2a\x35\x3c\x0b\x20\x3d\x31\x45\x58\x00\x47\xfd\x84\xa3\xc3\x72",
    // "" / M(None) / S(0) / L(0)
    "\x90\x68\xdf\x1f\x4b\xe8\xfb\x9b\xe1\xa8\xbb\xa6\x85\xe4\x5f\x32\x15\xfd\x7e\x7e\xa9\x54\x17\x28\xfe\xd9\x06\xa3\x29\xf3\x2c\xa5",
    // "X509_get_ext_by_OBJ" / M(Rot) / S(35) / L(19)
    "\x7b\x58\x53\x5c\x82\x8a\x88\x97\x82\x88\x9b\x97\x82\x85\x9c\x82\x72\x65\x6d\x23",
    // "" / M(None) / S(0) / L(0)
    "\xd1\x52\x9b\x9a\x2a\x54\x6f\xa0\x2f\x37\xf9\xa3\xb8\x63\x56\x09\xee\x55\x34\xe3\xba\x9d\xc1\xd5\xed\x77\x66\xd5\xdf\xda\xb3\x80",
    // "strlen" / M(Xor2) / S(72) / L(6)
    "\x2b\x2c\x2a\x34\x3d\x36\x58\x89\x7c\x6e\xf6\x95\xa2\x10\xe7\x49",
    // "SecCodeCopySigningInformation" / M(Rot) / S(236) / L(29)
    "\x3f\x51\x4f\x2f\x5b\x50\x51\x2f\x5b\x5c\x65\x3f\x55\x53\x5a\x55\x5a\x53\x35\x5a\x52\x5b\x5e\x59\x4d\x60\x55\x5b\x5a\xec\x37\xdc\x5a\x13\xbe\xec\xc6\xf2",
    // "kSecMatchSearchList" / M(Rot) / S(75) / L(19)
    "\xb6\x9e\xb0\xae\x98\xac\xbf\xae\xb3\x9e\xb0\xac\xbd\xae\xb3\x97\xb4\xbe\xbf\x4b",
    // "kCFTypeDictionaryValueCallBacks" / M(Xor1) / S(81) / L(31)
    "\x3a\x12\x17\x05\x28\x21\x34\x15\x38\x32\x25\x38\x3e\x3f\x30\x23\x28\x07\x30\x3d\x24\x34\x12\x30\x3d\x3d\x13\x30\x32\x3a\x22\x51",
    // "" / M(None) / S(0) / L(0)
    "\x2d\x18\x72\xe0\x1e\x03\xa0\xe2\xbd\x88\x25\x34\x48\xac\x86\x31\x64\x9d\x11\xff\x3b\x56\xc1\x20\xb6\x32\x7d\x62\x73\x56\x8e\x9e",
    // "X509_NAME_get_text_by_NID" / M(Rot) / S(62) / L(25)
    "\x96\x73\x6e\x77\x9d\x8c\x7f\x8b\x83\x9d\xa5\xa3\xb2\x9d\xb2\xa3\xb6\xb2\x9d\xa0\xb7\x9d\x8c\x87\x82\x3e\xa0\x08\xb2\x23\xbf\x6a\x6f\x34",
    // "" / M(None) / S(0) / L(0)
    "\xaf\x7b\xec\x81\x9f\xe3\x1c\x28\x57\x24\xa2\x50\xf7\x27\xdf\x1c\x62\xdb\xc4\x36\xcf\x02\x59\x5a\x7a\xdc\x9e\x87\x26\x8f\xad\x92",
    // "PKCS7_free" / M(Xor3) / S(56) / L(10)
    "\x18\x03\x0b\x1b\x7f\x17\x2e\x3a\x2d\x2d\x48\xc5\xad\x1f\x85\xf6",
    // "kSecMatchLimitAll" / M(Xor2) / S(223) / L(17)
    "\xa6\x9e\xa8\xae\x80\xac\xb9\xae\xa5\x81\xa4\xa0\xa4\xb9\x8c\xa1\xa1\xcd",
    // "SecCertificateCopyData" / M(Xor3) / S(253) / L(22)
    "\x47\x71\x77\x57\x71\x66\x60\x7d\x72\x7d\x77\x75\x60\x71\x57\x7b\x64\x6d\x50\x75\x60\x75\x14",
    // "" / M(None) / S(0) / L(0)
    "\x7b\x86\x32\xdf\x18\x74\x39\x77\x03\x03\x84\x58\xa6\xa2\x9c\xae\x24\x00\x0c\x56\xac\xe3\xf2\xa8\xdb\xdf\xce\x0e\x0a\xe0\x31\x79",
    // "CFDateFormatterCreate" / M(Xor3) / S(87) / L(21)
    "\x2e\x2b\x29\x0c\x19\x08\x2b\x02\x1f\x00\x0c\x19\x19\x08\x1f\x2e\x1f\x08\x0c\x19\x08\x6d",
    // "ASN1_INTEGER_free" / M(Rot) / S(212) / L(17)
    "\x15\x27\x22\x05\x33\x1d\x22\x28\x19\x1b\x19\x26\x33\x3a\x46\x39\x39\xd4",
    // "glob" / M(Xor3) / S(45) / L(4)
    "\x5a\x51\x52\x5f\x3d\x9e\x03\x01\x08\x98\x2e\x9a\x79\xe4\x17\x9f",
    // "" / M(None) / S(0) / L(0)
    "\x30\x50\xdf\xfc\xe0\x44\xda\xc4\xca\xda\xfb\x70\x5a\x1c\x87\x79\x55\x73\xe0\x5d\x02\x02\x45\x7f\x29\xb7\xab\x8d\xc9\xea\xb2\x3d",
    // "CFDictionaryGetTypeID" / M(Xor1) / S(214) / L(21)
    "\x95\x90\x92\xbf\xb5\xa2\xbf\xb9\xb8\xb7\xa4\xaf\x91\xb3\xa2\x82\xaf\xa6\xb3\x9f\x92\xd6",
    // "SecKeychainSearchCreateFromAttributes" / M(Xor4) / S(128) / L(37)
    "\x53\x65\x63\x4b\x65\x79\x63\x68\x61\x69\x6e\x53\x65\x61\x72\x63\x68\x43\x72\x65\x61\x74\x65\x46\x72\x6f\x6d\x41\x74\x74\x72\x69\x62\x75\x74\x65\x73\x00",
    // "sel_registerName" / M(Xor2) / S(155) / L(16)
    "\xf9\xef\xe6\xd5\xf8\xef\xed\xe3\xf9\xfe\xef\xf8\xc4\xeb\xe7\xef\x8a",
    // "" / M(None) / S(0) / L(0)
    "\xf7\xcb\xac\x98\x6e\xec\xb6\x17\x4c\xc8\xb1\x69\xc7\x85\xc7\xc6\x2a\xc0\x9f\xb5\x10\x4f\xc3\xb4\x8f\xb6\xd9\x27\xa1\xf3\x63\xd9",
    // "" / M(None) / S(0) / L(0)
    "\x40\x5e\x87\x70\x3f\x9f\xf2\x0a\xa0\x85\x1c\xd2\xfd\x68\x6d\x39\x60\x18\xba\x5d\xe9\x31\x97\xa7\x14\xc6\x24\x61\xac\xf0\x8c\x10",
    // "X509_STORE_add_cert" / M(Xor4) / S(149) / L(19)
    "\xfc\x91\x94\x9d\xfb\xf7\xf0\xeb\xf6\xe1\xfb\xc5\xc0\xc0\xfb\xc7\xc1\xd6\xd0\xa4",
    // "X509_get_ext_by_OBJ" / M(Rot) / S(95) / L(19)
    "\xb7\x94\x8f\x98\xbe\xc6\xc4\xd3\xbe\xc4\xd7\xd3\xbe\xc1\xd8\xbe\xae\xa1\xa9\x5f",
    // "en0" / M(Xor2) / S(19) / L(3)
    "\x66\x6d\x33\x03\x01\x7e\xdb\x23\xcd\x86\x6a\x8e\x96\x83\xea\x29",
    // "" / M(None) / S(0) / L(0)
    "\x0c\x03\xb8\x50\xbe\xdb\x8f\xd6\x89\xb2\x81\x19\xba\xd2\x93\x9b\xb7\x5b\xd0\x54\x37\xc9\x7d\xa1\x1f\x60\x83\x41\xaa\x6f\x8c\x48",
    // "." / M(Xor4) / S(148) / L(1)
    "\x6e\x40\x25\x4d\x6d\x6f\x2f\x57\xbc\xc8\x21\x43\x7f\xbf\xee\xd3",
    // "CFStringCompare" / M(Rot) / S(82) / L(15)
    "\x95\x98\xa5\xc6\xc4\xbb\xc0\xb9\x95\xc1\xbf\xc2\xb3\xc4\xb7\x52",
    // "" / M(None) / S(0) / L(0)
    "\x93\xf2\xd9\x03\xd6\x61\xdb\x83\x57\xaf\x77\xc0\xce\x40\x8d\x38\x8b\xd2\x6c\x67\x6f\x79\xf7\x12\x60\x56\x13\x9a\x47\x33\x69\x7e",
    // "ASN1_OBJECT_free" / M(Xor4) / S(97) / L(16)
    "\x30\x22\x3f\x40\x2e\x3e\x33\x3b\x34\x32\x25\x2e\x17\x03\x14\x14\x71",
    // "kSecClass" / M(Xor3) / S(126) / L(9)
    "\xe5\xdd\xeb\xed\xcd\xe2\xef\xfd\xfd\x8e\x0b\x2a\x58\x29\x07\x29",
    // "CFURLCreateCopyAppendingPathComponent" / M(Xor2) / S(130) / L(37)
    "\xe7\xe2\xf1\xf6\xe8\xe7\xd6\xc1\xc5\xd0\xc1\xe7\xcb\xd4\xdd\xe5\xd4\xd4\xc1\xca\xc0\xcd\xca\xc3\xf4\xc5\xd0\xcc\xe7\xcb\xc9\xd4\xcb\xca\xc1\xca\xd0\xa4",
    // "dlsym" / M(Rot) / S(251) / L(5)
    "\x5f\x67\x6e\x74\x68\xfb\xf1\x2f\x61\x24\x2f\xd3\x57\xe2\xd2\x88",
    // "init" / M(Xor1) / S(191) / L(4)
    "\xd6\xd1\xd6\xcb\xbf\x23\xb7\x04\xf8\xfd\x88\xcf\xab\x67\x0c\x24",
    // "dlsym" / M(Xor4) / S(173) / L(5)
    "\xb4\xbc\xa3\xa9\xbd\xd0\x09\x64\x8f\xe1\x16\x92\x04\x45\x61\xe4",
    // "CFDateFormatterSetFormat" / M(Rot) / S(123) / L(24)
    "\xbe\xc1\xbf\xdc\xef\xe0\xc1\xea\xed\xe8\xdc\xef\xef\xe0\xed\xce\xe0\xef\xc1\xea\xed\xe8\xdc\xef\x7b\xac\xa3\xf3\xc7\x1c\x5c\x55\x5d",
    // "" / M(None) / S(0) / L(0)
    "\x5d\x1e\xd5\xc1\xa7\xd0\x64\x95\x32\xcf\x7f\xd4\xab\x46\x40\x88\x26\x94\xb8\x63\x05\x4c\xc2\x28\xd1\x16\x62\xc4\x7e\x5d\x27\xc4",
    // "" / M(None) / S(0) / L(0)
    "\x5d\x56\x17\xd5\x96\xc5\x84\x5b\x1d\x05\x3d\xd2\xf3\x5e\x86\x74\x69\x7c\xaf\x75\xda\xab\xf2\x00\x80\x4a\x4c\x85\xde\x64\x9c\xd6",
    // "kSecReturnRef" / M(Xor4) / S(161) / L(13)
    "\x7b\x43\x75\x73\x42\x75\x64\x65\x62\x7e\x42\x75\x76\x10\x6c\xb7",
    // "kSecClass" / M(Xor3) / S(50) / L(9)
    "\x29\x11\x27\x21\x01\x2e\x23\x31\x31\x42\xb1\x5b\x51\xc7\xd7\xbb",
    // "SHA1" / M(Rot) / S(94) / L(4)
    "\xb1\xa6\x9f\x8f\x5e\x9d\x46\xab\x7a\x8b\x24\x42\xfc\x0b\x61\x3f",
    // "BIO_write" / M(Xor4) / S(190) / L(9)
    "\xa2\xa9\xaf\xbf\x97\x92\x89\x94\x85\xe0\x6d\x16\xce\x1c\x1e\x27",
    // "SecItemCopyMatching" / M(Xor4) / S(211) / L(19)
    "\x2f\x19\x1f\x35\x08\x19\x11\x3f\x13\x0c\x05\x31\x1d\x08\x1f\x14\x15\x12\x1b\x7c",
    // "glob" / M(Xor3) / S(98) / L(4)
    "\x15\x1e\x1d\x10\x72\xf6\x32\x10\xae\xd9\xcd\x2d\x9e\xfb\xe6\xec",
    // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor4) / S(205) / L(32)
    "\x14\x14\x14\x14\x4a\x40\x4a\x20\x20\x4a\x40\x4a\x09\x09\x4a\x39\x4a\x25\x25\x4a\x57\x4a\x00\x00\x4a\x57\x4a\x1e\x1e\x4a\x37\x4a\x6d",
    // "CFBundleCopyBundleURL" / M(Rot) / S(238) / L(21)
    "\x31\x34\x30\x63\x5c\x52\x5a\x53\x31\x5d\x5e\x67\x30\x63\x5c\x52\x5a\x53\x43\x40\x3a\xee",
    // "" / M(None) / S(0) / L(0)
    "\x06\x3b\x22\x6c\x59\xb5\xe5\x46\x85\x88\x57\xfe\x00\x57\x99\x36\xf3\x74\x7f\x89\xb4\xe4\x2f\xdf\x81\x2c\xd3\xca\x59\xfa\x88\xf0",
    // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Rot) / S(167) / L(40)
    "\xdd\xd8\xd8\xec\xdc\xe9\xdd\xdd\xd9\xea\xdc\xe0\xda\xe8\xd7\xdf\xed\xed\xdc\xdf\xeb\xd8\xdb\xe8\xec\xd9\xd9\xdb\xdc\xd9\xeb\xd8\xe0\xdf\xeb\xed\xdd\xea\xdd\xd7\xa7\xe4\xb1\xa3\xa3\x27\x90\xd6\x05",
    // "CFReadStreamOpen" / M(Xor1) / S(177) / L(16)
    "\xf2\xf7\xe3\xd4\xd0\xd5\xe2\xc5\xc3\xd4\xd0\xdc\xfe\xc1\xd4\xdf\xb1",
    // "alloc" / M(Xor4) / S(231) / L(5)
    "\x11\x1c\x1c\x1f\x13\x70\x3c\xc1\x41\xf2\xf5\x65\x55\x60\x78\xd9",
    // "" / M(None) / S(0) / L(0)
    "\xe9\xdc\x7b\x6b\x48\x4b\x23\x8f\xf2\xeb\x4d\xfb\x9c\x8f\xb1\x35\x04\x88\x9d\x20\x62\x7e\x94\x29\xf1\x09\x1e\x57\xa8\xa4\x22\x4f",
    // "SecCodeCheckValidityWithErrors" / M(Xor1) / S(252) / L(30)
    "\xaf\x99\x9f\xbf\x93\x98\x99\xbf\x94\x99\x9f\x97\xaa\x9d\x90\x95\x98\x95\x88\x85\xab\x95\x88\x94\xb9\x8e\x8e\x93\x8e\x8f\xfc\x1b\x7e\x17\x7b\x7a\x86\x9d\xdc",
    // "SecCodeCopySelf" / M(Xor2) / S(253) / L(15)
    "\xbe\x88\x8e\xae\x82\x89\x88\xae\x82\x9d\x94\xbe\x88\x81\x8b\xed",
    // "" / M(None) / S(0) / L(0)
    "\xeb\xd0\xbf\xb5\x36\x2e\xd1\x29\x35\x0e\xf2\x1c\x4b\x26\x62\xc7\xea\xcd\x38\x33\xee\x5d\x49\x1f\x99\x55\xa1\x78\x22\xf7\x38\xf7",
    // "CFGetTypeID" / M(Xor2) / S(176) / L(11)
    "\xe3\xe6\xe7\xc5\xd4\xf4\xd9\xd0\xc5\xe9\xe4\xa0\xd5\x03\xb3\xad",
    // "" / M(None) / S(0) / L(0)
    "\xb2\xd5\x76\xb9\xbd\x2c\x59\xa2\xa6\x6d\x61\xa4\x85\x03\x53\x6a\x95\xa1\x7d\xc1\xd2\xb7\x2d\x4e\xc2\x36\x91\xde\xc3\xda\x96\x65",
    // "_MASReceipt/receipt" / M(Xor3) / S(208) / L(19)
    "\xbb\xa9\xa5\xb7\xb6\x81\x87\x81\x8d\x94\x90\xcb\x96\x81\x87\x81\x8d\x94\x90\xe4",
    // "SecCodeCheckValidity" / M(Xor1) / S(93) / L(20)
    "\x0e\x38\x3e\x1e\x32\x39\x38\x1e\x35\x38\x3e\x36\x0b\x3c\x31\x34\x39\x34\x29\x24\x5d",
    // "IOBSDNameMatching" / M(Xor4) / S(175) / L(17)
    "\x07\x01\x0c\x1d\x0a\x00\x2f\x23\x2b\x03\x2f\x3a\x2d\x26\x27\x20\x29\x4e",
    // "_MASReceipt/receipt" / M(Xor2) / S(170) / L(19)
    "\xe1\xf3\xff\xed\xec\xdb\xdd\xdb\xd7\xce\xca\x91\xcc\xdb\xdd\xdb\xd7\xce\xca\xbe",
    // "IOIteratorNext" / M(Xor3) / S(111) / L(14)
    "\x36\x30\x36\x0b\x1a\x0d\x1e\x0b\x10\x0d\x31\x1a\x07\x0b\x7f\x25",
    // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Rot) / S(226) / L(48)
    "\x11\x35\x5b\x55\x56\x47\x4f\x11\x2e\x4b\x44\x54\x43\x54\x5b\x11\x28\x54\x43\x4f\x47\x59\x51\x54\x4d\x55\x11\x2b\x31\x2d\x4b\x56\x10\x48\x54\x43\x4f\x47\x59\x51\x54\x4d\x11\x2b\x31\x2d\x4b\x56\xe2",
    // "" / M(None) / S(0) / L(0)
    "\x3a\x6b\xa5\xee\x64\xfc\x7d\x42\x4e\x21\xc6\x1d\xf5\xf3\xe5\x94\x84\x5f\xbc\x72\x34\x19\xdb\x69\x45\x29\x08\x48\x06\x90\x80\x87",
    // "kCFTypeDictionaryKeyCallBacks" / M(Xor4) / S(46) / L(29)
    "\xbf\x97\x92\x80\xad\xa4\xb1\x90\xbd\xb7\xa0\xbd\xbb\xba\xb5\xa6\xad\x9f\xb1\xad\x97\xb5\xb8\xb8\x96\xb5\xb7\xbf\xa7\xd4\xbb\x82\x2c\x6f\xfa\x75\x7c\x16",
    // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor4) / S(77) / L(66)
    "\x08\x74\x5e\x54\x53\x42\x4a\x08\x6b\x4e\x45\x55\x46\x55\x5e\x08\x61\x55\x46\x4a\x42\x50\x48\x55\x4c\x54\x08\x64\x48\x55\x42\x61\x48\x52\x49\x43\x46\x53\x4e\x48\x49\x09\x41\x55\x46\x4a\x42\x50\x48\x55\x4c\x08\x64\x48\x55\x42\x61\x48\x52\x49\x43\x46\x53\x4e\x48\x49\x27",
    // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor2) / S(219) / L(59)
    "\xa9\xae\xa5\xae\xda\xa5\xaa\xdd\xa5\xa9\xa9\xa5\xad\xdc\xa5\xaa\xa6\xa5\xac\xde\xa5\xaf\xa7\xa5\xd9\xd9\xa5\xaa\xa7\xa5\xdb\xae\xa5\xab\xde\xa5\xda\xad\xa5\xad\xab\xa5\xaa\xad\xa5\xdb\xae\xa5\xa6\xa7\xa5\xdb\xd9\xa5\xa9\xdc\xa5\xa9\xaf\x9f\x76\xf3\xbf\x39\x3a\x0b\x07\x45",
    // "CFDictionaryGetTypeID" / M(Xor2) / S(176) / L(21)
    "\xe5\xe0\xe2\xcf\xc5\xd2\xcf\xc9\xc8\xc7\xd4\xdf\xe1\xc3\xd2\xf2\xdf\xd6\xc3\xef\xe2\xa6",
    // "" / M(None) / S(0) / L(0)
    "\x8c\x86\x3e\x2f\x7a\xc9\x97\xe8\x11\x02\x65\xad\x3e\x47\xbe\x7d\xaf\x07\x57\x9d\xb5\xf6\x23\xac\x44\x3d\x34\x7d\x7e\xa0\x43\x9e",
    // "X509_NAME_get_text_by_NID" / M(Xor1) / S(248) / L(25)
    "\xa0\xcd\xc8\xc1\xa7\xb6\xb9\xb5\xbd\xa7\x9f\x9d\x8c\xa7\x8c\x9d\x80\x8c\xa7\x9a\x81\xa7\xb6\xb1\xbc\xf8\x32\xd5\xff\xdf\x98\x25\x53\xa8",
    // "ASN1_INTEGER_get" / M(Xor2) / S(161) / L(16)
    "\xf1\xe3\xfe\x81\xef\xf9\xfe\xe4\xf5\xf7\xf5\xe2\xef\xd7\xd5\xc4\xb0",
    // "" / M(None) / S(0) / L(0)
    "\xb6\xfb\xd8\x2a\xe3\xfa\x58\xdd\x8c\x03\x68\x17\x3c\x2a\xff\x53\x67\x05\x8b\x3f\xdc\x6f\xce\x7d\x84\xa0\x56\xb0\x20\x6d\x29\x87",
    // "ASN1_INTEGER_free" / M(Xor3) / S(25) / L(17)
    "\x6a\x78\x65\x1a\x74\x62\x65\x7f\x6e\x6c\x6e\x79\x74\x4d\x59\x4e\x4e\x2b",
    // "CFURLCreateCopyAppendingPathComponent" / M(Rot) / S(230) / L(37)
    "\x29\x2c\x3b\x38\x32\x29\x58\x4b\x47\x5a\x4b\x29\x55\x56\x5f\x27\x56\x56\x4b\x54\x4a\x4f\x54\x4d\x36\x47\x5a\x4e\x29\x55\x53\x56\x55\x54\x4b\x54\x5a\xe6",
    // "objc_msgSend" / M(Xor2) / S(252) / L(12)
    "\x83\x8e\x86\x8f\xb3\x81\x9f\x8b\xbf\x89\x82\x88\xec\x54\x93\x1c",
    // "d2i_X509_bio" / M(Xor4) / S(53) / L(12)
    "\x34\x62\x39\x0f\x08\x65\x60\x69\x0f\x32\x39\x3f\x50\x0d\xe8\xe6",
    // "alloc" / M(Xor2) / S(187) / L(5)
    "\xca\xc7\xc7\xc4\xc8\xab\xa9\x20\x0e\xb5\x9d\x74\x17\x51\x20\x6c",
    // "receipt" / M(Xor3) / S(14) / L(7)
    "\x6c\x7b\x7d\x7b\x77\x6e\x6a\x1e\x9e\x05\x27\xec\x5e\x04\xc5\xe9",
    // "RTLD_MAIN_ONLY" / M(Xor1) / S(83) / L(14)
    "\x01\x07\x1f\x17\x0c\x1e\x12\x1a\x1d\x0c\x1c\x1d\x1f\x0a\x53\xa8",
    // "" / M(None) / S(0) / L(0)
    "\x83\x1e\xf9\x8b\x37\xc1\x9d\xa1\x49\xb2\x2e\xe2\x5e\x2c\x05\x7c\x35\xfd\xbf\x31\x8d\xed\xb9\xb5\xdd\x5a\x2c\x10\x9e\x2c\x65\x1d",
    // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor2) / S(160) / L(40)
    "\xa7\xa0\xa0\xf4\xa4\xf3\xa7\xa7\xa3\xf2\xa4\xa8\xa2\xf0\xa1\xa9\xf7\xf7\xa4\xa9\xf5\xa0\xa5\xf0\xf4\xa3\xa3\xa5\xa4\xa3\xf5\xa0\xa8\xa9\xf5\xf7\xa7\xf2\xa7\xa1\x91\xf0\x82\x8b\x29\x7c\x7f\x4e\x44",
    // "IOObjectRelease" / M(Rot) / S(217) / L(15)
    "\x22\x28\x28\x3b\x43\x3e\x3c\x4d\x2b\x3e\x45\x3e\x3a\x4c\x3e\xd9",
    // "SecKeychainOpen" / M(Xor3) / S(106) / L(15)
    "\x29\x1f\x19\x31\x1f\x03\x19\x12\x1b\x13\x14\x35\x0a\x1f\x14\x7a",
    // "IORegistryEntryGetParentEntry" / M(Xor4) / S(123) / L(29)
    "\x0b\x0d\x10\x27\x25\x2b\x31\x36\x30\x3b\x07\x2c\x36\x30\x3b\x05\x27\x36\x12\x23\x30\x27\x2c\x36\x07\x2c\x36\x30\x3b\x42\x32\x7c\xb1\xd5\x47\xa4\x07\xbc",
    // "CFReadStreamRead" / M(Xor4) / S(104) / L(16)
    "\xab\xae\xba\x8d\x89\x8c\xbb\x9c\x9a\x8d\x89\x85\xba\x8d\x89\x8c\xe8",
    // "kCFDateFormatterTimeZone" / M(Rot) / S(165) / L(24)
    "\x10\xe8\xeb\xe9\x06\x19\x0a\xeb\x14\x17\x12\x06\x19\x19\x0a\x17\xf9\x0e\x12\x0a\xff\x14\x13\x0a\xa5\x37\xe5\xe9\x24\x1e\x89\x99\x26",
    // "CFReadStreamRead" / M(Xor4) / S(39) / L(16)
    "\xd4\xd1\xc5\xf2\xf6\xf3\xc4\xe3\xe5\xf2\xf6\xfa\xc5\xf2\xf6\xf3\x97",
    // "SecItemCopyMatching" / M(Rot) / S(60) / L(19)
    "\x8f\xa1\x9f\x85\xb0\xa1\xa9\x7f\xab\xac\xb5\x89\x9d\xb0\x9f\xa4\xa5\xaa\xa3\x3c",
    // "1.50" / M(Xor1) / S(48) / L(4)
    "\x01\x1e\x05\x00\x30\x17\xfe\xaf\xf9\x62\x52\x62\x02\xce\x29\x71",
    // "/usr/lib/libSystem.dylib" / M(Xor4) / S(189) / L(24)
    "\x72\x28\x2e\x2f\x72\x31\x34\x3f\x72\x31\x34\x3f\x0e\x24\x2e\x29\x38\x30\x73\x39\x24\x31\x34\x3f\x5d\x2e\x83\x3a\x66\x2c\x84\xe2\x5d",
    // "X509_NAME_get_text_by_NID" / M(Xor3) / S(195) / L(25)
    "\xbd\xd0\xd5\xdc\xba\xab\xa4\xa8\xa0\xba\x82\x80\x91\xba\x91\x80\x9d\x91\xba\x87\x9c\xba\xab\xac\xa1\xe5\x71\x25\x03\x8e\x50\xc3\x48\x97",
    // "Contents" / M(Xor4) / S(188) / L(8)
    "\x83\xaf\xae\xb4\xa5\xae\xb4\xb3\xc0\x47\xc7\x02\x60\xcc\xf1\x16",
    // "%02X" / M(Xor3) / S(249) / L(4)
    "\x2c\x39\x3b\x51\x09\x8a\x4a\xb6\x47\x4d\x1f\xdc\xe0\xf8\x80\x47",
    // "kCFDateFormatterTimeZone" / M(Xor4) / S(106) / L(24)
    "\xc1\xe9\xec\xee\xcb\xde\xcf\xec\xc5\xd8\xc7\xcb\xde\xde\xcf\xd8\xfe\xc3\xc7\xcf\xf0\xc5\xc4\xcf\xaa\x74\x80\x1e\x16\xed\xcc\x87\x9d",
    // "PKCS7_get0_signers" / M(Xor2) / S(68) / L(18)
    "\x07\x1c\x14\x04\x60\x08\x30\x32\x23\x67\x08\x24\x3e\x30\x39\x32\x25\x24\x57",
    // "" / M(None) / S(0) / L(0)
    "\x9b\x3d\x25\xf1\xcc\xea\xf3\x9b\xc2\x77\x50\xf9\x32\x84\x35\x7b\x72\xdf\xf2\xe4\x8e\x77\xf8\x7c\xf6\xd5\xb7\x7c\xa2\x93\x81\xe9",
    // "CFPropertyListCreateWithData" / M(Xor2) / S(169) / L(28)
    "\xcf\xca\xdc\xfe\xe3\xfc\xe9\xfe\xf8\xf5\xc0\xe5\xff\xf8\xcf\xfe\xe9\xed\xf8\xe9\xdb\xe5\xf8\xe4\xc8\xed\xf8\xed\x8c\xe9\x2e\x79\x7d\x46\x6c\xef\x14",
    // "CFBundleUnloadExecutable" / M(Xor1) / S(163) / L(24)
    "\xe0\xe5\xe1\xd6\xcd\xc7\xcf\xc6\xf6\xcd\xcf\xcc\xc2\xc7\xe6\xdb\xc6\xc0\xd6\xd7\xc2\xc1\xcf\xc6\xa3\xa7\x4e\x64\xc3\xdf\x1b\x08\x27",
    // "sk_value" / M(Xor4) / S(69) / L(8)
    "\x23\x3b\x0f\x26\x31\x3c\x25\x35\x50\x11\x20\xce\x0a\xdf\xd0\xf1",
    // "sk_free" / M(Rot) / S(197) / L(7)
    "\x38\x30\x24\x2b\x37\x2a\x2a\xc5\xd6\x94\xad\x20\x4f\x22\x03\x5f",
    // "" / M(None) / S(0) / L(0)
    "\x75\x5a\xc7\xad\x0d\x1a\x3b\xd3\x89\x7d\xf7\x8b\xe4\x81\x1a\xff\xce\xbe\x33\x98\x2a\xbe\xd0\xd1\xcb\xed\x96\xde\x31\x82\x27\xe9",
    // "SHA1_Final" / M(Xor3) / S(24) / L(10)
    "\x7b\x60\x69\x19\x77\x6e\x41\x46\x49\x44\x28\xd3\x54\xf9\xdb\x97",
    // "CFAbsoluteTimeGetCurrent" / M(Xor2) / S(24) / L(24)
    "\x7a\x7f\x78\x5b\x4a\x56\x55\x4c\x4d\x5c\x6d\x50\x54\x5c\x7e\x5c\x4d\x7a\x4c\x4b\x4b\x5c\x57\x4d\x39\xb1\x7d\xa2\x09\x1b\x1e\x91\x06",
    // "CFArrayGetCount" / M(Xor4) / S(146) / L(15)
    "\x63\x66\x61\x52\x52\x41\x59\x67\x45\x54\x63\x4f\x55\x4e\x54\x20",
    // "" / M(None) / S(0) / L(0)
    "\x88\xd1\x6d\x50\x2b\xa1\x27\xfd\x3a\x68\xba\xd7\xd9\xcb\xed\x52\x85\x8d\x88\xe0\x64\x91\x88\x87\xf2\x31\x1c\x07\x45\x6a\xd6\xa2",
    // "CFArrayCreateMutable" / M(Xor3) / S(79) / L(20)
    "\x27\x22\x25\x16\x16\x05\x1d\x27\x16\x01\x05\x10\x01\x29\x11\x10\x05\x06\x08\x01\x64",
    // "CFGetTypeID" / M(Xor1) / S(15) / L(11)
    "\x4c\x49\x48\x6a\x7b\x5b\x76\x7f\x6a\x46\x4b\x0f\xb4\x19\xff\xcf",
    // "SecKeychainSearchCopyNext" / M(Xor1) / S(34) / L(25)
    "\x71\x47\x41\x69\x47\x5b\x41\x4a\x43\x4b\x4c\x71\x47\x43\x50\x41\x4a\x61\x4d\x52\x5b\x6c\x47\x5a\x56\x22\x2c\x1f\xde\x02\x7c\xea\xb7\x19",
    // "Contents/_MASReceipt" / M(Rot) / S(169) / L(20)
    "\xec\x18\x17\x1d\x0e\x17\x1d\x1c\xd8\x08\xf6\xea\xfc\xfb\x0e\x0c\x0e\x12\x19\x1d\xa9",
    // "kSecMatchSubjectContains" / M(Xor4) / S(88) / L(24)
    "\x33\x0b\x3d\x3b\x15\x39\x2c\x3b\x30\x0b\x2d\x3a\x32\x3d\x3b\x2c\x1b\x37\x36\x2c\x39\x31\x36\x2b\x58\xdd\xd3\xa4\x29\x30\x76\x57\x59",
    // "CFReadStreamOpen" / M(Xor2) / S(64) / L(16)
    "\x12\x17\x03\x34\x30\x35\x02\x25\x23\x34\x30\x3c\x1e\x21\x34\x3f\x51",
    // "BIO_s_mem" / M(Xor2) / S(135) / L(9)
    "\xd5\xde\xd8\xc8\xe4\xc8\xfa\xf2\xfa\x97\x66\xcc\x4b\x45\x4b\x87",
    // "X509_STORE_free" / M(Xor3) / S(139) / L(15)
    "\xc3\xae\xab\xa2\xc4\xc8\xcf\xd4\xc9\xde\xc4\xfd\xe9\xfe\xfe\x9b",
    // "_MASReceipt" / M(Xor2) / S(63) / L(11)
    "\x70\x62\x6e\x7c\x7d\x4a\x4c\x4a\x46\x5f\x5b\x2f\x6a\xe4\xec\xd9",
    // "SecKeychainOpen" / M(Xor1) / S(55) / L(15)
    "\x64\x52\x54\x7c\x52\x4e\x54\x5f\x56\x5e\x59\x78\x47\x52\x59\x37",
    // "ASN1_OBJECT_free" / M(Xor1) / S(165) / L(16)
    "\xe4\xf6\xeb\x94\xfa\xea\xe7\xef\xe0\xe6\xf1\xfa\xc3\xd7\xc0\xc0\xa5",
    // "" / M(None) / S(0) / L(0)
    "\x10\x4a\x32\x13\x8e\x64\x91\x80\xd5\x73\x65\x85\x17\xad\xed\x12\x6f\x6b\xde\xbf\xe9\x43\x12\x01\x88\xcf\x8f\x15\x1f\xe1\x71\x03",
    // "CFStringGetFileSystemRepresentation" / M(Xor2) / S(141) / L(35)
    "\xea\xef\xfa\xdd\xdb\xc0\xc7\xce\xee\xcc\xdd\xef\xc0\xc5\xcc\xfa\xd0\xda\xdd\xcc\xc4\xfb\xcc\xd9\xdb\xcc\xda\xcc\xc7\xdd\xc8\xdd\xc0\xc6\xc7\xa9",
    // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor2) / S(107) / L(40)
    "\x6c\x6b\x6b\x1f\x6f\x18\x6c\x6c\x68\x19\x6f\x63\x69\x1b\x6a\x62\x1c\x1c\x6f\x62\x1e\x6b\x6e\x1b\x1f\x68\x68\x6e\x6f\x68\x1e\x6b\x63\x62\x1e\x1c\x6c\x19\x6c\x6a\x5a\xf9\xf3\xd0\x43\x2a\x79\xf9\x53",
    // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor3) / S(130) / L(59)
    "\xf0\xf7\xfc\xf7\xa3\xfc\xf3\xa4\xfc\xf0\xf0\xfc\xf4\xa5\xfc\xf3\xff\xfc\xf5\xa7\xfc\xf6\xfe\xfc\xa0\xa0\xfc\xf3\xfe\xfc\xa2\xf7\xfc\xf2\xa7\xfc\xa3\xf4\xfc\xf4\xf2\xfc\xf3\xf4\xfc\xa2\xf7\xfc\xff\xfe\xfc\xa2\xa0\xfc\xf0\xa5\xfc\xf0\xf6\xc6\x62\x98\x23\x88\xfa\xab\xb5\xdf",
    // "CFDateFormatterCreateDateFromString" / M(Xor4) / S(224) / L(35)
    "\xc3\xc6\xc4\xe1\xf4\xe5\xc6\xef\xf2\xed\xe1\xf4\xf4\xe5\xf2\xc3\xf2\xe5\xe1\xf4\xe5\xc4\xe1\xf4\xe5\xc6\xf2\xef\xed\xd3\xf4\xf2\xe9\xee\xe7\x80",
    // "1.2.840.113635.100.6.11.1" / M(Xor1) / S(122) / L(25)
    "\x4b\x54\x48\x54\x42\x4e\x4a\x54\x4b\x4b\x49\x4c\x49\x4f\x54\x4b\x4a\x4a\x54\x4c\x54\x4b\x4b\x54\x4b\x7a\x1c\x07\x0d\xa3\x6e\x61\xf5\x5d",
    // "Contents/_MASReceipt/receipt" / M(Rot) / S(16) / L(28)
    "\x53\x7f\x7e\x84\x75\x7e\x84\x83\x3f\x6f\x5d\x51\x63\x62\x75\x73\x75\x79\x80\x84\x3f\x82\x75\x73\x75\x79\x80\x84\x10\xae\xa5\xd4\x2f\xae\x94\xc5\x3f",
    // "kCFTypeArrayCallBacks" / M(Xor3) / S(252) / L(21)
    "\x79\x51\x54\x46\x6b\x62\x77\x53\x60\x60\x73\x6b\x51\x73\x7e\x7e\x50\x73\x71\x79\x61\x12",
    // "CFReadStreamClose" / M(Xor1) / S(208) / L(17)
    "\x93\x96\x82\xb5\xb1\xb4\x83\xa4\xa2\xb5\xb1\xbd\x93\xbc\xbf\xa3\xb5\xd0",
    // "CFBundleGetMainBundle" / M(Rot) / S(152) / L(21)
    "\xdb\xde\xda\x0d\x06\xfc\x04\xfd\xdf\xfd\x0c\xe5\xf9\x01\x06\xda\x0d\x06\xfc\x04\xfd\x98",
    // "" / M(None) / S(0) / L(0)
    "\xe6\xed\x03\xfa\x85\x38\xde\x1b\x35\x71\xec\x58\x42\x32\xc4\x16\x59\x08\x34\xc3\xd0\x9d\x92\xf1\xe2\x5d\xbe\x47\x2b\x4d\x28\x0c",
    // "" / M(None) / S(0) / L(0)
    "\xf2\xd9\xd2\xce\x51\x1d\x5c\x10\x34\x2a\x40\xbc\x91\xcd\x17\xc0\xae\x57\x9e\x8e\xaa\x4c\x8d\xb7\x8f\x82\x66\xbd\xdd\xcf\x1d\x03",
    // "" / M(None) / S(0) / L(0)
    "\x1f\x96\xaf\x70\xcb\xd1\xfd\xd1\x87\xc1\x10\x38\x94\xe9\xaa\x5d\x50\x2d\x5e\xfd\xa3\x6b\x3f\x17\xa1\x22\x86\x9f\x19\x7c\xd4\x29",
    // "PKCS7_free" / M(Xor2) / S(221) / L(10)
    "\x9d\x86\x8e\x9e\xfa\x92\xab\xbf\xa8\xa8\xcd\x46\xa9\x28\x02\xa0",
    // "" / M(None) / S(0) / L(0)
    "\x59\x93\x5a\xde\xc5\x7d\x47\x4f\xd3\x15\xd6\xda\xa1\xbc\x40\xe7\x09\xbd\x28\x2f\xaf\x23\x62\x43\xc6\xe3\xcd\xc5\x23\xb0\x0c\x74",
    // "sk_free" / M(Rot) / S(11) / L(7)
    "\x7e\x76\x6a\x71\x7d\x70\x70\x0b\xdb\x3b\x99\xd9\x20\xed\x86\x3e",
    // "IOMACAddress" / M(Rot) / S(204) / L(12)
    "\x15\x1b\x19\x0d\x0f\x0d\x30\x30\x3e\x31\x3f\x3f\xcc\x00\x2a\x26",
    // "objc_msgSend" / M(Rot) / S(90) / L(12)
    "\xc9\xbc\xc4\xbd\xb9\xc7\xcd\xc1\xad\xbf\xc8\xbe\x5a\xef\x53\x26",
    // "/System/Library/Frameworks/Security.framework/Security" / M(Xor2) / S(57) / L(54)
    "\x21\x5d\x77\x7d\x7a\x6b\x63\x21\x42\x67\x6c\x7c\x6f\x7c\x77\x21\x48\x7c\x6f\x63\x6b\x79\x61\x7c\x65\x7d\x21\x5d\x6b\x6d\x7b\x7c\x67\x7a\x77\x20\x68\x7c\x6f\x63\x6b\x79\x61\x7c\x65\x21\x5d\x6b\x6d\x7b\x7c\x67\x7a\x77\x0e",
    // "" / M(None) / S(0) / L(0)
    "\x0b\xc0\xd8\x19\x04\xd8\x6f\x1f\x00\xe1\x1a\x7b\xda\x23\xb7\xf7\x94\x21\x8a\xcb\x5f\xc3\x92\xe8\x43\x15\x06\x7d\x0e\x0f\x12\x14",
    // "X509_STORE_add_cert" / M(Rot) / S(227) / L(19)
    "\x3b\x18\x13\x1c\x42\x36\x37\x32\x35\x28\x42\x44\x47\x47\x42\x46\x48\x55\x57\xe3",
    // "Contents/_MASReceipt/receipt" / M(Xor1) / S(175) / L(28)
    "\xec\xc0\xc1\xdb\xca\xc1\xdb\xdc\x80\xf0\xe2\xee\xfc\xfd\xca\xcc\xca\xc6\xdf\xdb\x80\xdd\xca\xcc\xca\xc6\xdf\xdb\xaf\x2a\x10\x33\x03\xb9\x62\xef\x1a",
    // "SecKeychainSearchCopyNext" / M(Xor1) / S(128) / L(25)
    "\xd3\xe5\xe3\xcb\xe5\xf9\xe3\xe8\xe1\xe9\xee\xd3\xe5\xe1\xf2\xe3\xe8\xc3\xef\xf0\xf9\xce\xe5\xf8\xf4\x80\xb0\x20\xd7\x46\x97\xa2\x7f\xc6",
    // "/usr/lib/libSystem.dylib" / M(Xor2) / S(102) / L(24)
    "\x68\x32\x34\x35\x68\x2b\x2e\x25\x68\x2b\x2e\x25\x14\x3e\x34\x33\x22\x2a\x69\x23\x3e\x2b\x2e\x25\x47\x1f\xd8\xe9\x83\xe9\x8b\x4f\x02",
    // "kCFTypeDictionaryValueCallBacks" / M(Xor2) / S(237) / L(31)
    "\xa6\x8e\x8b\x99\xb4\xbd\xa8\x89\xa4\xae\xb9\xa4\xa2\xa3\xac\xbf\xb4\x9b\xac\xa1\xb8\xa8\x8e\xac\xa1\xa1\x8f\xac\xae\xa6\xbe\xcd",
    // "CFReadStreamCreateWithFile" / M(Xor4) / S(9) / L(26)
    "\x78\x7d\x69\x5e\x5a\x5f\x68\x4f\x49\x5e\x5a\x56\x78\x49\x5e\x5a\x4f\x5e\x6c\x52\x4f\x53\x7d\x52\x57\x5e\x3b\xad\xbe\xfd\x8f\xd4\x60\x6d\xbb",
    // "SecStaticCodeCreateWithPath" / M(Rot) / S(73) / L(27)
    "\x9c\xae\xac\x9c\xbd\xaa\xbd\xb2\xac\x8c\xb8\xad\xae\x8c\xbb\xae\xaa\xbd\xae\xa0\xb2\xbd\xb1\x99\xaa\xbd\xb1\x49\x6f\x23\xd2\x88\x89\xaf\x53\xa9",
    // "CFDataCreate" / M(Rot) / S(196) / L(12)
    "\x07\x0a\x08\x25\x38\x25\x07\x36\x29\x25\x38\x29\xc4\x63\x72\x97",
    // "EVP_get_digestbyname" / M(Xor4) / S(251) / L(20)
    "\xd2\xc1\xc7\xc8\xf0\xf2\xe3\xc8\xf3\xfe\xf0\xf2\xe4\xe3\xf5\xee\xf9\xf6\xfa\xf2\x97",
    // "" / M(None) / S(0) / L(0)
    "\x2c\x1d\xfe\x04\x45\x2b\x39\xe2\xb1\xe5\xc7\x19\x3f\x0f\x7e\x45\x78\xd3\xb9\x39\xb1\x64\x0f\x0b\x64\x15\x38\xc4\xa3\xcf\x98\xc6",
    // "strlen" / M(Xor3) / S(52) / L(6)
    "\x37\x30\x36\x28\x21\x2a\x44\x98\x59\x31\xfa\x4f\xca\x16\x7c\x94",
    // "setDelegate:" / M(Xor4) / S(250) / L(12)
    "\xd3\xc5\xd4\xe4\xc5\xcc\xc5\xc7\xc1\xd4\xc5\x9a\xa0\xed\x83\x50",
    // "CFDictionaryCreateMutable" / M(Xor2) / S(153) / L(25)
    "\xf8\xfd\xff\xd2\xd8\xcf\xd2\xd4\xd5\xda\xc9\xc2\xf8\xc9\xde\xda\xcf\xde\xf6\xce\xcf\xda\xd9\xd7\xde\xbb\x35\x03\xba\xd9\x7c\x11\xe7\xb5",
    // "X509_STORE_free" / M(Xor4) / S(225) / L(15)
    "\x48\x25\x20\x29\x4f\x43\x44\x5f\x42\x55\x4f\x76\x62\x75\x75\x10",
    // "PKCS7_verify" / M(Xor3) / S(183) / L(12)
    "\x97\x8c\x84\x94\xf0\x98\xb1\xa2\xb5\xae\xa1\xbe\xc7\x1f\x32\x11",
    // "BIO_write" / M(Xor2) / S(143) / L(9)
    "\xdd\xd6\xd0\xc0\xe8\xed\xf6\xeb\xfa\x9f\x7d\xc7\x40\x5d\x7a\x77",
    // "CFReadStreamClose" / M(Xor4) / S(219) / L(17)
    "\x25\x20\x34\x03\x07\x02\x35\x12\x14\x03\x07\x0b\x25\x0a\x09\x15\x03\x66",
    // "Contents" / M(Xor2) / S(62) / L(8)
    "\x6d\x41\x40\x5a\x4b\x40\x5a\x5d\x2e\xe9\xc9\x2e\xf7\x4a\xfd\x5b",
    // "" / M(None) / S(0) / L(0)
    "\x1f\xfa\x31\xf8\xef\xb8\x9c\x3d\x31\x7c\x9a\x41\x70\xd7\xa1\x8c\x99\x35\x58\x03\x3e\xdc\x27\xe9\x93\x06\x53\xe7\xfd\x7d\x4e\x5a",
    // "objc_getClass" / M(Xor4) / S(227) / L(13)
    "\x5f\x52\x5a\x53\x6f\x57\x55\x44\x73\x5c\x51\x43\x43\x30\xc7\xce",
    // "CFStringCreateWithBytes" / M(Xor3) / S(166) / L(23)
    "\x85\x80\x95\xb2\xb4\xaf\xa8\xa1\x85\xb4\xa3\xa7\xb2\xa3\x91\xaf\xb2\xae\x84\xbf\xb2\xa3\xb5\xc6\x36\x9d\xf1\xe7\xee\xb9\xc3\xf6",
    // "EVP_DigestFinal" / M(Xor3) / S(8) / L(15)
    "\x5d\x4e\x48\x47\x5c\x71\x7f\x7d\x6b\x6c\x5e\x71\x76\x79\x74\x18",
    // "" / M(None) / S(0) / L(0)
    "\x13\xe1\xf5\x28\xff\x82\x62\xff\xc9\xa0\x52\x97\x32\x36\x4a\x0b\xeb\xdf\x0f\x94\x0a\xfc\xee\x70\x40\xd1\x0f\x75\x5b\x9f\xee\xf8",
    // "Contents/_MASReceipt" / M(Xor3) / S(196) / L(20)
    "\x9a\xb6\xb7\xad\xbc\xb7\xad\xaa\xf6\x86\x94\x98\x8a\x8b\xbc\xba\xbc\xb0\xa9\xad\xd9",
    // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor4) / S(239) / L(59)
    "\x4a\x4d\x46\x4d\x19\x46\x49\x1e\x46\x4a\x4a\x46\x4e\x1f\x46\x49\x45\x46\x4f\x1d\x46\x4c\x44\x46\x1a\x1a\x46\x49\x44\x46\x18\x4d\x46\x48\x1d\x46\x19\x4e\x46\x4e\x48\x46\x49\x4e\x46\x18\x4d\x46\x45\x44\x46\x18\x1a\x46\x4a\x1f\x46\x4a\x4c\x7c\xd0\x4f\x59\x8c\xa6\x88\xaa\xa5",
    // "glob" / M(Xor3) / S(210) / L(4)
    "\x85\x8e\x8d\x80\xe2\xea\xdb\x31\xdf\xf5\xc7\xd6\x0d\x27\x9e\xc3",
    // "" / M(None) / S(0) / L(0)
    "\x03\xb1\xd7\xab\x00\x16\x48\x1b\x07\x0e\x8f\xac\x35\x16\xe5\x16\xcb\x01\x7c\x23\x96\xef\x75\xdb\xfe\xef\xa4\xc8\x1e\xef\x58\x42",
    // "CFDictionaryGetValue" / M(Xor4) / S(15) / L(20)
    "\x78\x7d\x7f\x52\x58\x4f\x52\x54\x55\x5a\x49\x42\x7c\x5e\x4f\x6d\x5a\x57\x4e\x5e\x3b",
    // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Xor1) / S(179) / L(39)
    "\xf0\xf5\xe7\xda\xde\xd6\xe9\xdc\xdd\xd6\xf0\xc1\xd6\xd2\xc7\xd6\xe4\xda\xc7\xdb\xe7\xda\xde\xd6\xfa\xdd\xc7\xd6\xc1\xc5\xd2\xdf\xf5\xc1\xdc\xde\xf4\xfe\xe7\xb3\x77\xa0\x0c\x6c\x75\xa2\x5a\x49",
    // "SKReceiptRefreshRequest" / M(Rot) / S(16) / L(23)
    "\x63\x5b\x62\x75\x73\x75\x79\x80\x84\x62\x75\x76\x82\x75\x83\x78\x62\x75\x81\x85\x75\x83\x84\x10\x7f\xc0\x2c\x6c\x69\xae\xee\x46",
    // "CFEqual" / M(Xor1) / S(188) / L(7)
    "\xff\xfa\xf9\xcd\xc9\xdd\xd0\xbc\x26\x19\xc4\xb6\xd2\x2e\x3c\x6a",
    // "CFStringCompare" / M(Xor2) / S(50) / L(15)
    "\x61\x64\x71\x56\x50\x4b\x4c\x45\x61\x4d\x4f\x52\x43\x50\x47\x22",
    // "sel_registerName" / M(Xor4) / S(161) / L(16)
    "\xc2\xd4\xdd\xee\xc3\xd4\xd6\xd8\xc2\xc5\xd4\xc3\xff\xd0\xdc\xd4\xb1",
    // "kSecMatchLimit" / M(Xor3) / S(34) / L(14)
    "\x59\x61\x57\x51\x7f\x53\x46\x51\x5a\x7e\x5b\x5f\x5b\x46\x32\xc2",
    // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor1) / S(193) / L(57)
    "\xee\x92\xb8\xb2\xb5\xa4\xac\xee\x8d\xa8\xa3\xb3\xa0\xb3\xb8\xee\x8a\xa4\xb8\xa2\xa9\xa0\xa8\xaf\xb2\xee\x92\xb8\xb2\xb5\xa4\xac\x93\xae\xae\xb5\x82\xa4\xb3\xb5\xa8\xa7\xa8\xa2\xa0\xb5\xa4\xb2\xef\xaa\xa4\xb8\xa2\xa9\xa0\xa8\xaf\xc1\xec\xa0\xdd\xb2\x59\x1e\x9d\x9d",
    // "SecCertificateCopyData" / M(Xor2) / S(1) / L(22)
    "\x45\x73\x75\x55\x73\x64\x62\x7f\x70\x7f\x75\x77\x62\x73\x55\x79\x66\x6f\x52\x77\x62\x77\x16",
    // "init" / M(Xor2) / S(136) / L(4)
    "\xf1\xf6\xf1\xec\x98\xf6\x81\xbd\xf8\x27\x90\xb5\x7a\x2b\x50\x8c",
    // "BIO_s_mem" / M(Xor4) / S(254) / L(9)
    "\xa2\xa9\xaf\xbf\x93\xbf\x8d\x85\x8d\xe0\x13\xce\x01\x0a\x0c\x45",
    // "CFDictionaryCreateMutable" / M(Xor1) / S(7) / L(25)
    "\x44\x41\x43\x6e\x64\x73\x6e\x68\x69\x66\x75\x7e\x44\x75\x62\x66\x73\x62\x4a\x72\x73\x66\x65\x6b\x62\x07\xc1\x1b\xdf\x25\xcb\xcd\xb2\x7f",
};

// Table for storing pointers
static void *Troll_Pointers[639] = {
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_digest),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) EVP_DigestInit),
    ((void *) EVP_DigestFinal),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) EVP_DigestFinal),
    ((void *) NULL),
    ((void *) EVP_DigestInit),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) SHA1_Init),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) ASN1_get_object),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) glob_b),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) glob_b),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) SHA1_Init),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) BIO_write),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) d2i_PKCS7_bio),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) d2i_X509_bio),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_STORE_new),
    ((void *) RTLD_MAIN_ONLY),
    ((void *) EVP_MD_CTX_init),
    ((void *) EVP_DigestUpdate),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) ASN1_get_object),
    ((void *) OBJ_txt2obj),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) c2i_ASN1_INTEGER),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_STORE_add_cert),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) c2i_ASN1_INTEGER),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) EVP_DigestUpdate),
    ((void *) NULL),
    ((void *) OBJ_txt2obj),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) globfree),
    ((void *) EVP_DigestUpdate),
    ((void *) ASN1_INTEGER_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) glob_b),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) ASN1_OBJECT_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_digest),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) BIO_free),
    ((void *) sk_num),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) RTLD_MAIN_ONLY),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) CFStringCreateWithBytes),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) sk_num),
    ((void *) NULL),
    ((void *) X509_digest),
    ((void *) EVP_get_digestbyname),
    ((void *) NULL),
    ((void *) SHA1_Update),
    ((void *) NULL),
    ((void *) CFStringCreateWithBytes),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) BIO_s_mem),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) PKCS7_get0_signers),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) sk_value),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) BIO_new),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) EVP_DigestInit),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) SHA1_Final),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) OpenSSL_add_all_digests),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) BIO_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) CFStringCreateWithCString),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) CFStringCreateWithCString),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) strlen),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) c2i_ASN1_INTEGER),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) OBJ_txt2obj),
    ((void *) dlopen),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) BIO_new),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) strncmp),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) dlopen),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) globfree),
    ((void *) NULL),
    ((void *) PKCS7_verify),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) BIO_new),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_STORE_new),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) d2i_PKCS7_bio),
    ((void *) X509_STORE_free),
    ((void *) sk_value),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) sk_num),
    ((void *) SHA1),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) EVP_get_digestbyname),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) d2i_PKCS7_bio),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) SHA1_Update),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) dlopen),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) strncmp),
    ((void *) NULL),
    ((void *) PKCS7_verify),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) strncmp),
    ((void *) NULL),
    ((void *) d2i_X509_bio),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) SHA1_Update),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_STORE_new),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) globfree),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) PKCS7_free),
    ((void *) EVP_MD_CTX_init),
    ((void *) NULL),
    ((void *) BIO_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) SHA1_Init),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) CFStringCreateWithCString),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_free),
    ((void *) dlsym),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_get_ext_by_OBJ),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) EVP_MD_CTX_init),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) SHA1_Final),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) OpenSSL_add_all_digests),
    ((void *) PKCS7_get0_signers),
    ((void *) ASN1_INTEGER_get),
    ((void *) sk_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) SHA1),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) ASN1_get_object),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) OpenSSL_add_all_digests),
    ((void *) NULL),
    ((void *) ASN1_INTEGER_get),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_get_ext_by_OBJ),
    ((void *) NULL),
    ((void *) strlen),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_NAME_get_text_by_NID),
    ((void *) NULL),
    ((void *) PKCS7_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) ASN1_INTEGER_free),
    ((void *) glob),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_STORE_add_cert),
    ((void *) X509_get_ext_by_OBJ),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) ASN1_OBJECT_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) dlsym),
    ((void *) NULL),
    ((void *) dlsym),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) SHA1),
    ((void *) BIO_write),
    ((void *) NULL),
    ((void *) glob),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_NAME_get_text_by_NID),
    ((void *) ASN1_INTEGER_get),
    ((void *) NULL),
    ((void *) ASN1_INTEGER_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) d2i_X509_bio),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) RTLD_MAIN_ONLY),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_NAME_get_text_by_NID),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) PKCS7_get0_signers),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) sk_value),
    ((void *) sk_free),
    ((void *) NULL),
    ((void *) SHA1_Final),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) BIO_s_mem),
    ((void *) X509_STORE_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) ASN1_OBJECT_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) PKCS7_free),
    ((void *) NULL),
    ((void *) sk_free),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_STORE_add_cert),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) EVP_get_digestbyname),
    ((void *) NULL),
    ((void *) strlen),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) X509_STORE_free),
    ((void *) PKCS7_verify),
    ((void *) BIO_write),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) CFStringCreateWithBytes),
    ((void *) EVP_DigestFinal),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) glob),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) NULL),
    ((void *) BIO_s_mem),
    ((void *) NULL),
};

// Push a new diagnostic context
#pragma clang diagnostic push
// When getting primary MAC address, an effectless alignment requirement increase is reported
#pragma clang diagnostic ignored "-Wcast-align"
// In RELEASE mode, static variable are inlined but their declaration are not removed
#pragma clang diagnostic ignored "-Wunused"
// In DEBUG mode, static variable are not inlined
#pragma clang diagnostic ignored "-Wused-but-marked-unused"

// Global variables
static int Troll_BQKNQZJKSLGF __unused;
static int Troll_WMWXBUDZCZZS __unused;
static int Troll_YOVDGFJHGPOO __unused;
static int Troll_PKEWSSIFFWTL __unused;
static int Troll_NZDWMPAPGHWA __unused;
static int Troll_XIBODEUXAVIA __unused;
static int Troll_GFLVZNVEWUES __unused;
static int Troll_JMEDIBVWLSXE __unused;


// The long jump buffer
static jmp_buf Troll_JumpBuf __unused;

#define Troll_ASN1_get_object_021E0050 ((__Troll_ASN1_get_object) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction007, 80, 28, 16))
#define Troll_ASN1_INTEGER_free_004B0068 ((__Troll_ASN1_INTEGER_free) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction00C, 104, 33, 18))
#define Troll_ASN1_INTEGER_get_008A01CE ((__Troll_ASN1_INTEGER_get) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction004, 462, 12, 17))
#define Troll_ASN1_OBJECT_free_004B01EE ((__Troll_ASN1_OBJECT_free) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction00B, 494, 97, 17))
#define Troll_BIO_free_004B0192 ((__Troll_BIO_free) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction006, 402, 172, 16))
#define Troll_BIO_new_021E00D7 ((__Troll_BIO_new) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction006, 215, 67, 16))
#define Troll_BIO_new_021E0133 ((__Troll_BIO_new) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction00B, 307, 181, 16))
#define Troll_BIO_s_mem_021E00B2 ((__Troll_BIO_s_mem) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction006, 178, 82, 16))
#define Troll_BIO_write_008A003F ((__Troll_BIO_write) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction005, 63, 57, 16))
#define Troll_BIO_write_008A01FA ((__Troll_BIO_write) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction00B, 506, 190, 16))
#define Troll_c2i_ASN1_INTEGER_021E005D ((__Troll_c2i_ASN1_INTEGER) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction004, 93, 22, 17))
#define Troll_CC_SHA1_025B00CC ((__Troll_CC_SHA1) Troll_LookupFunction015(Troll_ObfuscationFunction007, 603, 102, 33, Troll_ObfuscationFunction008, 204, 194, 16))
#define Troll_CC_SHA1_Init_025B001F ((__Troll_CC_SHA1_Init) Troll_LookupFunction015(Troll_ObfuscationFunction007, 603, 102, 33, Troll_ObfuscationFunction004, 31, 125, 16))
#define Troll_CC_SHA1_Update_025B014A ((__Troll_CC_SHA1_Update) Troll_LookupFunction015(Troll_ObfuscationFunction007, 603, 102, 33, Troll_ObfuscationFunction004, 330, 77, 16))
#define Troll_CFArrayGetValueAtIndex_01CA006B ((__Troll_CFArrayGetValueAtIndex) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction008, 107, 185, 23))
#define Troll_CFArrayGetValueAtIndex_01CA0079 ((__Troll_CFArrayGetValueAtIndex) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction00B, 121, 20, 23))
#define Troll_CFBundleGetMainBundle_021101B1 ((__Troll_CFBundleGetMainBundle) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction005, 433, 79, 22))
#define Troll_CFBundleUnloadExecutable_0211009F ((__Troll_CFBundleUnloadExecutable) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction004, 159, 80, 33))
#define Troll_CFDataAppendBytes_01CA00F0 ((__Troll_CFDataAppendBytes) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction005, 240, 183, 18))
#define Troll_CFDataCreate_00F6025F ((__Troll_CFDataCreate) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction003, 607, 196, 16))
#define Troll_CFDataGetBytePtr_01CA01A7 ((__Troll_CFDataGetBytePtr) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction00C, 423, 170, 17))
#define Troll_CFDataGetLength_00F60137 ((__Troll_CFDataGetLength) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction004, 311, 171, 16))
#define Troll_CFDateFormatterCreateDateFromString_00F60248 ((__Troll_CFDateFormatterCreateDateFromString) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction00C, 584, 224, 36))
#define Troll_CFDateFormatterSetProperty_01CA01AB ((__Troll_CFDateFormatterSetProperty) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction006, 427, 221, 35))
#define Troll_CFDictionaryAddValue_00F6011A ((__Troll_CFDictionaryAddValue) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction004, 282, 117, 21))
#define Troll_CFDictionaryAddValue_01CA018E ((__Troll_CFDictionaryAddValue) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction003, 398, 249, 21))
#define Troll_CFDictionaryGetValue_02110018 ((__Troll_CFDictionaryGetValue) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction00B, 24, 129, 21))
#define Troll_CFDictionarySetValue_01CA0048 ((__Troll_CFDictionarySetValue) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction003, 72, 115, 21))
#define Troll_CFEqual_021101B4 ((__Troll_CFEqual) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction00B, 436, 91, 16))
#define Troll_CFNumberCreate_00F6003D ((__Troll_CFNumberCreate) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction009, 61, 143, 16))
#define Troll_CFReadStreamOpen_00F6023E ((__Troll_CFReadStreamOpen) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction007, 574, 64, 17))
#define Troll_CFReadStreamOpen_01CA0201 ((__Troll_CFReadStreamOpen) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction005, 513, 177, 17))
#define Troll_CFRelease_00F60026 ((__Troll_CFRelease) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction008, 38, 163, 16))
#define Troll_CFRelease_00F6003A ((__Troll_CFRelease) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction009, 58, 214, 16))
#define Troll_CFRelease_00F600EF ((__Troll_CFRelease) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction004, 239, 196, 16))
#define Troll_CFRelease_01CA0026 ((__Troll_CFRelease) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction008, 38, 163, 16))
#define Troll_CFRelease_01CA003A ((__Troll_CFRelease) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction009, 58, 214, 16))
#define Troll_CFRelease_01CA00EF ((__Troll_CFRelease) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction004, 239, 196, 16))
#define Troll_CFRelease_02110026 ((__Troll_CFRelease) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction008, 38, 163, 16))
#define Troll_CFRelease_0211003A ((__Troll_CFRelease) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction009, 58, 214, 16))
#define Troll_CFURLCreateCopyAppendingPathComponent_021101F0 ((__Troll_CFURLCreateCopyAppendingPathComponent) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction007, 496, 130, 38))
#define Troll_CFURLCreateCopyAppendingPathComponent_02110219 ((__Troll_CFURLCreateCopyAppendingPathComponent) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction004, 537, 230, 38))
#define Troll_CFURLCreateFromFileSystemRepresentation_01CA009A ((__Troll_CFURLCreateFromFileSystemRepresentation) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction00C, 154, 181, 48))
#define Troll_CFURLCreateFromFileSystemRepresentation_0211009A ((__Troll_CFURLCreateFromFileSystemRepresentation) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction00C, 154, 181, 48))
#define Troll_d2i_PKCS7_bio_008A0142 ((__Troll_d2i_PKCS7_bio) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction004, 322, 119, 16))
#define Troll_d2i_X509_bio_008A0046 ((__Troll_d2i_X509_bio) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction007, 70, 71, 16))
#define Troll_EVP_DigestFinal_004B026D ((__Troll_EVP_DigestFinal) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction00A, 621, 8, 16))
#define Troll_EVP_DigestInit_021E00DF ((__Troll_EVP_DigestInit) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction003, 223, 237, 16))
#define Troll_EVP_DigestUpdate_004B004D ((__Troll_EVP_DigestUpdate) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction005, 77, 0, 17))
#define Troll_EVP_get_digestbyname_008A014D ((__Troll_EVP_get_digestbyname) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction009, 333, 194, 21))
#define Troll_EVP_MD_CTX_init_008A004C ((__Troll_EVP_MD_CTX_init) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction009, 76, 122, 16))
#define Troll_exit_0167004E ((__Troll_exit) Troll_LookupFunction015(Troll_ObfuscationFunction007, 359, 224, 33, Troll_ObfuscationFunction00B, 78, 21, 16))
#define Troll_exit_016700C3 ((__Troll_exit) Troll_LookupFunction015(Troll_ObfuscationFunction007, 359, 224, 33, Troll_ObfuscationFunction00C, 195, 68, 16))
#define Troll_exit_01670178 ((__Troll_exit) Troll_LookupFunction015(Troll_ObfuscationFunction007, 359, 224, 33, Troll_ObfuscationFunction00B, 376, 66, 16))
#define Troll_exit_0229004E ((__Troll_exit) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 553, 189, 33, Troll_ObfuscationFunction00B, 78, 21, 16))
#define Troll_exit_02290178 ((__Troll_exit) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 553, 189, 33, Troll_ObfuscationFunction00B, 376, 66, 16))
#define Troll_exit_025B004E ((__Troll_exit) Troll_LookupFunction015(Troll_ObfuscationFunction007, 603, 102, 33, Troll_ObfuscationFunction00B, 78, 21, 16))
#define Troll_exit_025B0178 ((__Troll_exit) Troll_LookupFunction015(Troll_ObfuscationFunction007, 603, 102, 33, Troll_ObfuscationFunction00B, 376, 66, 16))
#define Troll_BQKNQZJKSLGF_00F60007 ((__Troll_CFDataGetBytePtr) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction00C, Troll_BQKNQZJKSLGF, 50, 17))
#define Troll_BQKNQZJKSLGF_00F60013 ((__Troll_CFNumberCreate) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction007, Troll_BQKNQZJKSLGF, 181, 16))
#define Troll_BQKNQZJKSLGF_00F60115 ((__Troll_CFArrayAppendValue) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction00C, Troll_BQKNQZJKSLGF, 13, 19))
#define Troll_BQKNQZJKSLGF_01CA00E1 ((__Troll_CFPropertyListCreateWithData) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction003, Troll_BQKNQZJKSLGF, 150, 37))
#define Troll_BQKNQZJKSLGF_01CA0277 ((__Troll_CFStringCompare) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction007, Troll_BQKNQZJKSLGF, 50, 16))
#define Troll_BQKNQZJKSLGF_02110023 ((__Troll_CFStringCompare) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction004, Troll_BQKNQZJKSLGF, 234, 16))
#define Troll_BQKNQZJKSLGF_0211002C ((__Troll_CFDataCreateMutable) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction005, Troll_BQKNQZJKSLGF, 148, 20))
#define Troll_BQKNQZJKSLGF_021100E3 ((__Troll_CFReadStreamCreateWithFile) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction009, Troll_BQKNQZJKSLGF, 125, 35))
#define Troll_WMWXBUDZCZZS_00170005 ((__Troll_IOIteratorNext) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 23, 200, 49, Troll_ObfuscationFunction00C, Troll_WMWXBUDZCZZS, 94, 16))
#define Troll_WMWXBUDZCZZS_00F601BB ((__Troll_CFArrayAppendValue) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction003, Troll_WMWXBUDZCZZS, 218, 19))
#define Troll_WMWXBUDZCZZS_018D01FB ((__Troll_SecItemCopyMatching) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 397, 38, 55, Troll_ObfuscationFunction00B, Troll_WMWXBUDZCZZS, 211, 20))
#define Troll_WMWXBUDZCZZS_01CA0013 ((__Troll_CFNumberCreate) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction007, Troll_WMWXBUDZCZZS, 181, 16))
#define Troll_WMWXBUDZCZZS_01CA024C ((__Troll_CFReadStreamClose) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction006, Troll_WMWXBUDZCZZS, 208, 18))
#define Troll_WMWXBUDZCZZS_02110047 ((__Troll_CFDateCreate) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction00A, Troll_WMWXBUDZCZZS, 10, 16))
#define Troll_WMWXBUDZCZZS_02110054 ((__Troll_CFBundleCopyBundleURL) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction007, Troll_WMWXBUDZCZZS, 183, 22))
#define Troll_YOVDGFJHGPOO_0017012A ((__Troll_IOMasterPort) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 23, 200, 49, Troll_ObfuscationFunction00A, Troll_YOVDGFJHGPOO, 230, 16))
#define Troll_YOVDGFJHGPOO_00F60018 ((__Troll_CFDictionaryGetValue) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction00B, Troll_YOVDGFJHGPOO, 129, 21))
#define Troll_YOVDGFJHGPOO_00F600E2 ((__Troll_CFBundleGetValueForInfoDictionaryKey) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction005, Troll_YOVDGFJHGPOO, 127, 37))
#define Troll_YOVDGFJHGPOO_00F6012E ((__Troll_CFDictionaryGetTypeID) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction008, Troll_YOVDGFJHGPOO, 144, 22))
#define Troll_YOVDGFJHGPOO_00F6013D ((__Troll_CFTimeZoneCreateWithTimeIntervalFromGMT) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction004, Troll_YOVDGFJHGPOO, 24, 48))
#define Troll_YOVDGFJHGPOO_00F6016F ((__Troll_CFDictionaryGetValue) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction009, Troll_YOVDGFJHGPOO, 11, 21))
#define Troll_YOVDGFJHGPOO_018D00EB ((__Troll_SecKeychainSearchCreateFromAttributes) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 397, 38, 55, Troll_ObfuscationFunction00C, Troll_YOVDGFJHGPOO, 140, 38))
#define Troll_YOVDGFJHGPOO_0193016C ((__Troll_SecCodeCheckValidityWithErrors) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 403, 166, 55, Troll_ObfuscationFunction004, Troll_YOVDGFJHGPOO, 29, 39))
#define Troll_YOVDGFJHGPOO_01CA00D5 ((__Troll_CFDataCreateMutable) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction00C, Troll_YOVDGFJHGPOO, 237, 20))
#define Troll_PKEWSSIFFWTL_00F6002C ((__Troll_CFDataCreateMutable) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction005, Troll_PKEWSSIFFWTL, 148, 20))
#define Troll_PKEWSSIFFWTL_00F600B5 ((__Troll_CFArrayCreateMutable) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction007, Troll_PKEWSSIFFWTL, 174, 21))
#define Troll_PKEWSSIFFWTL_01CA016F ((__Troll_CFDictionaryGetValue) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction009, Troll_PKEWSSIFFWTL, 11, 21))
#define Troll_PKEWSSIFFWTL_02110245 ((__Troll_CFStringGetFileSystemRepresentation) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction008, Troll_PKEWSSIFFWTL, 141, 36))
#define Troll_PKEWSSIFFWTL_0256025A ((__Troll_SecKeychainSearchCopyNext) Troll_LookupFunction015(Troll_ObfuscationFunction007, 598, 57, 55, Troll_ObfuscationFunction006, Troll_PKEWSSIFFWTL, 128, 34))
#define Troll_NZDWMPAPGHWA_0017016A ((__Troll_IOServiceGetMatchingServices) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 23, 200, 49, Troll_ObfuscationFunction005, Troll_NZDWMPAPGHWA, 58, 37))
#define Troll_NZDWMPAPGHWA_00F600B5 ((__Troll_CFArrayCreateMutable) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction007, Troll_NZDWMPAPGHWA, 174, 21))
#define Troll_NZDWMPAPGHWA_00F6017F ((__Troll_CFDataCreate) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction00B, Troll_NZDWMPAPGHWA, 63, 16))
#define Troll_NZDWMPAPGHWA_019301AD ((__Troll_SecCodeCopySigningInformation) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 403, 166, 55, Troll_ObfuscationFunction00A, Troll_NZDWMPAPGHWA, 23, 38))
#define Troll_NZDWMPAPGHWA_01CA00D6 ((__Troll_CFURLCreateWithFileSystemPathRelativeToBase) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction00C, Troll_NZDWMPAPGHWA, 8, 52))
#define Troll_NZDWMPAPGHWA_01CA0137 ((__Troll_CFDataGetLength) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction004, Troll_NZDWMPAPGHWA, 171, 16))
#define Troll_NZDWMPAPGHWA_01CA018E ((__Troll_CFDictionaryAddValue) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction003, Troll_NZDWMPAPGHWA, 249, 21))
#define Troll_NZDWMPAPGHWA_02110132 ((__Troll_CFBundleGetIdentifier) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction00C, Troll_NZDWMPAPGHWA, 45, 22))
#define Troll_XIBODEUXAVIA_00F60013 ((__Troll_CFNumberCreate) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction007, Troll_XIBODEUXAVIA, 181, 16))
#define Troll_XIBODEUXAVIA_00F60023 ((__Troll_CFStringCompare) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction004, Troll_XIBODEUXAVIA, 234, 16))
#define Troll_XIBODEUXAVIA_00F600A2 ((__Troll_CFAbsoluteTimeGetCurrent) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction003, Troll_XIBODEUXAVIA, 221, 33))
#define Troll_XIBODEUXAVIA_01CA003D ((__Troll_CFNumberCreate) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction009, Troll_XIBODEUXAVIA, 143, 16))
#define Troll_XIBODEUXAVIA_020E0159 ((__Troll_IORegistryEntryCreateCFProperty) Troll_LookupFunction015(Troll_ObfuscationFunction004, 526, 226, 49, Troll_ObfuscationFunction00A, Troll_XIBODEUXAVIA, 131, 32))
#define Troll_XIBODEUXAVIA_0211000C ((__Troll_CFDataAppendBytes) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction009, Troll_XIBODEUXAVIA, 90, 18))
#define Troll_XIBODEUXAVIA_0211017F ((__Troll_CFDataCreate) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction00B, Troll_XIBODEUXAVIA, 63, 16))
#define Troll_XIBODEUXAVIA_021101F4 ((__Troll_CFDateFormatterSetFormat) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction003, Troll_XIBODEUXAVIA, 123, 33))
#define Troll_XIBODEUXAVIA_0211027E ((__Troll_CFDictionaryCreateMutable) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction005, Troll_XIBODEUXAVIA, 7, 34))
#define Troll_XIBODEUXAVIA_022900BD ((__Troll_CC_SHA1_Final) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 553, 189, 33, Troll_ObfuscationFunction00C, Troll_XIBODEUXAVIA, 249, 16))
#define Troll_XIBODEUXAVIA_0256009E ((__Troll_SecCodeCheckValidity) Troll_LookupFunction015(Troll_ObfuscationFunction007, 598, 57, 55, Troll_ObfuscationFunction004, Troll_XIBODEUXAVIA, 73, 21))
#define Troll_GFLVZNVEWUES_0017020B ((__Troll_IOBSDNameMatching) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 23, 200, 49, Troll_ObfuscationFunction00C, Troll_GFLVZNVEWUES, 175, 18))
#define Troll_GFLVZNVEWUES_00F600FB ((__Troll_CFDateFormatterCreate) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction009, Troll_GFLVZNVEWUES, 128, 22))
#define Troll_GFLVZNVEWUES_00F60173 ((__Troll_CFArrayGetCount) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction00A, Troll_GFLVZNVEWUES, 165, 16))
#define Troll_GFLVZNVEWUES_01CA0093 ((__Troll_CFDataGetLength) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction009, Troll_GFLVZNVEWUES, 185, 16))
#define Troll_GFLVZNVEWUES_01CA0141 ((__Troll_CFBundleCopyBundleURL) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction007, Troll_GFLVZNVEWUES, 111, 22))
#define Troll_GFLVZNVEWUES_01CA01EC ((__Troll_CFStringCompare) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction004, Troll_GFLVZNVEWUES, 82, 16))
#define Troll_GFLVZNVEWUES_01CA0207 ((__Troll_CFGetTypeID) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction007, Troll_GFLVZNVEWUES, 176, 16))
#define Troll_GFLVZNVEWUES_01CA0273 ((__Troll_CFDictionaryGetValue) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction00B, Troll_GFLVZNVEWUES, 15, 21))
#define Troll_GFLVZNVEWUES_02110069 ((__Troll_CFDataGetBytePtr) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction008, Troll_GFLVZNVEWUES, 78, 17))
#define Troll_JMEDIBVWLSXE_00F600F0 ((__Troll_CFDataAppendBytes) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction005, Troll_JMEDIBVWLSXE, 183, 18))
#define Troll_JMEDIBVWLSXE_018D002E ((__Troll_SecCodeCopySelf) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 397, 38, 55, Troll_ObfuscationFunction00A, Troll_JMEDIBVWLSXE, 116, 16))
#define Troll_JMEDIBVWLSXE_01CA001D ((__Troll_CFDictionaryCreateMutable) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction008, Troll_JMEDIBVWLSXE, 118, 34))
#define Troll_JMEDIBVWLSXE_01CA0226 ((__Troll_CFReadStreamRead) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction00C, Troll_JMEDIBVWLSXE, 39, 17))
#define Troll_JMEDIBVWLSXE_020E012B ((__Troll_IORegistryEntryGetParentEntry) Troll_LookupFunction015(Troll_ObfuscationFunction004, 526, 226, 49, Troll_ObfuscationFunction006, Troll_JMEDIBVWLSXE, 89, 38))
#define Troll_JMEDIBVWLSXE_02110018 ((__Troll_CFDictionaryGetValue) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction00B, Troll_JMEDIBVWLSXE, 129, 21))
#define Troll_JMEDIBVWLSXE_021100E2 ((__Troll_CFBundleGetValueForInfoDictionaryKey) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction005, Troll_JMEDIBVWLSXE, 127, 37))
#define Troll_JMEDIBVWLSXE_0211018C ((__Troll_CFDateCompare) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction008, Troll_JMEDIBVWLSXE, 167, 16))
#define Troll_JMEDIBVWLSXE_02560032 ((__Troll_SecStaticCodeCreateWithPath) Troll_LookupFunction015(Troll_ObfuscationFunction007, 598, 57, 55, Troll_ObfuscationFunction009, Troll_JMEDIBVWLSXE, 217, 36))
#define Troll_JMEDIBVWLSXE_02560156 ((__Troll_SecKeychainOpen) Troll_LookupFunction015(Troll_ObfuscationFunction007, 598, 57, 55, Troll_ObfuscationFunction008, Troll_JMEDIBVWLSXE, 243, 16))
#define Troll_IOObjectRelease_00410087 ((__Troll_IOObjectRelease) Troll_LookupFunction015(Troll_ObfuscationFunction006, 65, 140, 49, Troll_ObfuscationFunction005, 135, 15, 16))
#define Troll_kCFBundleIdentifierKey_01CA000E ((__Troll_kCFBundleIdentifierKey) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction007, 14, 180, 23))
#define Troll_kCFDateFormatterTimeZone_00F60225 ((__Troll_kCFDateFormatterTimeZone) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction003, 549, 165, 33))
#define Troll_kCFTypeArrayCallBacks_00F60138 ((__Troll_kCFTypeArrayCallBacks) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction004, 312, 53, 22))
#define Troll_kCFTypeArrayCallBacks_02110188 ((__Troll_kCFTypeArrayCallBacks) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction009, 392, 206, 22))
#define Troll_kCFTypeArrayCallBacks_0211024B ((__Troll_kCFTypeArrayCallBacks) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction00A, 587, 252, 22))
#define Troll_kCFTypeDictionaryKeyCallBacks_00F600AB ((__Troll_kCFTypeDictionaryKeyCallBacks) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction005, 171, 70, 38))
#define Troll_kCFTypeDictionaryKeyCallBacks_01CA0094 ((__Troll_kCFTypeDictionaryKeyCallBacks) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction00B, 148, 26, 38))
#define Troll_kCFTypeDictionaryKeyCallBacks_02110094 ((__Troll_kCFTypeDictionaryKeyCallBacks) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 529, 77, 67, Troll_ObfuscationFunction00B, 148, 26, 38))
#define Troll_kCFTypeDictionaryValueCallBacks_00F601D6 ((__Troll_kCFTypeDictionaryValueCallBacks) Troll_LookupFunction015(Troll_ObfuscationFunction005, 246, 47, 67, Troll_ObfuscationFunction005, 470, 81, 32))
#define Troll_kCFTypeDictionaryValueCallBacks_01CA01D6 ((__Troll_kCFTypeDictionaryValueCallBacks) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction005, 470, 81, 32))
#define Troll_kCFTypeDictionaryValueCallBacks_01CA025C ((__Troll_kCFTypeDictionaryValueCallBacks) Troll_LookupFunction015(Troll_ObfuscationFunction005, 458, 65, 67, Troll_ObfuscationFunction007, 604, 237, 32))
#define Troll_kSecClass_018D003C ((__Troll_kSecClass) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 397, 38, 55, Troll_ObfuscationFunction006, 60, 53, 16))
#define Troll_kSecClass_0256003C ((__Troll_kSecClass) Troll_LookupFunction015(Troll_ObfuscationFunction007, 598, 57, 55, Troll_ObfuscationFunction006, 60, 53, 16))
#define Troll_kSecClassCertificate_019301CD ((__Troll_kSecClassCertificate) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 403, 166, 55, Troll_ObfuscationFunction007, 461, 156, 21))
#define Troll_kSecClassCertificate_02560038 ((__Troll_kSecClassCertificate) Troll_LookupFunction015(Troll_ObfuscationFunction007, 598, 57, 55, Troll_ObfuscationFunction004, 56, 40, 21))
#define Troll_kSecCodeInfoEntitlements_01930097 ((__Troll_kSecCodeInfoEntitlements) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 403, 166, 55, Troll_ObfuscationFunction005, 151, 33, 33))
#define Troll_kSecCodeInfoPList_0256015E ((__Troll_kSecCodeInfoPList) Troll_LookupFunction015(Troll_ObfuscationFunction007, 598, 57, 55, Troll_ObfuscationFunction00B, 350, 47, 18))
#define Troll_kSecMatchLimit_018D000D ((__Troll_kSecMatchLimit) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 397, 38, 55, Troll_ObfuscationFunction00C, 13, 203, 16))
#define Troll_kSecMatchLimit_0193000D ((__Troll_kSecMatchLimit) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 403, 166, 55, Troll_ObfuscationFunction00C, 13, 203, 16))
#define Troll_kSecMatchLimitAll_019300AF ((__Troll_kSecMatchLimitAll) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 403, 166, 55, Troll_ObfuscationFunction003, 175, 48, 18))
#define Troll_kSecMatchLimitAll_025601DB ((__Troll_kSecMatchLimitAll) Troll_LookupFunction015(Troll_ObfuscationFunction007, 598, 57, 55, Troll_ObfuscationFunction008, 475, 223, 18))
#define Troll_kSecMatchSearchList_018D011D ((__Troll_kSecMatchSearchList) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 397, 38, 55, Troll_ObfuscationFunction003, 285, 242, 20))
#define Troll_kSecMatchSearchList_018D01D5 ((__Troll_kSecMatchSearchList) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 397, 38, 55, Troll_ObfuscationFunction004, 469, 75, 20))
#define Troll_kSecMatchSubjectContains_018D0187 ((__Troll_kSecMatchSubjectContains) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 397, 38, 55, Troll_ObfuscationFunction005, 391, 47, 33))
#define Troll_kSecReturnRef_018D00E7 ((__Troll_kSecReturnRef) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 397, 38, 55, Troll_ObfuscationFunction00A, 231, 225, 16))
#define Troll_kSecReturnRef_02560131 ((__Troll_kSecReturnRef) Troll_LookupFunction015(Troll_ObfuscationFunction007, 598, 57, 55, Troll_ObfuscationFunction009, 305, 21, 16))
#define Troll_longjmp_016700F7 ((__Troll_longjmp) Troll_LookupFunction015(Troll_ObfuscationFunction007, 359, 224, 33, Troll_ObfuscationFunction006, 247, 123, 16))
#define Troll_longjmp_0167010B ((__Troll_longjmp) Troll_LookupFunction015(Troll_ObfuscationFunction007, 359, 224, 33, Troll_ObfuscationFunction00A, 267, 243, 16))
#define Troll_longjmp_02290049 ((__Troll_longjmp) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 553, 189, 33, Troll_ObfuscationFunction008, 73, 74, 16))
#define Troll_longjmp_025B0049 ((__Troll_longjmp) Troll_LookupFunction015(Troll_ObfuscationFunction007, 603, 102, 33, Troll_ObfuscationFunction008, 73, 74, 16))
#define Troll_longjmp_025B00F7 ((__Troll_longjmp) Troll_LookupFunction015(Troll_ObfuscationFunction007, 603, 102, 33, Troll_ObfuscationFunction006, 247, 123, 16))
#define Troll_longjmp_025B010B ((__Troll_longjmp) Troll_LookupFunction015(Troll_ObfuscationFunction007, 603, 102, 33, Troll_ObfuscationFunction00A, 267, 243, 16))
#define Troll_OBJ_txt2obj_021E0063 ((__Troll_OBJ_txt2obj) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction00B, 99, 11, 16))
#define Troll_objc_getClass_0122013F ((__Troll_objc_getClass) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 290, 190, 23, Troll_ObfuscationFunction00B, 319, 177, 16))
#define Troll_objc_getClass_01220180 ((__Troll_objc_getClass) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 290, 190, 23, Troll_ObfuscationFunction007, 384, 121, 16))
#define Troll_objc_getClass_0122026B ((__Troll_objc_getClass) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 290, 190, 23, Troll_ObfuscationFunction00C, 619, 227, 16))
#define Troll_objc_getClass_0153013F ((__Troll_objc_getClass) Troll_LookupFunction015(Troll_ObfuscationFunction006, 339, 80, 23, Troll_ObfuscationFunction00B, 319, 177, 16))
#define Troll_objc_getClass_01530180 ((__Troll_objc_getClass) Troll_LookupFunction015(Troll_ObfuscationFunction006, 339, 80, 23, Troll_ObfuscationFunction007, 384, 121, 16))
#define Troll_objc_getClass_0153026B ((__Troll_objc_getClass) Troll_LookupFunction015(Troll_ObfuscationFunction006, 339, 80, 23, Troll_ObfuscationFunction00C, 619, 227, 16))
#define Troll_objc_getClass_01640180 ((__Troll_objc_getClass) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 356, 191, 23, Troll_ObfuscationFunction007, 384, 121, 16))
#define Troll_objc_getClass_0164026B ((__Troll_objc_getClass) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 356, 191, 23, Troll_ObfuscationFunction00C, 619, 227, 16))
#define Troll_objc_msgSend_012200DC ((__Troll_objc_msgSend) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 290, 190, 23, Troll_ObfuscationFunction007, 220, 37, 16))
#define Troll_objc_msgSend_0122021A ((__Troll_objc_msgSend) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 290, 190, 23, Troll_ObfuscationFunction008, 538, 252, 16))
#define Troll_objc_msgSend_01220255 ((__Troll_objc_msgSend) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 290, 190, 23, Troll_ObfuscationFunction004, 597, 90, 16))
#define Troll_objc_msgSend_015300DC ((__Troll_objc_msgSend) Troll_LookupFunction015(Troll_ObfuscationFunction006, 339, 80, 23, Troll_ObfuscationFunction007, 220, 37, 16))
#define Troll_objc_msgSend_01530255 ((__Troll_objc_msgSend) Troll_LookupFunction015(Troll_ObfuscationFunction006, 339, 80, 23, Troll_ObfuscationFunction004, 597, 90, 16))
#define Troll_objc_msgSend_0164021A ((__Troll_objc_msgSend) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 356, 191, 23, Troll_ObfuscationFunction008, 538, 252, 16))
#define Troll_objc_msgSend_01640255 ((__Troll_objc_msgSend) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 356, 191, 23, Troll_ObfuscationFunction004, 597, 90, 16))
#define Troll_OpenSSL_add_all_digests_004B00EC ((__Troll_OpenSSL_add_all_digests) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction007, 236, 92, 32))
#define Troll_OpenSSL_add_all_digests_021E01B6 ((__Troll_OpenSSL_add_all_digests) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction006, 438, 2, 32))
#define Troll_PKCS7_free_004B018F ((__Troll_PKCS7_free) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction005, 399, 59, 16))
#define Troll_PKCS7_free_008A01DA ((__Troll_PKCS7_free) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction00A, 474, 56, 16))
#define Troll_PKCS7_get0_signers_021E022E ((__Troll_PKCS7_get0_signers) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction007, 558, 68, 19))
#define Troll_PKCS7_verify_004B0266 ((__Troll_PKCS7_verify) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction00A, 614, 183, 16))
#define Troll_SecCertificateCopyData_018D01DC ((__Troll_SecCertificateCopyData) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 397, 38, 55, Troll_ObfuscationFunction009, 476, 253, 23))
#define Troll_SecCertificateCopyData_019301DC ((__Troll_SecCertificateCopyData) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 403, 166, 55, Troll_ObfuscationFunction009, 476, 253, 23))
#define Troll_sel_registerName_012200E5 ((__Troll_sel_registerName) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 290, 190, 23, Troll_ObfuscationFunction005, 229, 12, 17))
#define Troll_sel_registerName_012201E4 ((__Troll_sel_registerName) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 290, 190, 23, Troll_ObfuscationFunction007, 484, 155, 17))
#define Troll_sel_registerName_01220278 ((__Troll_sel_registerName) Troll_LookupFunction015(Troll_ObfuscationFunction00B, 290, 190, 23, Troll_ObfuscationFunction00C, 632, 161, 17))
#define Troll_sel_registerName_015300E5 ((__Troll_sel_registerName) Troll_LookupFunction015(Troll_ObfuscationFunction006, 339, 80, 23, Troll_ObfuscationFunction005, 229, 12, 17))
#define Troll_sel_registerName_015301E4 ((__Troll_sel_registerName) Troll_LookupFunction015(Troll_ObfuscationFunction006, 339, 80, 23, Troll_ObfuscationFunction007, 484, 155, 17))
#define Troll_sel_registerName_01530278 ((__Troll_sel_registerName) Troll_LookupFunction015(Troll_ObfuscationFunction006, 339, 80, 23, Troll_ObfuscationFunction00C, 632, 161, 17))
#define Troll_sel_registerName_016400E5 ((__Troll_sel_registerName) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 356, 191, 23, Troll_ObfuscationFunction005, 229, 12, 17))
#define Troll_sel_registerName_016401E4 ((__Troll_sel_registerName) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 356, 191, 23, Troll_ObfuscationFunction007, 484, 155, 17))
#define Troll_sel_registerName_01640278 ((__Troll_sel_registerName) Troll_LookupFunction015(Troll_ObfuscationFunction00C, 356, 191, 23, Troll_ObfuscationFunction00C, 632, 161, 17))
#define Troll_setjmp_025B0162 ((__Troll_setjmp) Troll_LookupFunction015(Troll_ObfuscationFunction007, 603, 102, 33, Troll_ObfuscationFunction007, 354, 20, 16))
#define Troll_SHA1_021E01BF ((__Troll_SHA1) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction003, 447, 196, 16))
#define Troll_SHA1_Final_008A0235 ((__Troll_SHA1_Final) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction009, 565, 24, 16))
#define Troll_SHA1_Init_021E0195 ((__Troll_SHA1_Init) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction007, 405, 122, 16))
#define Troll_SHA1_Update_004B00A6 ((__Troll_SHA1_Update) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction005, 166, 88, 16))
#define Troll_sk_free_004B0233 ((__Troll_sk_free) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction003, 563, 197, 16))
#define Troll_sk_num_004B00A1 ((__Troll_sk_num) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction008, 161, 241, 16))
#define Troll_sk_value_004B00CF ((__Troll_sk_value) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction00C, 207, 135, 16))
#define Troll_X509_digest_008A007B ((__Troll_X509_digest) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction006, 123, 67, 16))
#define Troll_X509_free_021E0095 ((__Troll_X509_free) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction009, 149, 82, 16))
#define Troll_X509_get_ext_by_OBJ_008A01D1 ((__Troll_X509_get_ext_by_OBJ) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction004, 465, 35, 20))
#define Troll_X509_NAME_get_text_by_NID_004B01D8 ((__Troll_X509_NAME_get_text_by_NID) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction003, 472, 62, 34))
#define Troll_X509_STORE_add_cert_021E0258 ((__Troll_X509_STORE_add_cert) Troll_LookupFunction015(Troll_ObfuscationFunction005, 542, 83, 16, Troll_ObfuscationFunction003, 600, 227, 20))
#define Troll_X509_STORE_free_008A0265 ((__Troll_X509_STORE_free) Troll_LookupFunction015(Troll_ObfuscationFunction004, 138, 193, 16, Troll_ObfuscationFunction00C, 613, 225, 16))
#define Troll_X509_STORE_new_004B004A ((__Troll_X509_STORE_new) Troll_LookupFunction015(Troll_ObfuscationFunction008, 75, 58, 16, Troll_ObfuscationFunction003, 74, 176, 16))


// CodeBlock ObfuscationFunction / M(Rot)
inline static void Troll_ObfuscationFunction003(const char *Troll_p1, char *Troll_p2, int Troll_p3, int Troll_p4) {
    int Troll_i1 = 0;
    while(Troll_i1 < Troll_p4) { Troll_p2[Troll_i1] = (char) (Troll_p1[Troll_i1] - Troll_p3); Troll_i1++; }
}

__RETURN_RETAINED inline static CFStringRef Troll_ObfuscationFunction003CF(const char *Troll_p1, int Troll_p3, int Troll_p4) {
    char Troll_tmp1[639];
    char *Troll_tmp2 = Troll_tmp1;
    Troll_ObfuscationFunction003(Troll_p1, Troll_tmp1, Troll_p3, Troll_p4);
    while(*Troll_tmp2) { Troll_tmp2++; }
    CFStringRef Troll_str1 = ((__Troll_CFStringCreateWithBytes) Troll_Pointers[620])(NULL, (const UInt8 *) Troll_tmp1, (CFIndex) (Troll_tmp2 - Troll_tmp1), kCFStringEncodingUTF8, false);
    return Troll_str1;
}


// CodeBlock ObfuscationFunction / M(Rot)
inline static void Troll_ObfuscationFunction004(const char *Troll_p1, char *Troll_p2, int Troll_p3, int Troll_p4) {
    int Troll_i1 = 0;
    while(Troll_i1 < Troll_p4) { Troll_p2[Troll_i1] = (char) (Troll_p1[Troll_i1] - Troll_p3); Troll_i1++; }
}

__RETURN_RETAINED inline static CFStringRef Troll_ObfuscationFunction004CF(const char *Troll_p1, int Troll_p3, int Troll_p4) {
    char Troll_tmp1[639];
    Troll_ObfuscationFunction004(Troll_p1, Troll_tmp1, Troll_p3, Troll_p4);
    CFStringRef Troll_str1 = ((__Troll_CFStringCreateWithCString) Troll_Pointers[409])(NULL, Troll_tmp1, kCFStringEncodingUTF8);
    return Troll_str1;
}


// CodeBlock ObfuscationFunction / M(Xor1)
inline static void Troll_ObfuscationFunction005(const char *Troll_p1, char *Troll_p2, int Troll_p3, int Troll_p4) {
    int Troll_i1 = 0;
    while(Troll_i1 < Troll_p4) { Troll_p2[Troll_i1] = Troll_p1[Troll_i1] ^ (char) Troll_p3; Troll_i1++; }
}

__RETURN_RETAINED inline static CFStringRef Troll_ObfuscationFunction005CF(const char *Troll_p1, int Troll_p3, int Troll_p4) {
    char Troll_tmp1[639];
    char *Troll_tmp2 = Troll_tmp1;
    Troll_ObfuscationFunction005(Troll_p1, Troll_tmp1, Troll_p3, Troll_p4);
    while(*Troll_tmp2) { Troll_tmp2++; }
    CFStringRef Troll_str1 = ((__Troll_CFStringCreateWithBytes) Troll_Pointers[168])(NULL, (const UInt8 *) Troll_tmp1, (CFIndex) (Troll_tmp2 - Troll_tmp1), kCFStringEncodingUTF8, false);
    return Troll_str1;
}


// CodeBlock ObfuscationFunction / M(Xor1)
inline static void Troll_ObfuscationFunction006(const char *Troll_p1, char *Troll_p2, int Troll_p3, int Troll_p4) {
    int Troll_i1 = 0;
    while(Troll_i1 < Troll_p4) { Troll_p2[Troll_i1] = Troll_p1[Troll_i1] ^ (char) Troll_p3; Troll_i1++; }
}

__RETURN_RETAINED inline static CFStringRef Troll_ObfuscationFunction006CF(const char *Troll_p1, int Troll_p3, int Troll_p4) {
    char Troll_tmp1[639];
    Troll_ObfuscationFunction006(Troll_p1, Troll_tmp1, Troll_p3, Troll_p4);
    CFStringRef Troll_str1 = ((__Troll_CFStringCreateWithCString) Troll_Pointers[266])(NULL, Troll_tmp1, kCFStringEncodingUTF8);
    return Troll_str1;
}


// CodeBlock ObfuscationFunction / M(Xor2)
inline static void Troll_ObfuscationFunction007(const char *Troll_p1, char *Troll_p2, int Troll_p3, int Troll_p4) {
    int Troll_i1 = 0;
    while(Troll_i1 < Troll_p4) { Troll_p2[Troll_i1] = (char) (Troll_p1[Troll_i1] ^ Troll_p3 ^ Troll_p4); Troll_i1++; }
}

__RETURN_RETAINED inline static CFStringRef Troll_ObfuscationFunction007CF(const char *Troll_p1, int Troll_p3, int Troll_p4) {
    char Troll_tmp1[639];
    char *Troll_tmp2 = Troll_tmp1;
    Troll_ObfuscationFunction007(Troll_p1, Troll_tmp1, Troll_p3, Troll_p4);
    while(*Troll_tmp2) { Troll_tmp2++; }
    CFStringRef Troll_str1 = ((__Troll_CFStringCreateWithBytes) Troll_Pointers[620])(NULL, (const UInt8 *) Troll_tmp1, (CFIndex) (Troll_tmp2 - Troll_tmp1), kCFStringEncodingUTF8, false);
    return Troll_str1;
}


// CodeBlock ObfuscationFunction / M(Xor2)
inline static void Troll_ObfuscationFunction008(const char *Troll_p1, char *Troll_p2, int Troll_p3, int Troll_p4) {
    int Troll_i1 = 0;
    while(Troll_i1 < Troll_p4) { Troll_p2[Troll_i1] = (char) (Troll_p1[Troll_i1] ^ Troll_p3 ^ Troll_p4); Troll_i1++; }
}

__RETURN_RETAINED inline static CFStringRef Troll_ObfuscationFunction008CF(const char *Troll_p1, int Troll_p3, int Troll_p4) {
    char Troll_tmp1[639];
    Troll_ObfuscationFunction008(Troll_p1, Troll_tmp1, Troll_p3, Troll_p4);
    CFStringRef Troll_str1 = ((__Troll_CFStringCreateWithCString) Troll_Pointers[262])(NULL, Troll_tmp1, kCFStringEncodingUTF8);
    return Troll_str1;
}


// CodeBlock ObfuscationFunction / M(Xor3)
inline static void Troll_ObfuscationFunction009(const char *Troll_p1, char *Troll_p2, int Troll_p3, int Troll_p4) {
    int Troll_i1 = 0;
    while(Troll_i1 < Troll_p4) { Troll_p2[Troll_i1] = (char) (Troll_p1[Troll_i1] ^ (Troll_p3 + Troll_p4)); Troll_i1++; }
}

__RETURN_RETAINED inline static CFStringRef Troll_ObfuscationFunction009CF(const char *Troll_p1, int Troll_p3, int Troll_p4) {
    char Troll_tmp1[639];
    char *Troll_tmp2 = Troll_tmp1;
    Troll_ObfuscationFunction009(Troll_p1, Troll_tmp1, Troll_p3, Troll_p4);
    while(*Troll_tmp2) { Troll_tmp2++; }
    CFStringRef Troll_str1 = ((__Troll_CFStringCreateWithBytes) Troll_Pointers[620])(NULL, (const UInt8 *) Troll_tmp1, (CFIndex) (Troll_tmp2 - Troll_tmp1), kCFStringEncodingUTF8, false);
    return Troll_str1;
}


// CodeBlock ObfuscationFunction / M(Xor3)
inline static void Troll_ObfuscationFunction00A(const char *Troll_p1, char *Troll_p2, int Troll_p3, int Troll_p4) {
    int Troll_i1 = 0;
    while(Troll_i1 < Troll_p4) { Troll_p2[Troll_i1] = (char) (Troll_p1[Troll_i1] ^ (Troll_p3 + Troll_p4)); Troll_i1++; }
}

__RETURN_RETAINED inline static CFStringRef Troll_ObfuscationFunction00ACF(const char *Troll_p1, int Troll_p3, int Troll_p4) {
    char Troll_tmp1[639];
    Troll_ObfuscationFunction00A(Troll_p1, Troll_tmp1, Troll_p3, Troll_p4);
    CFStringRef Troll_str1 = ((__Troll_CFStringCreateWithCString) Troll_Pointers[266])(NULL, Troll_tmp1, kCFStringEncodingUTF8);
    return Troll_str1;
}


// CodeBlock ObfuscationFunction / M(Xor4)
inline static void Troll_ObfuscationFunction00B(const char *Troll_p1, char *Troll_p2, int Troll_p3, int Troll_p4) {
    int Troll_i1 = 0;
    while(Troll_i1 < Troll_p4) { Troll_p2[Troll_i1] = (char) (Troll_p1[Troll_i1] ^ (Troll_p3 * Troll_p4)); Troll_i1++; }
}

__RETURN_RETAINED inline static CFStringRef Troll_ObfuscationFunction00BCF(const char *Troll_p1, int Troll_p3, int Troll_p4) {
    char Troll_tmp1[639];
    char *Troll_tmp2 = Troll_tmp1;
    Troll_ObfuscationFunction00B(Troll_p1, Troll_tmp1, Troll_p3, Troll_p4);
    while(*Troll_tmp2) { Troll_tmp2++; }
    CFStringRef Troll_str1 = ((__Troll_CFStringCreateWithBytes) Troll_Pointers[152])(NULL, (const UInt8 *) Troll_tmp1, (CFIndex) (Troll_tmp2 - Troll_tmp1), kCFStringEncodingUTF8, false);
    return Troll_str1;
}


// CodeBlock ObfuscationFunction / M(Xor4)
inline static void Troll_ObfuscationFunction00C(const char *Troll_p1, char *Troll_p2, int Troll_p3, int Troll_p4) {
    int Troll_i1 = 0;
    while(Troll_i1 < Troll_p4) { Troll_p2[Troll_i1] = (char) (Troll_p1[Troll_i1] ^ (Troll_p3 * Troll_p4)); Troll_i1++; }
}

__RETURN_RETAINED inline static CFStringRef Troll_ObfuscationFunction00CCF(const char *Troll_p1, int Troll_p3, int Troll_p4) {
    char Troll_tmp1[639];
    Troll_ObfuscationFunction00C(Troll_p1, Troll_tmp1, Troll_p3, Troll_p4);
    CFStringRef Troll_str1 = ((__Troll_CFStringCreateWithCString) Troll_Pointers[266])(NULL, Troll_tmp1, kCFStringEncodingUTF8);
    return Troll_str1;
}


// CodeBlock LookupFunction
inline static void *Troll_LookupFunction015(Troll_decrypt Troll_func1, int Troll_index1, int Troll_val1, int Troll_len1, Troll_decrypt Troll_func2, int Troll_index2, int Troll_val2, int Troll_len2) {
    char Troll_tmp1[639], Troll_tmp2[639];
    // Load the library if needed
    if (Troll_Pointers[Troll_index1] == NULL) {
        Troll_func1(Troll_Strings[Troll_index1], Troll_tmp1, Troll_val1, Troll_len1);
        Troll_Pointers[Troll_index1] = ((__Troll_dlopen) Troll_Pointers[347])(Troll_tmp1, RTLD_NOW | RTLD_FIRST);
    }
    // Load the function if needed
    if (Troll_Pointers[Troll_index2] == NULL) {
        Troll_func2(Troll_Strings[Troll_index2], Troll_tmp2, Troll_val2, Troll_len2);
        Troll_Pointers[Troll_index2] = ((__Troll_dlsym) Troll_Pointers[414])(Troll_Pointers[Troll_index1], Troll_tmp2);
    }
    return Troll_Pointers[Troll_index2];
}




// CodeBlock GetMainBundle
#ifdef DEBUG
inline static void Troll_GetMainBundle017(Troll_CheckingContext *Troll_ctx) {
    __Troll_RECEIPT_LOG("Troll - Retrieving main bundle");
    // Retrieve the main bundle
    CFBundleRef Troll_bundle = Troll_CFBundleGetMainBundle_021101B1();
    if (!Troll_bundle) {
        // Dead code
        Troll_CFRelease_00F600EF(Troll_bundle);
        Troll_CFBundleUnloadExecutable_0211009F((CFBundleRef) Troll_bundle);
    }
    Troll_ctx->main_bundle = (CFBundleRef) Troll_bundle;
    // Global variables computation
    // Set to 227
    Troll_BQKNQZJKSLGF = 227;
    // Set to 588
    Troll_WMWXBUDZCZZS = 588;
    // Set to 213
    Troll_YOVDGFJHGPOO = 213;
    // Set to 581
    Troll_PKEWSSIFFWTL = 581;
    // Set to 214
    Troll_NZDWMPAPGHWA = 214;
    // Set to 12
    Troll_XIBODEUXAVIA = 12;
    // Set to 321
    Troll_GFLVZNVEWUES = 321;
    // Set to 550
    Troll_JMEDIBVWLSXE = 550;
}
#else
#define Troll_GetMainBundle017(Troll_ctx) { \
    __Troll_RECEIPT_LOG("Troll - Retrieving main bundle"); \
    CFBundleRef Troll_bundle = Troll_CFBundleGetMainBundle_021101B1(); \
    if (!Troll_bundle) { \
        Troll_CFRelease_00F600EF(Troll_bundle); \
        Troll_CFBundleUnloadExecutable_0211009F((CFBundleRef) Troll_bundle); \
    } \
    Troll_ctx->main_bundle = (CFBundleRef) Troll_bundle; \
    Troll_BQKNQZJKSLGF = 227; \
    Troll_WMWXBUDZCZZS = 588; \
    Troll_YOVDGFJHGPOO = 213; \
    Troll_PKEWSSIFFWTL = 581; \
    Troll_NZDWMPAPGHWA = 214; \
    Troll_XIBODEUXAVIA = 12; \
    Troll_GFLVZNVEWUES = 321; \
    Troll_JMEDIBVWLSXE = 550; \
}
#endif


// CodeBlock LoadReceipt
#ifndef RECEIGEN_EXTERNAL_RECEIPT
#ifdef DEBUG
inline static void Troll_LoadReceipt02D(Troll_CheckingContext *Troll_ctx) {
    CFStringRef Troll_str1;
    CFURLRef Troll_url1, Troll_url2;
    CFReadStreamRef Troll_stream;
    CFMutableDataRef Troll_data;
    CFIndex Troll_count;
    uint8_t Troll_buffer[639];
    __Troll_RECEIPT_LOG("Troll - Loading receipt");
    // Compute the path to the receipt
    Troll_url1 = Troll_GFLVZNVEWUES_01CA0141((CFBundleRef) Troll_ctx->main_bundle);
    Troll_str1 = Troll_ObfuscationFunction007CF((Troll_Strings[617]), 62, 16);
    Troll_url2 = Troll_CFURLCreateCopyAppendingPathComponent_021101F0(NULL, Troll_url1, Troll_str1, true);
    Troll_CFRelease_01CA00EF(Troll_str1);
    Troll_CFRelease_01CA00EF(Troll_url1);
    Troll_str1 = Troll_ObfuscationFunction004CF((Troll_Strings[205]), 136, 16);
    Troll_url1 = Troll_CFURLCreateCopyAppendingPathComponent_021101F0(NULL, Troll_url2, Troll_str1, true);
    Troll_CFRelease_01CA00EF(Troll_str1);
    Troll_CFRelease_01CA00EF(Troll_url2);
    Troll_str1 = Troll_ObfuscationFunction003CF((Troll_Strings[245]), 214, 16);
    Troll_url2 = Troll_CFURLCreateCopyAppendingPathComponent_021101F0(NULL, Troll_url1, Troll_str1, false);
    Troll_CFRelease_01CA00EF(Troll_str1);
    Troll_CFRelease_01CA00EF(Troll_url1);
    // Create a stream from the receipt file
    Troll_stream = Troll_BQKNQZJKSLGF_021100E3(kCFAllocatorDefault, Troll_url2);
    if (Troll_stream == NULL || !Troll_CFReadStreamOpen_00F6023E(Troll_stream)) {
        __Troll_RECEIPT_LOG("Troll - Error while opening receipt");
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA00EF(Troll_url1);
        Troll_CFRelease_01CA00EF(Troll_str1);
        Troll_CFRelease_01CA00EF(Troll_url1);
        goto Troll_LoadReceipt02D_Troll_bail;
    }
    // Create the data object that will contains receipt data
    Troll_data = Troll_YOVDGFJHGPOO_01CA00D5(kCFAllocatorDefault, 0);
    // Read the receipt by chunks
    do {
        Troll_count = Troll_JMEDIBVWLSXE_01CA0226(Troll_stream, &Troll_buffer[0], 639);
        if (Troll_count > 0) {
            Troll_XIBODEUXAVIA_0211000C(Troll_data, Troll_buffer, Troll_count);
        }
    } while (Troll_count > 0);
    // Close the stream
    Troll_WMWXBUDZCZZS_01CA024C(Troll_stream);
    if (Troll_ctx->receipt_data) Troll_CFRelease_01CA00EF(Troll_ctx->receipt_data);
    Troll_ctx->receipt_data = Troll_data;
    // Global variables computation
    // From 588 to 5
    Troll_WMWXBUDZCZZS += 7; Troll_WMWXBUDZCZZS /= 119; 
    // From 213 to 298
    Troll_YOVDGFJHGPOO -= 114; Troll_YOVDGFJHGPOO *= 3; Troll_YOVDGFJHGPOO += 1; 
    // From 214 to 362
    Troll_NZDWMPAPGHWA -= 94; Troll_NZDWMPAPGHWA *= 3; Troll_NZDWMPAPGHWA += 2; 
    // From 12 to 345
    Troll_XIBODEUXAVIA -= 1; Troll_XIBODEUXAVIA *= 30; Troll_XIBODEUXAVIA += 15; 
    // From 321 to 523
    Troll_GFLVZNVEWUES -= 147; Troll_GFLVZNVEWUES *= 3; Troll_GFLVZNVEWUES += 1; 
    // From 550 to 299
    Troll_JMEDIBVWLSXE += 347; Troll_JMEDIBVWLSXE /= 3; 
Troll_LoadReceipt02D_Troll_bail:
    if (Troll_stream) Troll_CFRelease_01CA00EF(Troll_stream);    
    Troll_CFRelease_01CA00EF(Troll_url2);
}
#else
#define Troll_LoadReceipt02D(Troll_ctx) { \
    CFStringRef Troll_str1; \
    CFURLRef Troll_url1, Troll_url2; \
    CFReadStreamRef Troll_stream; \
    CFMutableDataRef Troll_data; \
    CFIndex Troll_count; \
    uint8_t Troll_buffer[639]; \
    __Troll_RECEIPT_LOG("Troll - Loading receipt"); \
    Troll_url1 = Troll_GFLVZNVEWUES_01CA0141((CFBundleRef) Troll_ctx->main_bundle); \
    Troll_str1 = Troll_ObfuscationFunction007CF((Troll_Strings[617]), 62, 16); \
    Troll_url2 = Troll_CFURLCreateCopyAppendingPathComponent_021101F0(NULL, Troll_url1, Troll_str1, true); \
    Troll_CFRelease_01CA00EF(Troll_str1); \
    Troll_CFRelease_01CA00EF(Troll_url1); \
    Troll_str1 = Troll_ObfuscationFunction004CF((Troll_Strings[205]), 136, 16); \
    Troll_url1 = Troll_CFURLCreateCopyAppendingPathComponent_021101F0(NULL, Troll_url2, Troll_str1, true); \
    Troll_CFRelease_01CA00EF(Troll_str1); \
    Troll_CFRelease_01CA00EF(Troll_url2); \
    Troll_str1 = Troll_ObfuscationFunction003CF((Troll_Strings[245]), 214, 16); \
    Troll_url2 = Troll_CFURLCreateCopyAppendingPathComponent_021101F0(NULL, Troll_url1, Troll_str1, false); \
    Troll_CFRelease_01CA00EF(Troll_str1); \
    Troll_CFRelease_01CA00EF(Troll_url1); \
    Troll_stream = Troll_BQKNQZJKSLGF_021100E3(kCFAllocatorDefault, Troll_url2); \
    if (Troll_stream == NULL || !Troll_CFReadStreamOpen_00F6023E(Troll_stream)) { \
        __Troll_RECEIPT_LOG("Troll - Error while opening receipt"); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA00EF(Troll_url1); \
        Troll_CFRelease_01CA00EF(Troll_str1); \
        Troll_CFRelease_01CA00EF(Troll_url1); \
        goto Troll_LoadReceipt02D_Troll_bail; \
    } \
    Troll_data = Troll_YOVDGFJHGPOO_01CA00D5(kCFAllocatorDefault, 0); \
    do { \
        Troll_count = Troll_JMEDIBVWLSXE_01CA0226(Troll_stream, &Troll_buffer[0], 639); \
        if (Troll_count > 0) { \
            Troll_XIBODEUXAVIA_0211000C(Troll_data, Troll_buffer, Troll_count); \
        } \
    } while (Troll_count > 0); \
    Troll_WMWXBUDZCZZS_01CA024C(Troll_stream); \
    if (Troll_ctx->receipt_data) Troll_CFRelease_01CA00EF(Troll_ctx->receipt_data); \
    Troll_ctx->receipt_data = Troll_data; \
    Troll_WMWXBUDZCZZS += 7; Troll_WMWXBUDZCZZS /= 119;  \
    Troll_YOVDGFJHGPOO -= 114; Troll_YOVDGFJHGPOO *= 3; Troll_YOVDGFJHGPOO += 1;  \
    Troll_NZDWMPAPGHWA -= 94; Troll_NZDWMPAPGHWA *= 3; Troll_NZDWMPAPGHWA += 2;  \
    Troll_XIBODEUXAVIA -= 1; Troll_XIBODEUXAVIA *= 30; Troll_XIBODEUXAVIA += 15;  \
    Troll_GFLVZNVEWUES -= 147; Troll_GFLVZNVEWUES *= 3; Troll_GFLVZNVEWUES += 1;  \
    Troll_JMEDIBVWLSXE += 347; Troll_JMEDIBVWLSXE /= 3;  \
Troll_LoadReceipt02D_Troll_bail: \
    if (Troll_stream) Troll_CFRelease_01CA00EF(Troll_stream);     \
    Troll_CFRelease_01CA00EF(Troll_url2); \
}
#endif
#endif

#ifdef RECEIGEN_EXTERNAL_RECEIPT
#ifdef DEBUG
inline static void Troll_LoadReceipt02D(Troll_CheckingContext *Troll_ctx) {
    CFStringRef Troll_str1;
    CFURLRef Troll_url1 = NULL;
    CFReadStreamRef Troll_stream = NULL;
    CFMutableDataRef Troll_data;
    CFIndex Troll_count;
    uint8_t Troll_buffer[639];
    char Troll_path[PATH_MAX];
    int Troll_status;
    glob_t Troll_glob_buffer;
    char *Troll_expanded_path;
    Troll_str1 = Troll_ObfuscationFunction009CF((Troll_Strings[200]), 55, 16);
    __Troll_RECEIPT_LOG("Troll - Loading external receipt at '%s'", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()));
    // Compute the path to the receipt
    if (!Troll_PKEWSSIFFWTL_02110245(Troll_str1, Troll_path, PATH_MAX)) {
        __Troll_RECEIPT_LOG("Troll - Cannot convert receipt path");
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B010B(Troll_JumpBuf, 1);
        // Dead code
        goto Troll_LoadReceipt02D_Troll_bail;
    }
    Troll_status = ((__Troll_glob_b) Troll_Pointers[48])(Troll_path, GLOB_TILDE | GLOB_ERR, NULL, &Troll_glob_buffer);
    if (Troll_status != 0 || Troll_glob_buffer.gl_pathc != 1) {
        ((__Troll_globfree) Troll_Pointers[102])(&Troll_glob_buffer);
        __Troll_RECEIPT_LOG("Troll - Error while globbing receipt path");
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B010B(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA00EF(Troll_str1);
        Troll_CFRelease_01CA00EF(Troll_url1);
        Troll_CFRelease_01CA00EF(Troll_str1);
        goto Troll_LoadReceipt02D_Troll_bail;
    }
    // Get the globbed path
    Troll_expanded_path = Troll_glob_buffer.gl_pathv[0];
    __Troll_RECEIPT_LOG("Troll - Receipt path resolved to '%s'", Troll_expanded_path);
    Troll_url1 = Troll_CFURLCreateFromFileSystemRepresentation_0211009A(kCFAllocatorDefault, (const UInt8 *) Troll_expanded_path, (CFIndex) ((__Troll_strlen) Troll_Pointers[270])(Troll_expanded_path), false);
    ((__Troll_globfree) Troll_Pointers[102])(&Troll_glob_buffer);
    // Create a stream from the receipt file
    Troll_stream = Troll_BQKNQZJKSLGF_021100E3(kCFAllocatorDefault, Troll_url1);
    if (Troll_stream == NULL || !Troll_CFReadStreamOpen_01CA0201(Troll_stream)) {
        __Troll_RECEIPT_LOG("Troll - Error while opening receipt");
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B010B(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA00EF(Troll_url1);
        Troll_CFRelease_01CA00EF(Troll_str1);
        Troll_CFRelease_01CA00EF(Troll_url1);
        goto Troll_LoadReceipt02D_Troll_bail;
    }
    // Create the data object that will contains receipt data
    Troll_data = Troll_YOVDGFJHGPOO_01CA00D5(kCFAllocatorDefault, 0);
    // Read the receipt by chunks
    do {
        Troll_count = Troll_JMEDIBVWLSXE_01CA0226(Troll_stream, &Troll_buffer[0], 639);
        if (Troll_count > 0) {
            Troll_XIBODEUXAVIA_0211000C(Troll_data, Troll_buffer, Troll_count);
        }
    } while (Troll_count > 0);
    // Close the stream
    Troll_WMWXBUDZCZZS_01CA024C(Troll_stream);
    if (Troll_ctx->receipt_data) Troll_CFRelease_01CA00EF(Troll_ctx->receipt_data);
    Troll_ctx->receipt_data = Troll_data;
    // Global variables computation
    // From 588 to 5
    Troll_WMWXBUDZCZZS += 7; Troll_WMWXBUDZCZZS /= 119; 
    // From 213 to 298
    Troll_YOVDGFJHGPOO -= 114; Troll_YOVDGFJHGPOO *= 3; Troll_YOVDGFJHGPOO += 1; 
    // From 214 to 362
    Troll_NZDWMPAPGHWA -= 94; Troll_NZDWMPAPGHWA *= 3; Troll_NZDWMPAPGHWA += 2; 
    // From 12 to 345
    Troll_XIBODEUXAVIA -= 1; Troll_XIBODEUXAVIA *= 30; Troll_XIBODEUXAVIA += 15; 
    // From 321 to 523
    Troll_GFLVZNVEWUES -= 147; Troll_GFLVZNVEWUES *= 3; Troll_GFLVZNVEWUES += 1; 
    // From 550 to 299
    Troll_JMEDIBVWLSXE += 347; Troll_JMEDIBVWLSXE /= 3; 
Troll_LoadReceipt02D_Troll_bail:
    if (Troll_stream) Troll_CFRelease_01CA00EF(Troll_stream);    
    Troll_CFRelease_01CA00EF(Troll_str1);
    if (Troll_url1) Troll_CFRelease_01CA00EF(Troll_url1);
}
#else
#define Troll_LoadReceipt02D(Troll_ctx) { \
    CFStringRef Troll_str1; \
    CFURLRef Troll_url1 = NULL; \
    CFReadStreamRef Troll_stream = NULL; \
    CFMutableDataRef Troll_data; \
    CFIndex Troll_count; \
    uint8_t Troll_buffer[639]; \
    char Troll_path[PATH_MAX]; \
    int Troll_status; \
    glob_t Troll_glob_buffer; \
    char *Troll_expanded_path; \
    Troll_str1 = Troll_ObfuscationFunction009CF((Troll_Strings[200]), 55, 16); \
    __Troll_RECEIPT_LOG("Troll - Loading external receipt at '%s'", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding())); \
    if (!Troll_PKEWSSIFFWTL_02110245(Troll_str1, Troll_path, PATH_MAX)) { \
        __Troll_RECEIPT_LOG("Troll - Cannot convert receipt path"); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
        goto Troll_LoadReceipt02D_Troll_bail; \
    } \
    Troll_status = ((__Troll_glob_b) Troll_Pointers[48])(Troll_path, GLOB_TILDE | GLOB_ERR, NULL, &Troll_glob_buffer); \
    if (Troll_status != 0 || Troll_glob_buffer.gl_pathc != 1) { \
        ((__Troll_globfree) Troll_Pointers[102])(&Troll_glob_buffer); \
        __Troll_RECEIPT_LOG("Troll - Error while globbing receipt path"); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA00EF(Troll_str1); \
        Troll_CFRelease_01CA00EF(Troll_url1); \
        Troll_CFRelease_01CA00EF(Troll_str1); \
        goto Troll_LoadReceipt02D_Troll_bail; \
    } \
    Troll_expanded_path = Troll_glob_buffer.gl_pathv[0]; \
    __Troll_RECEIPT_LOG("Troll - Receipt path resolved to '%s'", Troll_expanded_path); \
    Troll_url1 = Troll_CFURLCreateFromFileSystemRepresentation_0211009A(kCFAllocatorDefault, (const UInt8 *) Troll_expanded_path, (CFIndex) ((__Troll_strlen) Troll_Pointers[270])(Troll_expanded_path), false); \
    ((__Troll_globfree) Troll_Pointers[102])(&Troll_glob_buffer); \
    Troll_stream = Troll_BQKNQZJKSLGF_021100E3(kCFAllocatorDefault, Troll_url1); \
    if (Troll_stream == NULL || !Troll_CFReadStreamOpen_01CA0201(Troll_stream)) { \
        __Troll_RECEIPT_LOG("Troll - Error while opening receipt"); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA00EF(Troll_url1); \
        Troll_CFRelease_01CA00EF(Troll_str1); \
        Troll_CFRelease_01CA00EF(Troll_url1); \
        goto Troll_LoadReceipt02D_Troll_bail; \
    } \
    Troll_data = Troll_YOVDGFJHGPOO_01CA00D5(kCFAllocatorDefault, 0); \
    do { \
        Troll_count = Troll_JMEDIBVWLSXE_01CA0226(Troll_stream, &Troll_buffer[0], 639); \
        if (Troll_count > 0) { \
            Troll_XIBODEUXAVIA_0211000C(Troll_data, Troll_buffer, Troll_count); \
        } \
    } while (Troll_count > 0); \
    Troll_WMWXBUDZCZZS_01CA024C(Troll_stream); \
    if (Troll_ctx->receipt_data) Troll_CFRelease_01CA00EF(Troll_ctx->receipt_data); \
    Troll_ctx->receipt_data = Troll_data; \
    Troll_WMWXBUDZCZZS += 7; Troll_WMWXBUDZCZZS /= 119;  \
    Troll_YOVDGFJHGPOO -= 114; Troll_YOVDGFJHGPOO *= 3; Troll_YOVDGFJHGPOO += 1;  \
    Troll_NZDWMPAPGHWA -= 94; Troll_NZDWMPAPGHWA *= 3; Troll_NZDWMPAPGHWA += 2;  \
    Troll_XIBODEUXAVIA -= 1; Troll_XIBODEUXAVIA *= 30; Troll_XIBODEUXAVIA += 15;  \
    Troll_GFLVZNVEWUES -= 147; Troll_GFLVZNVEWUES *= 3; Troll_GFLVZNVEWUES += 1;  \
    Troll_JMEDIBVWLSXE += 347; Troll_JMEDIBVWLSXE /= 3;  \
Troll_LoadReceipt02D_Troll_bail: \
    if (Troll_stream) Troll_CFRelease_01CA00EF(Troll_stream);     \
    Troll_CFRelease_01CA00EF(Troll_str1); \
    if (Troll_url1) Troll_CFRelease_01CA00EF(Troll_url1); \
}
#endif
#endif


// CodeBlock GetGUID
#ifdef DEBUG
inline static void Troll_GetGUID049(Troll_CheckingContext *Troll_ctx) {
    kern_return_t Troll_kernResult;
    mach_port_t Troll_master_port;
    CFMutableDictionaryRef Troll_matching_dict = NULL;
    io_iterator_t Troll_iterator;
    io_object_t Troll_service, Troll_parent_service;
    char *Troll_str1;
    CFStringRef Troll_str2;
    Troll_str2 = Troll_ObfuscationFunction003CF((Troll_Strings[596]), 204, 16); 
    __Troll_RECEIPT_LOG("Troll - Getting MAC address");
    // Open a MACH port
    Troll_kernResult = Troll_YOVDGFJHGPOO_0017012A(MACH_PORT_NULL, &Troll_master_port);
    if (Troll_kernResult != KERN_SUCCESS) {
        // Dead code
        Troll_CFRelease_01CA0026(Troll_str2);
        Troll_CFRelease_01CA0026(Troll_matching_dict);
        Troll_CFRelease_01CA0026(Troll_str2);
        goto Troll_GetGUID049_Troll_bail;
    }
    // Create a search for primary interface
    char Troll_str1_[639];
    Troll_ObfuscationFunction007((Troll_Strings[174]), Troll_str1_, 125, 16);
    Troll_str1 = Troll_str1_;
    Troll_matching_dict = Troll_GFLVZNVEWUES_0017020B(Troll_master_port, 0, Troll_str1);
    if (!Troll_matching_dict) {
        // Dead code
        Troll_CFRelease_01CA0026(Troll_matching_dict);
        Troll_CFRelease_01CA0026(Troll_str2);
        Troll_CFRelease_01CA0026(Troll_matching_dict);
        goto Troll_GetGUID049_Troll_bail;
    }
    // Perform the search
    Troll_kernResult = Troll_NZDWMPAPGHWA_0017016A(Troll_master_port, Troll_matching_dict, &Troll_iterator);
    if (Troll_kernResult != KERN_SUCCESS) {
        // Dead code
        Troll_CFRelease_01CA0026(Troll_matching_dict);
        Troll_CFRelease_01CA0026(Troll_str2);
        Troll_CFRelease_01CA0026(Troll_matching_dict);
        goto Troll_GetGUID049_Troll_bail;
    }
    // Iterate over the result
    while((Troll_service = Troll_WMWXBUDZCZZS_00170005(Troll_iterator)) != 0) {
        Troll_kernResult = Troll_JMEDIBVWLSXE_020E012B(Troll_service, kIOServicePlane, &Troll_parent_service);
        if (Troll_kernResult == KERN_SUCCESS) {
            if (Troll_ctx->guid_data) Troll_CFRelease_01CA0026(Troll_ctx->guid_data);
            Troll_ctx->guid_data = (CFDataRef) Troll_XIBODEUXAVIA_020E0159(Troll_parent_service, Troll_str2, NULL, 0);
            Troll_IOObjectRelease_00410087(Troll_parent_service);
        }
        Troll_IOObjectRelease_00410087(Troll_iterator);
        Troll_IOObjectRelease_00410087(Troll_service);
    }
    // Global variables computation
    // From 227 to 277
    Troll_BQKNQZJKSLGF -= 135; Troll_BQKNQZJKSLGF *= 3; Troll_BQKNQZJKSLGF += 1; 
    // From 5 to 507
    Troll_WMWXBUDZCZZS -= 1; Troll_WMWXBUDZCZZS *= 103; Troll_WMWXBUDZCZZS += 95; 
    // From 298 to 235
    Troll_YOVDGFJHGPOO += 172; Troll_YOVDGFJHGPOO /= 2; 
    // From 581 to 602
    Troll_PKEWSSIFFWTL -= 381; Troll_PKEWSSIFFWTL *= 3; Troll_PKEWSSIFFWTL += 2; 
    // From 362 to 181
    Troll_NZDWMPAPGHWA += 181; Troll_NZDWMPAPGHWA /= 3; 
    // From 345 to 638
    Troll_XIBODEUXAVIA -= 133; Troll_XIBODEUXAVIA *= 3; Troll_XIBODEUXAVIA += 2; 
    // From 523 to 371
    Troll_GFLVZNVEWUES += 219; Troll_GFLVZNVEWUES /= 2; 
    // From 299 to 342
    Troll_JMEDIBVWLSXE -= 185; Troll_JMEDIBVWLSXE *= 3; 
Troll_GetGUID049_Troll_bail:
    Troll_CFRelease_01CA0026(Troll_str2);
}
#else
#define Troll_GetGUID049(Troll_ctx) { \
    kern_return_t Troll_kernResult; \
    mach_port_t Troll_master_port; \
    CFMutableDictionaryRef Troll_matching_dict = NULL; \
    io_iterator_t Troll_iterator; \
    io_object_t Troll_service, Troll_parent_service; \
    char *Troll_str1; \
    CFStringRef Troll_str2; \
    Troll_str2 = Troll_ObfuscationFunction003CF((Troll_Strings[596]), 204, 16);  \
    __Troll_RECEIPT_LOG("Troll - Getting MAC address"); \
    Troll_kernResult = Troll_YOVDGFJHGPOO_0017012A(MACH_PORT_NULL, &Troll_master_port); \
    if (Troll_kernResult != KERN_SUCCESS) { \
        Troll_CFRelease_01CA0026(Troll_str2); \
        Troll_CFRelease_01CA0026(Troll_matching_dict); \
        Troll_CFRelease_01CA0026(Troll_str2); \
        goto Troll_GetGUID049_Troll_bail; \
    } \
    char Troll_str1_[639]; \
    Troll_ObfuscationFunction007((Troll_Strings[174]), Troll_str1_, 125, 16); \
    Troll_str1 = Troll_str1_; \
    Troll_matching_dict = Troll_GFLVZNVEWUES_0017020B(Troll_master_port, 0, Troll_str1); \
    if (!Troll_matching_dict) { \
        Troll_CFRelease_01CA0026(Troll_matching_dict); \
        Troll_CFRelease_01CA0026(Troll_str2); \
        Troll_CFRelease_01CA0026(Troll_matching_dict); \
        goto Troll_GetGUID049_Troll_bail; \
    } \
    Troll_kernResult = Troll_NZDWMPAPGHWA_0017016A(Troll_master_port, Troll_matching_dict, &Troll_iterator); \
    if (Troll_kernResult != KERN_SUCCESS) { \
        Troll_CFRelease_01CA0026(Troll_matching_dict); \
        Troll_CFRelease_01CA0026(Troll_str2); \
        Troll_CFRelease_01CA0026(Troll_matching_dict); \
        goto Troll_GetGUID049_Troll_bail; \
    } \
    while((Troll_service = Troll_WMWXBUDZCZZS_00170005(Troll_iterator)) != 0) { \
        Troll_kernResult = Troll_JMEDIBVWLSXE_020E012B(Troll_service, kIOServicePlane, &Troll_parent_service); \
        if (Troll_kernResult == KERN_SUCCESS) { \
            if (Troll_ctx->guid_data) Troll_CFRelease_01CA0026(Troll_ctx->guid_data); \
            Troll_ctx->guid_data = (CFDataRef) Troll_XIBODEUXAVIA_020E0159(Troll_parent_service, Troll_str2, NULL, 0); \
            Troll_IOObjectRelease_00410087(Troll_parent_service); \
        } \
        Troll_IOObjectRelease_00410087(Troll_iterator); \
        Troll_IOObjectRelease_00410087(Troll_service); \
    } \
    Troll_BQKNQZJKSLGF -= 135; Troll_BQKNQZJKSLGF *= 3; Troll_BQKNQZJKSLGF += 1;  \
    Troll_WMWXBUDZCZZS -= 1; Troll_WMWXBUDZCZZS *= 103; Troll_WMWXBUDZCZZS += 95;  \
    Troll_YOVDGFJHGPOO += 172; Troll_YOVDGFJHGPOO /= 2;  \
    Troll_PKEWSSIFFWTL -= 381; Troll_PKEWSSIFFWTL *= 3; Troll_PKEWSSIFFWTL += 2;  \
    Troll_NZDWMPAPGHWA += 181; Troll_NZDWMPAPGHWA /= 3;  \
    Troll_XIBODEUXAVIA -= 133; Troll_XIBODEUXAVIA *= 3; Troll_XIBODEUXAVIA += 2;  \
    Troll_GFLVZNVEWUES += 219; Troll_GFLVZNVEWUES /= 2;  \
    Troll_JMEDIBVWLSXE -= 185; Troll_JMEDIBVWLSXE *= 3;  \
Troll_GetGUID049_Troll_bail: \
    Troll_CFRelease_01CA0026(Troll_str2); \
}
#endif


// CodeBlock GetRootCA
#if MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_6
#ifdef DEBUG
inline static void Troll_GetRootCA052(Troll_CheckingContext *Troll_ctx) {
    OSStatus Troll_status;
    SecKeychainRef Troll_keychain = NULL;
    CFTypeRef Troll_searchList = NULL;
    CFDictionaryRef Troll_searchDict = NULL;
    char *Troll_str1;
    CFTypeRef Troll_str2 = NULL;
    CFIndex Troll_idx;
    CFTypeRef Troll_results = NULL;
    SecCertificateRef Troll_certificate = NULL;
    volatile CFIndex Troll_count1 = 1; Troll_count1 /= 1; 
    volatile CFIndex Troll_count2 = 1; Troll_count2 -= 1; Troll_count2 *= 7; Troll_count2 += 5; 
    const void *Troll_searchKeys[5];
    const void *Troll_searchValues[5];
    __Troll_RECEIPT_LOG("Troll - Loading Apple Root CA");
    char Troll_str1_[639];
    Troll_ObfuscationFunction006((Troll_Strings[634]), Troll_str1_, 193, 66);
    Troll_str1 = Troll_str1_;
    Troll_status = Troll_JMEDIBVWLSXE_02560156(Troll_str1, &Troll_keychain);
    if (Troll_status != errSecSuccess) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        // TODO
        goto Troll_GetRootCA052_Troll_bail;
    }
    // Create a search list within the system Keychain
    Troll_searchList = Troll_NZDWMPAPGHWA_00F600B5(kCFAllocatorDefault, Troll_count1, Troll_kCFTypeArrayCallBacks_0211024B);
    Troll_BQKNQZJKSLGF_00F60115((CFMutableArrayRef) Troll_searchList, Troll_keychain);
    // Create the criteria dictionary to find the Apple Root CA certificate
    Troll_str2 = Troll_ObfuscationFunction00ACF((Troll_Strings[52]), 153, 16);
    Troll_searchKeys[0] = *Troll_kSecClass_018D003C;
    Troll_searchValues[0] = *Troll_kSecClassCertificate_019301CD;
    Troll_searchKeys[1] = *Troll_kSecMatchSearchList_018D01D5;
    Troll_searchValues[1] = Troll_searchList;
    Troll_searchKeys[2] = *Troll_kSecMatchSubjectContains_018D0187;
    Troll_searchValues[2] = Troll_str2;
    Troll_searchKeys[3] = *Troll_kSecMatchLimit_018D000D;
    Troll_searchValues[3] = *Troll_kSecMatchLimitAll_025601DB;
    Troll_searchKeys[4] = *Troll_kSecReturnRef_02560131;
    Troll_searchValues[4] = kCFBooleanTrue;
    Troll_searchDict = Troll_XIBODEUXAVIA_0211027E(kCFAllocatorDefault, Troll_count2, Troll_kCFTypeDictionaryKeyCallBacks_01CA0094, Troll_kCFTypeDictionaryValueCallBacks_00F601D6);
    while(Troll_count2-- > 0) {
        Troll_CFDictionaryAddValue_00F6011A((CFMutableDictionaryRef) Troll_searchDict, Troll_searchKeys[Troll_count2], Troll_searchValues[Troll_count2]);
    }
    // Perform the actual search
    Troll_status = Troll_WMWXBUDZCZZS_018D01FB(Troll_searchDict, &Troll_results);
    if (Troll_status != errSecSuccess) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        // TODO
        goto Troll_GetRootCA052_Troll_bail;
    }
    // Iterate over the results and copy the certificate data
    for(Troll_idx = 0; Troll_idx < Troll_GFLVZNVEWUES_00F60173((CFArrayRef) Troll_results); Troll_idx++) {
        Troll_certificate = (SecCertificateRef) Troll_CFArrayGetValueAtIndex_01CA006B((CFArrayRef) Troll_results, Troll_idx);
        if (Troll_ctx->ca_data) Troll_CFRelease_01CA00EF(Troll_ctx->ca_data);
        Troll_ctx->ca_data = Troll_SecCertificateCopyData_019301DC(Troll_certificate);
    }
    // Global variables computation
    // From 235 to 226
    Troll_YOVDGFJHGPOO += 217; Troll_YOVDGFJHGPOO /= 2; 
    // From 181 to 306
    Troll_NZDWMPAPGHWA -= 79; Troll_NZDWMPAPGHWA *= 3; 
    // From 638 to 35
    Troll_XIBODEUXAVIA += 62; Troll_XIBODEUXAVIA /= 20; 
Troll_GetRootCA052_Troll_bail:
    if (Troll_str2) Troll_CFRelease_01CA00EF(Troll_str2);
    if (Troll_results) Troll_CFRelease_01CA00EF(Troll_results);
    if (Troll_searchDict) Troll_CFRelease_01CA00EF(Troll_searchDict);
    if (Troll_searchList) Troll_CFRelease_01CA00EF(Troll_searchList);
    if (Troll_keychain) Troll_CFRelease_01CA00EF(Troll_keychain);
}
#else
#define Troll_GetRootCA052(Troll_ctx) { \
    OSStatus Troll_status; \
    SecKeychainRef Troll_keychain = NULL; \
    CFTypeRef Troll_searchList = NULL; \
    CFDictionaryRef Troll_searchDict = NULL; \
    char *Troll_str1; \
    CFTypeRef Troll_str2 = NULL; \
    CFIndex Troll_idx; \
    CFTypeRef Troll_results = NULL; \
    SecCertificateRef Troll_certificate = NULL; \
    volatile CFIndex Troll_count1 = 1; Troll_count1 /= 1;  \
    volatile CFIndex Troll_count2 = 1; Troll_count2 -= 1; Troll_count2 *= 7; Troll_count2 += 5;  \
    const void *Troll_searchKeys[5]; \
    const void *Troll_searchValues[5]; \
    __Troll_RECEIPT_LOG("Troll - Loading Apple Root CA"); \
    char Troll_str1_[639]; \
    Troll_ObfuscationFunction006((Troll_Strings[634]), Troll_str1_, 193, 66); \
    Troll_str1 = Troll_str1_; \
    Troll_status = Troll_JMEDIBVWLSXE_02560156(Troll_str1, &Troll_keychain); \
    if (Troll_status != errSecSuccess) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        goto Troll_GetRootCA052_Troll_bail; \
    } \
    Troll_searchList = Troll_NZDWMPAPGHWA_00F600B5(kCFAllocatorDefault, Troll_count1, Troll_kCFTypeArrayCallBacks_0211024B); \
    Troll_BQKNQZJKSLGF_00F60115((CFMutableArrayRef) Troll_searchList, Troll_keychain); \
    Troll_str2 = Troll_ObfuscationFunction00ACF((Troll_Strings[52]), 153, 16); \
    Troll_searchKeys[0] = *Troll_kSecClass_018D003C; \
    Troll_searchValues[0] = *Troll_kSecClassCertificate_019301CD; \
    Troll_searchKeys[1] = *Troll_kSecMatchSearchList_018D01D5; \
    Troll_searchValues[1] = Troll_searchList; \
    Troll_searchKeys[2] = *Troll_kSecMatchSubjectContains_018D0187; \
    Troll_searchValues[2] = Troll_str2; \
    Troll_searchKeys[3] = *Troll_kSecMatchLimit_018D000D; \
    Troll_searchValues[3] = *Troll_kSecMatchLimitAll_025601DB; \
    Troll_searchKeys[4] = *Troll_kSecReturnRef_02560131; \
    Troll_searchValues[4] = kCFBooleanTrue; \
    Troll_searchDict = Troll_XIBODEUXAVIA_0211027E(kCFAllocatorDefault, Troll_count2, Troll_kCFTypeDictionaryKeyCallBacks_01CA0094, Troll_kCFTypeDictionaryValueCallBacks_00F601D6); \
    while(Troll_count2-- > 0) { \
        Troll_CFDictionaryAddValue_00F6011A((CFMutableDictionaryRef) Troll_searchDict, Troll_searchKeys[Troll_count2], Troll_searchValues[Troll_count2]); \
    } \
    Troll_status = Troll_WMWXBUDZCZZS_018D01FB(Troll_searchDict, &Troll_results); \
    if (Troll_status != errSecSuccess) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        goto Troll_GetRootCA052_Troll_bail; \
    } \
    for(Troll_idx = 0; Troll_idx < Troll_GFLVZNVEWUES_00F60173((CFArrayRef) Troll_results); Troll_idx++) { \
        Troll_certificate = (SecCertificateRef) Troll_CFArrayGetValueAtIndex_01CA006B((CFArrayRef) Troll_results, Troll_idx); \
        if (Troll_ctx->ca_data) Troll_CFRelease_01CA00EF(Troll_ctx->ca_data); \
        Troll_ctx->ca_data = Troll_SecCertificateCopyData_019301DC(Troll_certificate); \
    } \
    Troll_YOVDGFJHGPOO += 217; Troll_YOVDGFJHGPOO /= 2;  \
    Troll_NZDWMPAPGHWA -= 79; Troll_NZDWMPAPGHWA *= 3;  \
    Troll_XIBODEUXAVIA += 62; Troll_XIBODEUXAVIA /= 20;  \
Troll_GetRootCA052_Troll_bail: \
    if (Troll_str2) Troll_CFRelease_01CA00EF(Troll_str2); \
    if (Troll_results) Troll_CFRelease_01CA00EF(Troll_results); \
    if (Troll_searchDict) Troll_CFRelease_01CA00EF(Troll_searchDict); \
    if (Troll_searchList) Troll_CFRelease_01CA00EF(Troll_searchList); \
    if (Troll_keychain) Troll_CFRelease_01CA00EF(Troll_keychain); \
}
#endif
#endif

#if MAC_OS_X_VERSION_MIN_REQUIRED == MAC_OS_X_VERSION_10_6
#ifdef DEBUG
inline static void Troll_GetRootCA052(Troll_CheckingContext *Troll_ctx) {
    OSStatus Troll_status;
    SecKeychainRef Troll_keychain = NULL;
    CFTypeRef Troll_searchList = NULL;
    char *Troll_str1, *Troll_str2;
    SecKeychainAttributeList Troll_attributeList;
    SecKeychainAttribute Troll_attribute;
    SecKeychainSearchRef Troll_searchRef = NULL;
    SecKeychainItemRef Troll_itemRef = nil;
    volatile CFIndex Troll_count1 = 1; Troll_count1 /= 1; 
    volatile CFIndex Troll_count2 = 1; Troll_count2 -= 1; Troll_count2 *= 7; Troll_count2 += 5; 
    volatile CFIndex Troll_count3 = 1; Troll_count3 -= 1; Troll_count3 *= 15; Troll_count3 += 13; 
    __Troll_RECEIPT_LOG("Troll - Loading Apple Root CA");
    char Troll_str1_[639];
    Troll_ObfuscationFunction006((Troll_Strings[253]), Troll_str1_, 239, 66);
    Troll_str1 = Troll_str1_;
    Troll_status = Troll_JMEDIBVWLSXE_02560156(Troll_str1, &Troll_keychain);
    if (Troll_status != errSecSuccess) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        goto Troll_GetRootCA052_Troll_bail;
    }
    // Create a search list within the system Keychain
    Troll_searchList = Troll_NZDWMPAPGHWA_00F600B5(kCFAllocatorDefault, Troll_count1, Troll_kCFTypeArrayCallBacks_00F60138);
    Troll_BQKNQZJKSLGF_00F60115((CFMutableArrayRef) Troll_searchList, Troll_keychain);
    // Create the criteria dictionary to find the Apple Root CA certificate
    char Troll_str2_[639];
    Troll_ObfuscationFunction004((Troll_Strings[276]), Troll_str2_, 143, 16);
    Troll_str2 = Troll_str2_;
    Troll_attributeList.count = 1;
    Troll_attributeList.attr  = &Troll_attribute;
    Troll_attribute.tag = kSecLabelItemAttr;
    Troll_attribute.data = Troll_str2;
    Troll_attribute.length = (UInt32) Troll_count3;
    Troll_status = Troll_YOVDGFJHGPOO_018D00EB(Troll_searchList, kSecCertificateItemClass, &Troll_attributeList, &Troll_searchRef);
    if (Troll_status != errSecSuccess) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        goto Troll_GetRootCA052_Troll_bail;
    }
    // Iterate over the results and copy the certificate data
    while(Troll_PKEWSSIFFWTL_0256025A(Troll_searchRef, &Troll_itemRef) == noErr) {
        if (Troll_ctx->ca_data) Troll_CFRelease_00F600EF(Troll_ctx->ca_data);
        Troll_ctx->ca_data = Troll_SecCertificateCopyData_018D01DC((SecCertificateRef) Troll_itemRef);
    }
    // Global variables computation
    // From 235 to 226
    Troll_YOVDGFJHGPOO += 217; Troll_YOVDGFJHGPOO /= 2; 
    // From 181 to 306
    Troll_NZDWMPAPGHWA -= 79; Troll_NZDWMPAPGHWA *= 3; 
    // From 638 to 35
    Troll_XIBODEUXAVIA += 62; Troll_XIBODEUXAVIA /= 20; 
Troll_GetRootCA052_Troll_bail:
    if (Troll_itemRef) Troll_CFRelease_00F600EF(Troll_itemRef);
    if (Troll_searchRef) Troll_CFRelease_00F600EF(Troll_searchRef);
    if (Troll_searchList) Troll_CFRelease_00F600EF(Troll_searchList);
    if (Troll_keychain) Troll_CFRelease_00F600EF(Troll_keychain);
}
#else
#define Troll_GetRootCA052(Troll_ctx) { \
    OSStatus Troll_status; \
    SecKeychainRef Troll_keychain = NULL; \
    CFTypeRef Troll_searchList = NULL; \
    char *Troll_str1, *Troll_str2; \
    SecKeychainAttributeList Troll_attributeList; \
    SecKeychainAttribute Troll_attribute; \
    SecKeychainSearchRef Troll_searchRef = NULL; \
    SecKeychainItemRef Troll_itemRef = nil; \
    volatile CFIndex Troll_count1 = 1; Troll_count1 /= 1;  \
    volatile CFIndex Troll_count2 = 1; Troll_count2 -= 1; Troll_count2 *= 7; Troll_count2 += 5;  \
    volatile CFIndex Troll_count3 = 1; Troll_count3 -= 1; Troll_count3 *= 15; Troll_count3 += 13;  \
    __Troll_RECEIPT_LOG("Troll - Loading Apple Root CA"); \
    char Troll_str1_[639]; \
    Troll_ObfuscationFunction006((Troll_Strings[253]), Troll_str1_, 239, 66); \
    Troll_str1 = Troll_str1_; \
    Troll_status = Troll_JMEDIBVWLSXE_02560156(Troll_str1, &Troll_keychain); \
    if (Troll_status != errSecSuccess) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        goto Troll_GetRootCA052_Troll_bail; \
    } \
    Troll_searchList = Troll_NZDWMPAPGHWA_00F600B5(kCFAllocatorDefault, Troll_count1, Troll_kCFTypeArrayCallBacks_00F60138); \
    Troll_BQKNQZJKSLGF_00F60115((CFMutableArrayRef) Troll_searchList, Troll_keychain); \
    char Troll_str2_[639]; \
    Troll_ObfuscationFunction004((Troll_Strings[276]), Troll_str2_, 143, 16); \
    Troll_str2 = Troll_str2_; \
    Troll_attributeList.count = 1; \
    Troll_attributeList.attr  = &Troll_attribute; \
    Troll_attribute.tag = kSecLabelItemAttr; \
    Troll_attribute.data = Troll_str2; \
    Troll_attribute.length = (UInt32) Troll_count3; \
    Troll_status = Troll_YOVDGFJHGPOO_018D00EB(Troll_searchList, kSecCertificateItemClass, &Troll_attributeList, &Troll_searchRef); \
    if (Troll_status != errSecSuccess) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        goto Troll_GetRootCA052_Troll_bail; \
    } \
    while(Troll_PKEWSSIFFWTL_0256025A(Troll_searchRef, &Troll_itemRef) == noErr) { \
        if (Troll_ctx->ca_data) Troll_CFRelease_00F600EF(Troll_ctx->ca_data); \
        Troll_ctx->ca_data = Troll_SecCertificateCopyData_018D01DC((SecCertificateRef) Troll_itemRef); \
    } \
    Troll_YOVDGFJHGPOO += 217; Troll_YOVDGFJHGPOO /= 2;  \
    Troll_NZDWMPAPGHWA -= 79; Troll_NZDWMPAPGHWA *= 3;  \
    Troll_XIBODEUXAVIA += 62; Troll_XIBODEUXAVIA /= 20;  \
Troll_GetRootCA052_Troll_bail: \
    if (Troll_itemRef) Troll_CFRelease_00F600EF(Troll_itemRef); \
    if (Troll_searchRef) Troll_CFRelease_00F600EF(Troll_searchRef); \
    if (Troll_searchList) Troll_CFRelease_00F600EF(Troll_searchList); \
    if (Troll_keychain) Troll_CFRelease_00F600EF(Troll_keychain); \
}
#endif
#endif


// CodeBlock CheckBundleIdentifier
#ifdef DEBUG
inline static void Troll_CheckBundleIdentifier05D(Troll_CheckingContext *Troll_ctx) {
    CFStringRef Troll_str1 = Troll_ObfuscationFunction004CF((Troll_Strings[91]), 68, 32);
    __Troll_RECEIPT_LOG("Troll - Checking bundle identifier");
    CFStringRef Troll_str2 = Troll_ObfuscationFunction005CF((Troll_Strings[241]), 179, 19);
    CFStringRef Troll_str3 = (CFStringRef) Troll_YOVDGFJHGPOO_00F600E2((CFBundleRef) Troll_ctx->main_bundle, Troll_str2);
    if (Troll_XIBODEUXAVIA_00F60023(Troll_str1, Troll_str3, 0) != kCFCompareEqualTo) {
        __Troll_RECEIPT_LOG("Troll - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str3, CFStringGetSystemEncoding()));
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B010B(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_00F600EF(Troll_str1);
        Troll_CFRelease_00F600EF(Troll_str2);
        Troll_CFRelease_00F600EF(Troll_str1);
    }
    Troll_CFRelease_00F600EF(Troll_str2);
    // Global variables computation
    // From 277 to 35
    Troll_BQKNQZJKSLGF += 38; Troll_BQKNQZJKSLGF /= 9; 
    // From 342 to 226
    Troll_JMEDIBVWLSXE += 336; Troll_JMEDIBVWLSXE /= 3; 
    Troll_CFRelease_00F600EF(Troll_str1);
}
#else
#define Troll_CheckBundleIdentifier05D(Troll_ctx) { \
    CFStringRef Troll_str1 = Troll_ObfuscationFunction004CF((Troll_Strings[91]), 68, 32); \
    __Troll_RECEIPT_LOG("Troll - Checking bundle identifier"); \
    CFStringRef Troll_str2 = Troll_ObfuscationFunction005CF((Troll_Strings[241]), 179, 19); \
    CFStringRef Troll_str3 = (CFStringRef) Troll_YOVDGFJHGPOO_00F600E2((CFBundleRef) Troll_ctx->main_bundle, Troll_str2); \
    if (Troll_XIBODEUXAVIA_00F60023(Troll_str1, Troll_str3, 0) != kCFCompareEqualTo) { \
        __Troll_RECEIPT_LOG("Troll - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str3, CFStringGetSystemEncoding())); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
        Troll_CFRelease_00F600EF(Troll_str1); \
        Troll_CFRelease_00F600EF(Troll_str2); \
        Troll_CFRelease_00F600EF(Troll_str1); \
    } \
    Troll_CFRelease_00F600EF(Troll_str2); \
    Troll_BQKNQZJKSLGF += 38; Troll_BQKNQZJKSLGF /= 9;  \
    Troll_JMEDIBVWLSXE += 336; Troll_JMEDIBVWLSXE /= 3;  \
    Troll_CFRelease_00F600EF(Troll_str1); \
}
#endif


// CodeBlock CheckBundleVersion
#ifdef DEBUG
inline static void Troll_CheckBundleVersion05F(Troll_CheckingContext *Troll_ctx) {
    __Troll_RECEIPT_LOG("Troll - Checking bundle version");
    CFStringRef Troll_str1 = Troll_ObfuscationFunction005CF((Troll_Strings[369]), 209, 16);
    CFStringRef Troll_str2 = Troll_ObfuscationFunction00BCF((Troll_Strings[134]), 49, 35);
    CFStringRef Troll_str3 = (CFStringRef) Troll_JMEDIBVWLSXE_021100E2((CFBundleRef) Troll_ctx->main_bundle, Troll_str2);
    if (Troll_BQKNQZJKSLGF_02110023(Troll_str1, Troll_str3, 0) != kCFCompareEqualTo) {
        __Troll_RECEIPT_LOG("Troll - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str3, CFStringGetSystemEncoding()));
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_016700F7(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA003A(Troll_str2);
        Troll_CFRelease_01CA003A(Troll_str1);
        Troll_CFRelease_01CA003A(Troll_str2);
    }
    // Global variables computation
    // From 226 to 364
    Troll_YOVDGFJHGPOO -= 105; Troll_YOVDGFJHGPOO *= 3; Troll_YOVDGFJHGPOO += 1; 
    // Set to 158
    Troll_XIBODEUXAVIA = 158;
    // Set to 46
    Troll_JMEDIBVWLSXE = 46;
    Troll_CFRelease_01CA003A(Troll_str2);
    Troll_CFRelease_01CA003A(Troll_str1);
}
#else
#define Troll_CheckBundleVersion05F(Troll_ctx) { \
    __Troll_RECEIPT_LOG("Troll - Checking bundle version"); \
    CFStringRef Troll_str1 = Troll_ObfuscationFunction005CF((Troll_Strings[369]), 209, 16); \
    CFStringRef Troll_str2 = Troll_ObfuscationFunction00BCF((Troll_Strings[134]), 49, 35); \
    CFStringRef Troll_str3 = (CFStringRef) Troll_JMEDIBVWLSXE_021100E2((CFBundleRef) Troll_ctx->main_bundle, Troll_str2); \
    if (Troll_BQKNQZJKSLGF_02110023(Troll_str1, Troll_str3, 0) != kCFCompareEqualTo) { \
        __Troll_RECEIPT_LOG("Troll - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str3, CFStringGetSystemEncoding())); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_016700F7(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA003A(Troll_str2); \
        Troll_CFRelease_01CA003A(Troll_str1); \
        Troll_CFRelease_01CA003A(Troll_str2); \
    } \
    Troll_YOVDGFJHGPOO -= 105; Troll_YOVDGFJHGPOO *= 3; Troll_YOVDGFJHGPOO += 1;  \
    Troll_XIBODEUXAVIA = 158; \
    Troll_JMEDIBVWLSXE = 46; \
    Troll_CFRelease_01CA003A(Troll_str2); \
    Troll_CFRelease_01CA003A(Troll_str1); \
}
#endif


// CodeBlock CheckBundleSignature
#ifdef DEBUG
inline static void Troll_CheckBundleSignature053(Troll_CheckingContext *Troll_ctx) {
    SecCodeRef Troll_code_ref = NULL;
    OSStatus Troll_status;
    CFErrorRef Troll_error = NULL;
    __Troll_RECEIPT_LOG("Troll - Checking bundle signature");
    Troll_status = Troll_JMEDIBVWLSXE_018D002E(kSecCSDefaultFlags, &Troll_code_ref);
    if (Troll_status != errSecSuccess) {
        __Troll_RECEIPT_LOG("Troll - Bundle signature is invalid");
        Troll_ctx->main_bundle = NULL;
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_02110026(Troll_code_ref);
        Troll_CFRelease_02110026(Troll_code_ref);
        goto Troll_CheckBundleSignature053_Troll_bail;
    }
    Troll_status = Troll_XIBODEUXAVIA_0256009E(Troll_code_ref, kSecCSDefaultFlags, NULL);
    if (Troll_status != errSecSuccess) {
        __Troll_RECEIPT_LOG("Troll - Bundle signature is invalid");
        Troll_ctx->main_bundle = NULL;
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_02110026(Troll_code_ref);
        Troll_CFRelease_02110026(Troll_code_ref);
        goto Troll_CheckBundleSignature053_Troll_bail;
    }
    // Global variables computation
    // From 35 to 225
    Troll_BQKNQZJKSLGF -= 7; Troll_BQKNQZJKSLGF *= 8; Troll_BQKNQZJKSLGF += 1; 
    // From 507 to 84
    Troll_WMWXBUDZCZZS += 165; Troll_WMWXBUDZCZZS /= 8; 
    // From 364 to 302
    Troll_YOVDGFJHGPOO += 240; Troll_YOVDGFJHGPOO /= 2; 
    // From 602 to 367
    Troll_PKEWSSIFFWTL += 499; Troll_PKEWSSIFFWTL /= 3; 
    // From 306 to 429
    Troll_NZDWMPAPGHWA -= 163; Troll_NZDWMPAPGHWA *= 3; 
    // From 158 to 383
    Troll_XIBODEUXAVIA -= 63; Troll_XIBODEUXAVIA *= 4; Troll_XIBODEUXAVIA += 3; 
    // From 371 to 519
    Troll_GFLVZNVEWUES -= 198; Troll_GFLVZNVEWUES *= 3; 
    // From 46 to 50
    Troll_JMEDIBVWLSXE -= 30; Troll_JMEDIBVWLSXE *= 3; Troll_JMEDIBVWLSXE += 2; 
Troll_CheckBundleSignature053_Troll_bail:
    if (Troll_error) Troll_CFRelease_02110026(Troll_error);
    if (Troll_code_ref) Troll_CFRelease_02110026(Troll_code_ref);
}
#else
#define Troll_CheckBundleSignature053(Troll_ctx) { \
    SecCodeRef Troll_code_ref = NULL; \
    OSStatus Troll_status; \
    CFErrorRef Troll_error = NULL; \
    __Troll_RECEIPT_LOG("Troll - Checking bundle signature"); \
    Troll_status = Troll_JMEDIBVWLSXE_018D002E(kSecCSDefaultFlags, &Troll_code_ref); \
    if (Troll_status != errSecSuccess) { \
        __Troll_RECEIPT_LOG("Troll - Bundle signature is invalid"); \
        Troll_ctx->main_bundle = NULL; \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
        Troll_CFRelease_02110026(Troll_code_ref); \
        Troll_CFRelease_02110026(Troll_code_ref); \
        goto Troll_CheckBundleSignature053_Troll_bail; \
    } \
    Troll_status = Troll_XIBODEUXAVIA_0256009E(Troll_code_ref, kSecCSDefaultFlags, NULL); \
    if (Troll_status != errSecSuccess) { \
        __Troll_RECEIPT_LOG("Troll - Bundle signature is invalid"); \
        Troll_ctx->main_bundle = NULL; \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
        Troll_CFRelease_02110026(Troll_code_ref); \
        Troll_CFRelease_02110026(Troll_code_ref); \
        goto Troll_CheckBundleSignature053_Troll_bail; \
    } \
    Troll_BQKNQZJKSLGF -= 7; Troll_BQKNQZJKSLGF *= 8; Troll_BQKNQZJKSLGF += 1;  \
    Troll_WMWXBUDZCZZS += 165; Troll_WMWXBUDZCZZS /= 8;  \
    Troll_YOVDGFJHGPOO += 240; Troll_YOVDGFJHGPOO /= 2;  \
    Troll_PKEWSSIFFWTL += 499; Troll_PKEWSSIFFWTL /= 3;  \
    Troll_NZDWMPAPGHWA -= 163; Troll_NZDWMPAPGHWA *= 3;  \
    Troll_XIBODEUXAVIA -= 63; Troll_XIBODEUXAVIA *= 4; Troll_XIBODEUXAVIA += 3;  \
    Troll_GFLVZNVEWUES -= 198; Troll_GFLVZNVEWUES *= 3;  \
    Troll_JMEDIBVWLSXE -= 30; Troll_JMEDIBVWLSXE *= 3; Troll_JMEDIBVWLSXE += 2;  \
Troll_CheckBundleSignature053_Troll_bail: \
    if (Troll_error) Troll_CFRelease_02110026(Troll_error); \
    if (Troll_code_ref) Troll_CFRelease_02110026(Troll_code_ref); \
}
#endif


// CodeBlock CheckBundleEntitlements
#ifdef DEBUG
inline static void Troll_CheckBundleEntitlements058(Troll_CheckingContext *Troll_ctx) {
    CFURLRef Troll_url1 = NULL;
    SecStaticCodeRef Troll_static_code = NULL;
    OSStatus Troll_status;
    CFErrorRef Troll_error = NULL;
    CFDictionaryRef Troll_information = NULL, Troll_infoplist = NULL;
    CFDataRef Troll_entry = NULL;
    CFStringRef Troll_str1, Troll_str2, Troll_str3, Troll_str4, Troll_str5, Troll_str6;
    __Troll_RECEIPT_LOG("Troll - Checking bundle entitlements");
    Troll_url1 = Troll_WMWXBUDZCZZS_02110054((CFBundleRef) Troll_ctx->main_bundle);
    Troll_status = Troll_JMEDIBVWLSXE_02560032(Troll_url1, kSecCSDefaultFlags, &Troll_static_code);
    if (Troll_status != errSecSuccess) {
        __Troll_RECEIPT_LOG("Troll - Bundle signature is invalid");
        Troll_ctx->main_bundle = NULL;
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA00EF(Troll_url1);
        Troll_CFRelease_01CA00EF(Troll_static_code);
        Troll_CFRelease_01CA00EF(Troll_error);
        Troll_CFRelease_01CA00EF(Troll_url1);
        goto Troll_CheckBundleEntitlements058_Troll_bail;
    }
    Troll_status = Troll_NZDWMPAPGHWA_019301AD(Troll_static_code, kSecCSSigningInformation | kSecCSRequirementInformation, &Troll_information);
    if (Troll_status != errSecSuccess) {
        __Troll_RECEIPT_LOG("Troll - Bundle signature is invalid");
        Troll_ctx->main_bundle = NULL;
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA00EF(Troll_static_code);
        Troll_CFRelease_01CA00EF(Troll_error);
        Troll_CFRelease_01CA00EF(Troll_url1);
        Troll_CFRelease_01CA00EF(Troll_static_code);
        goto Troll_CheckBundleEntitlements058_Troll_bail;
    }
    Troll_infoplist = (CFDictionaryRef) Troll_PKEWSSIFFWTL_01CA016F(Troll_information, *Troll_kSecCodeInfoPList_0256015E);
    if (Troll_infoplist == NULL) {
        __Troll_RECEIPT_LOG("Troll - Bundle signature is invalid");
        Troll_ctx->main_bundle = NULL;
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA00EF(Troll_static_code);
        Troll_CFRelease_01CA00EF(Troll_error);
        Troll_CFRelease_01CA00EF(Troll_url1);
        Troll_CFRelease_01CA00EF(Troll_static_code);
        goto Troll_CheckBundleEntitlements058_Troll_bail;
    }
    Troll_str1 = Troll_ObfuscationFunction004CF((Troll_Strings[91]), 68, 32);
    Troll_str2 = Troll_ObfuscationFunction005CF((Troll_Strings[329]), 214, 19);
    Troll_str3 = (CFStringRef) Troll_PKEWSSIFFWTL_01CA016F(Troll_infoplist, Troll_str2);
    if (CFStringCompare(Troll_str1, Troll_str3, 0) != kCFCompareEqualTo) {
        Troll_CFRelease_01CA00EF(Troll_str1);
        Troll_CFRelease_01CA00EF(Troll_str2);
        __Troll_RECEIPT_LOG("Troll - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str3, CFStringGetSystemEncoding()));
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA00EF(Troll_str1);
        Troll_CFRelease_01CA00EF(Troll_str3);
        Troll_CFRelease_01CA00EF(Troll_str1);
        goto Troll_CheckBundleEntitlements058_Troll_bail;
    }
    Troll_CFRelease_01CA00EF(Troll_str1);
    Troll_CFRelease_01CA00EF(Troll_str2);
    Troll_str4 = Troll_ObfuscationFunction006CF((Troll_Strings[552]), 48, 16);
    Troll_str5 = Troll_ObfuscationFunction00ACF((Troll_Strings[325]), 246, 35);
    Troll_str6 = (CFStringRef) Troll_PKEWSSIFFWTL_01CA016F(Troll_infoplist, Troll_str5);
    if (CFStringCompare(Troll_str4, Troll_str6, 0) != kCFCompareEqualTo) {
        Troll_CFRelease_01CA00EF(Troll_str4);
        Troll_CFRelease_01CA00EF(Troll_str5);
        __Troll_RECEIPT_LOG("Troll - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str4, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str6, CFStringGetSystemEncoding()));
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA00EF(Troll_str5);
        Troll_CFRelease_01CA00EF(Troll_str6);
        Troll_CFRelease_01CA00EF(Troll_str4);
        goto Troll_CheckBundleEntitlements058_Troll_bail;
    }
    Troll_CFRelease_01CA00EF(Troll_str4);
    Troll_CFRelease_01CA00EF(Troll_str5);
    Troll_entry = (CFDataRef) Troll_PKEWSSIFFWTL_01CA016F(Troll_information, *Troll_kSecCodeInfoEntitlements_01930097);
    if (RECEIGEN_CHECK_ENTITLEMENTS && Troll_entry == NULL) {
        __Troll_RECEIPT_LOG("Troll - Bundle has no entitlements");
        Troll_ctx->main_bundle = NULL;
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA00EF(Troll_static_code);
        Troll_CFRelease_01CA00EF(Troll_error);
        Troll_CFRelease_01CA00EF(Troll_url1);
        Troll_CFRelease_01CA00EF(Troll_static_code);
        goto Troll_CheckBundleEntitlements058_Troll_bail;
    }
    // Global variables computation
    // From 225 to 44
    Troll_BQKNQZJKSLGF += 83; Troll_BQKNQZJKSLGF /= 7; 
    // From 84 to 443
    Troll_WMWXBUDZCZZS -= 21; Troll_WMWXBUDZCZZS *= 7; Troll_WMWXBUDZCZZS += 2; 
    // From 302 to 317
    Troll_YOVDGFJHGPOO -= 197; Troll_YOVDGFJHGPOO *= 3; Troll_YOVDGFJHGPOO += 2; 
    // From 367 to 181
    Troll_PKEWSSIFFWTL += 357; Troll_PKEWSSIFFWTL /= 4; 
    // From 429 to 398
    Troll_NZDWMPAPGHWA += 367; Troll_NZDWMPAPGHWA /= 2; 
    // From 383 to 500
    Troll_XIBODEUXAVIA -= 217; Troll_XIBODEUXAVIA *= 3; Troll_XIBODEUXAVIA += 2; 
    // From 519 to 251
    Troll_GFLVZNVEWUES += 485; Troll_GFLVZNVEWUES /= 4; 
    // From 50 to 29
    Troll_JMEDIBVWLSXE += 37; Troll_JMEDIBVWLSXE /= 3; 
Troll_CheckBundleEntitlements058_Troll_bail:
    if (Troll_information) Troll_CFRelease_01CA00EF(Troll_information);
    if (Troll_error) Troll_CFRelease_01CA00EF(Troll_error);
    if (Troll_static_code) Troll_CFRelease_01CA00EF(Troll_static_code);
    if (Troll_url1) Troll_CFRelease_01CA00EF(Troll_url1);
}
#else
#define Troll_CheckBundleEntitlements058(Troll_ctx) { \
    CFURLRef Troll_url1 = NULL; \
    SecStaticCodeRef Troll_static_code = NULL; \
    OSStatus Troll_status; \
    CFErrorRef Troll_error = NULL; \
    CFDictionaryRef Troll_information = NULL, Troll_infoplist = NULL; \
    CFDataRef Troll_entry = NULL; \
    CFStringRef Troll_str1, Troll_str2, Troll_str3, Troll_str4, Troll_str5, Troll_str6; \
    __Troll_RECEIPT_LOG("Troll - Checking bundle entitlements"); \
    Troll_url1 = Troll_WMWXBUDZCZZS_02110054((CFBundleRef) Troll_ctx->main_bundle); \
    Troll_status = Troll_JMEDIBVWLSXE_02560032(Troll_url1, kSecCSDefaultFlags, &Troll_static_code); \
    if (Troll_status != errSecSuccess) { \
        __Troll_RECEIPT_LOG("Troll - Bundle signature is invalid"); \
        Troll_ctx->main_bundle = NULL; \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA00EF(Troll_url1); \
        Troll_CFRelease_01CA00EF(Troll_static_code); \
        Troll_CFRelease_01CA00EF(Troll_error); \
        Troll_CFRelease_01CA00EF(Troll_url1); \
        goto Troll_CheckBundleEntitlements058_Troll_bail; \
    } \
    Troll_status = Troll_NZDWMPAPGHWA_019301AD(Troll_static_code, kSecCSSigningInformation | kSecCSRequirementInformation, &Troll_information); \
    if (Troll_status != errSecSuccess) { \
        __Troll_RECEIPT_LOG("Troll - Bundle signature is invalid"); \
        Troll_ctx->main_bundle = NULL; \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA00EF(Troll_static_code); \
        Troll_CFRelease_01CA00EF(Troll_error); \
        Troll_CFRelease_01CA00EF(Troll_url1); \
        Troll_CFRelease_01CA00EF(Troll_static_code); \
        goto Troll_CheckBundleEntitlements058_Troll_bail; \
    } \
    Troll_infoplist = (CFDictionaryRef) Troll_PKEWSSIFFWTL_01CA016F(Troll_information, *Troll_kSecCodeInfoPList_0256015E); \
    if (Troll_infoplist == NULL) { \
        __Troll_RECEIPT_LOG("Troll - Bundle signature is invalid"); \
        Troll_ctx->main_bundle = NULL; \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA00EF(Troll_static_code); \
        Troll_CFRelease_01CA00EF(Troll_error); \
        Troll_CFRelease_01CA00EF(Troll_url1); \
        Troll_CFRelease_01CA00EF(Troll_static_code); \
        goto Troll_CheckBundleEntitlements058_Troll_bail; \
    } \
    Troll_str1 = Troll_ObfuscationFunction004CF((Troll_Strings[91]), 68, 32); \
    Troll_str2 = Troll_ObfuscationFunction005CF((Troll_Strings[329]), 214, 19); \
    Troll_str3 = (CFStringRef) Troll_PKEWSSIFFWTL_01CA016F(Troll_infoplist, Troll_str2); \
    if (CFStringCompare(Troll_str1, Troll_str3, 0) != kCFCompareEqualTo) { \
        Troll_CFRelease_01CA00EF(Troll_str1); \
        Troll_CFRelease_01CA00EF(Troll_str2); \
        __Troll_RECEIPT_LOG("Troll - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str3, CFStringGetSystemEncoding())); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA00EF(Troll_str1); \
        Troll_CFRelease_01CA00EF(Troll_str3); \
        Troll_CFRelease_01CA00EF(Troll_str1); \
        goto Troll_CheckBundleEntitlements058_Troll_bail; \
    } \
    Troll_CFRelease_01CA00EF(Troll_str1); \
    Troll_CFRelease_01CA00EF(Troll_str2); \
    Troll_str4 = Troll_ObfuscationFunction006CF((Troll_Strings[552]), 48, 16); \
    Troll_str5 = Troll_ObfuscationFunction00ACF((Troll_Strings[325]), 246, 35); \
    Troll_str6 = (CFStringRef) Troll_PKEWSSIFFWTL_01CA016F(Troll_infoplist, Troll_str5); \
    if (CFStringCompare(Troll_str4, Troll_str6, 0) != kCFCompareEqualTo) { \
        Troll_CFRelease_01CA00EF(Troll_str4); \
        Troll_CFRelease_01CA00EF(Troll_str5); \
        __Troll_RECEIPT_LOG("Troll - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str4, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str6, CFStringGetSystemEncoding())); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA00EF(Troll_str5); \
        Troll_CFRelease_01CA00EF(Troll_str6); \
        Troll_CFRelease_01CA00EF(Troll_str4); \
        goto Troll_CheckBundleEntitlements058_Troll_bail; \
    } \
    Troll_CFRelease_01CA00EF(Troll_str4); \
    Troll_CFRelease_01CA00EF(Troll_str5); \
    Troll_entry = (CFDataRef) Troll_PKEWSSIFFWTL_01CA016F(Troll_information, *Troll_kSecCodeInfoEntitlements_01930097); \
    if (RECEIGEN_CHECK_ENTITLEMENTS && Troll_entry == NULL) { \
        __Troll_RECEIPT_LOG("Troll - Bundle has no entitlements"); \
        Troll_ctx->main_bundle = NULL; \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA00EF(Troll_static_code); \
        Troll_CFRelease_01CA00EF(Troll_error); \
        Troll_CFRelease_01CA00EF(Troll_url1); \
        Troll_CFRelease_01CA00EF(Troll_static_code); \
        goto Troll_CheckBundleEntitlements058_Troll_bail; \
    } \
    Troll_BQKNQZJKSLGF += 83; Troll_BQKNQZJKSLGF /= 7;  \
    Troll_WMWXBUDZCZZS -= 21; Troll_WMWXBUDZCZZS *= 7; Troll_WMWXBUDZCZZS += 2;  \
    Troll_YOVDGFJHGPOO -= 197; Troll_YOVDGFJHGPOO *= 3; Troll_YOVDGFJHGPOO += 2;  \
    Troll_PKEWSSIFFWTL += 357; Troll_PKEWSSIFFWTL /= 4;  \
    Troll_NZDWMPAPGHWA += 367; Troll_NZDWMPAPGHWA /= 2;  \
    Troll_XIBODEUXAVIA -= 217; Troll_XIBODEUXAVIA *= 3; Troll_XIBODEUXAVIA += 2;  \
    Troll_GFLVZNVEWUES += 485; Troll_GFLVZNVEWUES /= 4;  \
    Troll_JMEDIBVWLSXE += 37; Troll_JMEDIBVWLSXE /= 3;  \
Troll_CheckBundleEntitlements058_Troll_bail: \
    if (Troll_information) Troll_CFRelease_01CA00EF(Troll_information); \
    if (Troll_error) Troll_CFRelease_01CA00EF(Troll_error); \
    if (Troll_static_code) Troll_CFRelease_01CA00EF(Troll_static_code); \
    if (Troll_url1) Troll_CFRelease_01CA00EF(Troll_url1); \
}
#endif


// CodeBlock GetReceiptInformation
#ifdef DEBUG
inline static void Troll_GetReceiptInformation063(Troll_CheckingContext *Troll_ctx) {
    Troll_ParsingContext Troll_receipt_context;
    Troll_ParsingContext *Troll_current_context;
    CFNumberRef Troll_key;
    Troll_ReceiptAttributeType Troll_key1, Troll_key2;
    CFTypeRef Troll_value1, Troll_value2;
    int Troll_type;
    int Troll_xclass;
    long Troll_length;
    CFDateFormatterRef Troll_formatter = NULL;
    CFTimeZoneRef Troll_tz = NULL;
    BIO *Troll_bio_p7;
    PKCS7 *Troll_pkcs7;
    ASN1_OCTET_STRING *Troll_contentTroll_content;
    ASN1_INTEGER *Troll_value;
    const unsigned char *Troll_seq_end;
    long Troll_attr_type;
    long Troll_attr_version;
    int Troll_str_type;
    long Troll_str_length;
    const unsigned char *Troll_str_ptr;
    Troll_ParsingContext Troll_inapp_context;
    long Troll_number;
    int Troll_num_type;
    long Troll_num_length;
    const unsigned char *Troll_num_ptr;
    __Troll_RECEIPT_LOG("Troll - Parsing receipt");
    // Put the receipt data into a memory buffer
    Troll_bio_p7 = Troll_BIO_new_021E0133(Troll_BIO_s_mem_021E00B2());
    Troll_BIO_write_008A01FA(Troll_bio_p7, (void *) Troll_CFDataGetBytePtr_01CA01A7((CFDataRef) Troll_ctx->receipt_data), (int) Troll_CFDataGetLength_00F60137((CFDataRef) Troll_ctx->receipt_data));
    Troll_pkcs7 = Troll_d2i_PKCS7_bio_008A0142(Troll_bio_p7, NULL);
    if (!Troll_pkcs7) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
        // Dead code
        Troll_ctx->receipt_data = NULL;
        goto Troll_GetReceiptInformation063_Troll_bail;
    }
    if (!PKCS7_type_is_signed(Troll_pkcs7)) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
        // Dead code
        Troll_ctx->receipt_data = NULL;
        goto Troll_GetReceiptInformation063_Troll_bail;
    }
    if (!PKCS7_type_is_data(Troll_pkcs7->d.sign->contents)) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
        // Dead code
        Troll_ctx->receipt_data = NULL;
        goto Troll_GetReceiptInformation063_Troll_bail;
    }
    // Create a formatter to parse ISO-3339 dates
    Troll_formatter = Troll_GFLVZNVEWUES_00F600FB(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    Troll_value1 = Troll_ObfuscationFunction00ACF((Troll_Strings[437]), 103, 33);
    Troll_XIBODEUXAVIA_021101F4(Troll_formatter, (CFStringRef) Troll_value1);
    Troll_CFRelease_00F60026(Troll_value1);
    Troll_tz = Troll_YOVDGFJHGPOO_00F6013D(NULL, 0.0);
    Troll_CFDateFormatterSetProperty_01CA01AB(Troll_formatter, *Troll_kCFDateFormatterTimeZone_00F60225, Troll_tz);
    Troll_CFRelease_00F60026(Troll_tz);
    // Initial context
    Troll_contentTroll_content = Troll_pkcs7->d.sign->contents->d.data;
    Troll_receipt_context.ptr = Troll_contentTroll_content->data;
    Troll_receipt_context.end = Troll_receipt_context.ptr + Troll_contentTroll_content->length;
    Troll_receipt_context.parent = NULL;
    Troll_receipt_context.dictionary = NULL;
    Troll_current_context = &Troll_receipt_context;
    while(Troll_current_context->ptr < Troll_current_context->end) {
        if (!Troll_current_context->dictionary) {
            // Create the target dictionary
            Troll_current_context->dictionary = Troll_JMEDIBVWLSXE_01CA001D(kCFAllocatorDefault, (CFIndex) 639, Troll_kCFTypeDictionaryKeyCallBacks_02110094, Troll_kCFTypeDictionaryValueCallBacks_01CA025C);
            // Decode payload from ASN.1
            Troll_ASN1_get_object_021E0050(&Troll_current_context->ptr, &Troll_length, &Troll_type, &Troll_xclass, Troll_current_context->end - Troll_current_context->ptr);
            if (Troll_type != V_ASN1_SET) {
                __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
                (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
                Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
                goto Troll_GetReceiptInformation063_Troll_bail;
            }
        }
        // Iterate over attributes
        while(Troll_current_context->ptr < Troll_current_context->end) {
            // Parse attribute sequence
            Troll_ASN1_get_object_021E0050(&Troll_current_context->ptr, &Troll_length, &Troll_type, &Troll_xclass, Troll_current_context->end - Troll_current_context->ptr);
            if (Troll_type != V_ASN1_SEQUENCE) {
                __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
                (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
                Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
                goto Troll_GetReceiptInformation063_Troll_bail;
            }
            Troll_seq_end = Troll_current_context->ptr + Troll_length;
            Troll_attr_type = 0;
            Troll_attr_version = 0;
            // Parse the attribute type
            Troll_ASN1_get_object_021E0050(&Troll_current_context->ptr, &Troll_length, &Troll_type, &Troll_xclass, Troll_current_context->end - Troll_current_context->ptr);
            if (Troll_type != V_ASN1_INTEGER) {
                __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
                (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
                Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
                goto Troll_GetReceiptInformation063_Troll_bail;
            }
            Troll_value = Troll_c2i_ASN1_INTEGER_021E005D(NULL, &Troll_current_context->ptr, Troll_length);
            Troll_attr_type = Troll_ASN1_INTEGER_get_008A01CE(Troll_value);
            Troll_ASN1_INTEGER_free_004B0068(Troll_value);
            // Parse the attribute version
            Troll_ASN1_get_object_021E0050(&Troll_current_context->ptr, &Troll_length, &Troll_type, &Troll_xclass, Troll_current_context->end - Troll_current_context->ptr);
            if (Troll_type != V_ASN1_INTEGER) {
                __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
                (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
                Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
                goto Troll_GetReceiptInformation063_Troll_bail;
            }
            Troll_value = Troll_c2i_ASN1_INTEGER_021E005D(NULL, &Troll_current_context->ptr, Troll_length);
            Troll_attr_version = Troll_ASN1_INTEGER_get_008A01CE(Troll_value);
            Troll_ASN1_INTEGER_free_004B0068(Troll_value);
            // Check the attribute value
            Troll_ASN1_get_object_021E0050(&Troll_current_context->ptr, &Troll_length, &Troll_type, &Troll_xclass, Troll_current_context->end - Troll_current_context->ptr);
            if (Troll_type != V_ASN1_OCTET_STRING) {
                __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
                (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
                Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
                goto Troll_GetReceiptInformation063_Troll_bail;
            }
            Troll_key1 = (Troll_ReceiptAttributeType) (Troll_StoreNone + (Troll_attr_type << 1));
            Troll_key2 = (Troll_ReceiptAttributeType) (Troll_StoreNone + (Troll_attr_type << 1) + 1);
            Troll_value1 = NULL;
            Troll_value2 = NULL;
            __Troll_RECEIPT_LOG("Troll - Parsing receipt - Found attribute %s%ld", Troll_current_context->parent ? "--- " : "- ", Troll_attr_type);
            switch (Troll_attr_type) {
                    // Attributes encoded as ASN.1 UTF8STRING
                case Troll_ReceiptAttributeTypeBundleId:
                case Troll_ReceiptAttributeTypeBundleVersion:
                case Troll_ReceiptAttributeTypeOriginalApplicationVersion:
                case Troll_InAppAttributeTypeProductIdentifer:
                case Troll_InAppAttributeTypeTransactionIdentifer:
                case Troll_InAppAttributeTypeOriginalTransactionIdentifer:
                {
                    Troll_str_type = 0;
                    Troll_str_length = 0;
                    Troll_str_ptr = Troll_current_context->ptr;
                    Troll_ASN1_get_object_021E0050(&Troll_str_ptr, &Troll_str_length, &Troll_str_type, &Troll_xclass, Troll_seq_end - Troll_str_ptr);
                    if (Troll_str_type != V_ASN1_UTF8STRING) {
                        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
                        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
                        Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
                        goto Troll_GetReceiptInformation063_Troll_bail;
                    }
                    Troll_value1 = ((__Troll_CFStringCreateWithBytes) Troll_Pointers[152])(NULL, (const UInt8 *) Troll_str_ptr, (CFIndex) Troll_str_length, kCFStringEncodingUTF8, false);
                    Troll_value2 = Troll_CFDataCreate_00F6025F(NULL, (const UInt8 *) Troll_current_context->ptr, (CFIndex) Troll_length);
                    __Troll_RECEIPT_LOG("Troll - Parsing receipt -       attribute %s%ld => %s", Troll_current_context->parent ? "--- " : "- ", Troll_attr_type, CFStringGetCStringPtr((CFStringRef) Troll_value1, CFStringGetSystemEncoding()));
                    break;
                }
                    // Attributes encoded as ASN.1 IA5STRING
                case Troll_ReceiptAttributeTypeExpirationDate:
                case Troll_InAppAttributeTypeCancellationDate:
                case Troll_InAppAttributeTypeOriginalPurchaseDate:
                case Troll_InAppAttributeTypePurchaseDate:
                case Troll_InAppAttributeTypeSubscriptionExpirationDate:
                {
                    Troll_str_type = 0;
                    Troll_str_length = 0;
                    Troll_str_ptr = Troll_current_context->ptr;
                    Troll_ASN1_get_object_021E0050(&Troll_str_ptr, &Troll_str_length, &Troll_str_type, &Troll_xclass, Troll_seq_end - Troll_str_ptr);
                    if (Troll_str_type != V_ASN1_IA5STRING) {
                        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
                        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
                        Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
                        goto Troll_GetReceiptInformation063_Troll_bail;
                    }
                    Troll_value2 = ((__Troll_CFStringCreateWithBytes) Troll_Pointers[152])(NULL, (const UInt8 *) Troll_str_ptr, (CFIndex) Troll_str_length, kCFStringEncodingASCII, false);
                    Troll_value1 = Troll_CFDateFormatterCreateDateFromString_00F60248(NULL, Troll_formatter, (CFStringRef) Troll_value2, NULL);
                    __Troll_RECEIPT_LOG("Troll - Parsing receipt -       attribute %s%ld => %s", Troll_current_context->parent ? "--- " : "- ", Troll_attr_type, CFStringGetCStringPtr((CFStringRef) Troll_value2, CFStringGetSystemEncoding()));
                    break;
                }
                    // Attributes encoded as ASN.1 INTEGER
                case Troll_InAppAttributeTypeQuantity:
                case Troll_InAppAttributeTypeWebOrderLineItemId:
                {
                    Troll_num_type = 0;
                    Troll_num_length = 0;
                    Troll_num_ptr = Troll_current_context->ptr;
                    Troll_ASN1_get_object_021E0050(&Troll_num_ptr, &Troll_num_length, &Troll_num_type, &Troll_xclass, Troll_seq_end - Troll_num_ptr);
                    if (Troll_num_type != V_ASN1_INTEGER) {
                        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
                        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
                        Troll_longjmp_025B00F7(Troll_JumpBuf, 1);
                        goto Troll_GetReceiptInformation063_Troll_bail;
                    }
                    Troll_value = Troll_c2i_ASN1_INTEGER_021E005D(NULL, &Troll_num_ptr, Troll_num_length);
                    Troll_number = Troll_ASN1_INTEGER_get_008A01CE(Troll_value);
                    Troll_ASN1_INTEGER_free_004B0068(Troll_value);
                    Troll_value1 = Troll_CFNumberCreate_00F6003D(NULL, kCFNumberLongType, &Troll_number);
                    __Troll_RECEIPT_LOG("Troll - Parsing receipt -       attribute %s%ld => %ld", Troll_current_context->parent ? "--- " : "- ", Troll_attr_type, Troll_number);
                    break;
                }
                    // Attributes encoded as ASN.1 OCTETSTRING
                case Troll_ReceiptAttributeTypeOpaqueValue:
                case Troll_ReceiptAttributeTypeHash:
                {
                    Troll_value1 = Troll_CFDataCreate_00F6025F(NULL, (const UInt8 *) Troll_current_context->ptr, (CFIndex) Troll_length);
                    __Troll_RECEIPT_LOG("Troll - Parsing receipt -       attribute %s%ld => [%lu bytes]", Troll_current_context->parent ? "--- " : "- ", Troll_attr_type, Troll_CFDataGetLength_00F60137((CFDataRef) Troll_value1));
                    break;
                }
                    // Attributes encoded as ASN.1 SET
                case Troll_ReceiptAttributeTypeInAppPurchase:
                {
                    // Push a child context to parse InApp purchase
                    Troll_inapp_context.ptr = Troll_current_context->ptr;
                    Troll_inapp_context.end = Troll_inapp_context.ptr + Troll_length;
                    Troll_inapp_context.dictionary = NULL;
                    Troll_inapp_context.parent = Troll_current_context;
                    Troll_current_context = &Troll_inapp_context;
                    goto Troll_GetReceiptInformation063_Troll_key;
                }
                default:
                    break;
            }
            if (Troll_value1) {
                Troll_key = Troll_CFNumberCreate_00F6003D(NULL, kCFNumberIntType, &Troll_key1);
                Troll_NZDWMPAPGHWA_01CA018E((CFMutableDictionaryRef) Troll_current_context->dictionary, Troll_key, Troll_value1);
                Troll_CFRelease_00F60026(Troll_key);
                Troll_CFRelease_00F60026(Troll_value1);
            }
            if (Troll_value2) {
                Troll_key = Troll_CFNumberCreate_00F6003D(NULL, kCFNumberIntType, &Troll_key2);
                Troll_NZDWMPAPGHWA_01CA018E((CFMutableDictionaryRef) Troll_current_context->dictionary, Troll_key, Troll_value2);
                Troll_CFRelease_00F60026(Troll_key);
                Troll_CFRelease_00F60026(Troll_value2);
            }
            // Move past the attribute
            Troll_current_context->ptr += Troll_length;
        }
Troll_GetReceiptInformation063_Troll_key:
        // If the current context is a new one, continue parsing
        if (!Troll_current_context->dictionary) {
            continue;
        }
        // If the current context has a parent, pop it.
        if (Troll_current_context->parent) {
            __Troll_RECEIPT_LOG("Troll - Parsing receipt - Add an InApp purchase");
            Troll_key1 = Troll_StoreReceiptAttributeTypeInAppPurchase;
            Troll_key = Troll_CFNumberCreate_00F6003D(NULL, kCFNumberIntType, &Troll_key1);
            Troll_value1 = Troll_CFDictionaryGetValue_02110018((CFDictionaryRef) Troll_current_context->parent->dictionary, Troll_key);
            if (!Troll_value1) {
                Troll_value1 = Troll_PKEWSSIFFWTL_00F600B5(kCFAllocatorDefault, 0, Troll_kCFTypeArrayCallBacks_02110188);
                Troll_CFDictionarySetValue_01CA0048((CFMutableDictionaryRef) Troll_current_context->parent->dictionary, Troll_key, Troll_value1);
                Troll_CFRelease_00F60026(Troll_value1);
            }
            Troll_WMWXBUDZCZZS_00F601BB((CFMutableArrayRef) Troll_value1, Troll_current_context->dictionary);
            Troll_CFRelease_00F60026(Troll_current_context->dictionary);
            Troll_CFRelease_00F60026(Troll_key);
            // Switch to parent context
            Troll_current_context = Troll_current_context->parent;
            // Move past the child context
            Troll_current_context->ptr = Troll_inapp_context.end;
        }
    }
    if (Troll_ctx->receipt_dict) Troll_CFRelease_00F60026(Troll_ctx->receipt_dict);
    Troll_ctx->receipt_dict = Troll_receipt_context.dictionary;
    // Global variables computation
    // From 398 to 311
    Troll_NZDWMPAPGHWA += 224; Troll_NZDWMPAPGHWA /= 2; 
    // Set to 105
    Troll_GFLVZNVEWUES = 105;
Troll_GetReceiptInformation063_Troll_bail:
    if (Troll_pkcs7) Troll_PKCS7_free_008A01DA(Troll_pkcs7);
    if (Troll_bio_p7) Troll_BIO_free_004B0192(Troll_bio_p7);
    if (Troll_formatter) Troll_CFRelease_00F60026(Troll_formatter);
}
#else
#define Troll_GetReceiptInformation063(Troll_ctx) { \
    Troll_ParsingContext Troll_receipt_context; \
    Troll_ParsingContext *Troll_current_context; \
    CFNumberRef Troll_key; \
    Troll_ReceiptAttributeType Troll_key1, Troll_key2; \
    CFTypeRef Troll_value1, Troll_value2; \
    int Troll_type; \
    int Troll_xclass; \
    long Troll_length; \
    CFDateFormatterRef Troll_formatter = NULL; \
    CFTimeZoneRef Troll_tz = NULL; \
    BIO *Troll_bio_p7; \
    PKCS7 *Troll_pkcs7; \
    ASN1_OCTET_STRING *Troll_contentTroll_content; \
    ASN1_INTEGER *Troll_value; \
    const unsigned char *Troll_seq_end; \
    long Troll_attr_type; \
    long Troll_attr_version; \
    int Troll_str_type; \
    long Troll_str_length; \
    const unsigned char *Troll_str_ptr; \
    Troll_ParsingContext Troll_inapp_context; \
    long Troll_number; \
    int Troll_num_type; \
    long Troll_num_length; \
    const unsigned char *Troll_num_ptr; \
    __Troll_RECEIPT_LOG("Troll - Parsing receipt"); \
    Troll_bio_p7 = Troll_BIO_new_021E0133(Troll_BIO_s_mem_021E00B2()); \
    Troll_BIO_write_008A01FA(Troll_bio_p7, (void *) Troll_CFDataGetBytePtr_01CA01A7((CFDataRef) Troll_ctx->receipt_data), (int) Troll_CFDataGetLength_00F60137((CFDataRef) Troll_ctx->receipt_data)); \
    Troll_pkcs7 = Troll_d2i_PKCS7_bio_008A0142(Troll_bio_p7, NULL); \
    if (!Troll_pkcs7) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
        Troll_ctx->receipt_data = NULL; \
        goto Troll_GetReceiptInformation063_Troll_bail; \
    } \
    if (!PKCS7_type_is_signed(Troll_pkcs7)) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
        Troll_ctx->receipt_data = NULL; \
        goto Troll_GetReceiptInformation063_Troll_bail; \
    } \
    if (!PKCS7_type_is_data(Troll_pkcs7->d.sign->contents)) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
        Troll_ctx->receipt_data = NULL; \
        goto Troll_GetReceiptInformation063_Troll_bail; \
    } \
    Troll_formatter = Troll_GFLVZNVEWUES_00F600FB(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle); \
    Troll_value1 = Troll_ObfuscationFunction00ACF((Troll_Strings[437]), 103, 33); \
    Troll_XIBODEUXAVIA_021101F4(Troll_formatter, (CFStringRef) Troll_value1); \
    Troll_CFRelease_00F60026(Troll_value1); \
    Troll_tz = Troll_YOVDGFJHGPOO_00F6013D(NULL, 0.0); \
    Troll_CFDateFormatterSetProperty_01CA01AB(Troll_formatter, *Troll_kCFDateFormatterTimeZone_00F60225, Troll_tz); \
    Troll_CFRelease_00F60026(Troll_tz); \
    Troll_contentTroll_content = Troll_pkcs7->d.sign->contents->d.data; \
    Troll_receipt_context.ptr = Troll_contentTroll_content->data; \
    Troll_receipt_context.end = Troll_receipt_context.ptr + Troll_contentTroll_content->length; \
    Troll_receipt_context.parent = NULL; \
    Troll_receipt_context.dictionary = NULL; \
    Troll_current_context = &Troll_receipt_context; \
    while(Troll_current_context->ptr < Troll_current_context->end) { \
        if (!Troll_current_context->dictionary) { \
            Troll_current_context->dictionary = Troll_JMEDIBVWLSXE_01CA001D(kCFAllocatorDefault, (CFIndex) 639, Troll_kCFTypeDictionaryKeyCallBacks_02110094, Troll_kCFTypeDictionaryValueCallBacks_01CA025C); \
            Troll_ASN1_get_object_021E0050(&Troll_current_context->ptr, &Troll_length, &Troll_type, &Troll_xclass, Troll_current_context->end - Troll_current_context->ptr); \
            if (Troll_type != V_ASN1_SET) { \
                __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
                (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
                Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
                goto Troll_GetReceiptInformation063_Troll_bail; \
            } \
        } \
        while(Troll_current_context->ptr < Troll_current_context->end) { \
            Troll_ASN1_get_object_021E0050(&Troll_current_context->ptr, &Troll_length, &Troll_type, &Troll_xclass, Troll_current_context->end - Troll_current_context->ptr); \
            if (Troll_type != V_ASN1_SEQUENCE) { \
                __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
                (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
                Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
                goto Troll_GetReceiptInformation063_Troll_bail; \
            } \
            Troll_seq_end = Troll_current_context->ptr + Troll_length; \
            Troll_attr_type = 0; \
            Troll_attr_version = 0; \
            Troll_ASN1_get_object_021E0050(&Troll_current_context->ptr, &Troll_length, &Troll_type, &Troll_xclass, Troll_current_context->end - Troll_current_context->ptr); \
            if (Troll_type != V_ASN1_INTEGER) { \
                __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
                (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
                Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
                goto Troll_GetReceiptInformation063_Troll_bail; \
            } \
            Troll_value = Troll_c2i_ASN1_INTEGER_021E005D(NULL, &Troll_current_context->ptr, Troll_length); \
            Troll_attr_type = Troll_ASN1_INTEGER_get_008A01CE(Troll_value); \
            Troll_ASN1_INTEGER_free_004B0068(Troll_value); \
            Troll_ASN1_get_object_021E0050(&Troll_current_context->ptr, &Troll_length, &Troll_type, &Troll_xclass, Troll_current_context->end - Troll_current_context->ptr); \
            if (Troll_type != V_ASN1_INTEGER) { \
                __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
                (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
                Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
                goto Troll_GetReceiptInformation063_Troll_bail; \
            } \
            Troll_value = Troll_c2i_ASN1_INTEGER_021E005D(NULL, &Troll_current_context->ptr, Troll_length); \
            Troll_attr_version = Troll_ASN1_INTEGER_get_008A01CE(Troll_value); \
            Troll_ASN1_INTEGER_free_004B0068(Troll_value); \
            Troll_ASN1_get_object_021E0050(&Troll_current_context->ptr, &Troll_length, &Troll_type, &Troll_xclass, Troll_current_context->end - Troll_current_context->ptr); \
            if (Troll_type != V_ASN1_OCTET_STRING) { \
                __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
                (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
                Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
                goto Troll_GetReceiptInformation063_Troll_bail; \
            } \
            Troll_key1 = (Troll_ReceiptAttributeType) (Troll_StoreNone + (Troll_attr_type << 1)); \
            Troll_key2 = (Troll_ReceiptAttributeType) (Troll_StoreNone + (Troll_attr_type << 1) + 1); \
            Troll_value1 = NULL; \
            Troll_value2 = NULL; \
            __Troll_RECEIPT_LOG("Troll - Parsing receipt - Found attribute %s%ld", Troll_current_context->parent ? "--- " : "- ", Troll_attr_type); \
            switch (Troll_attr_type) { \
                case Troll_ReceiptAttributeTypeBundleId: \
                case Troll_ReceiptAttributeTypeBundleVersion: \
                case Troll_ReceiptAttributeTypeOriginalApplicationVersion: \
                case Troll_InAppAttributeTypeProductIdentifer: \
                case Troll_InAppAttributeTypeTransactionIdentifer: \
                case Troll_InAppAttributeTypeOriginalTransactionIdentifer: \
                { \
                    Troll_str_type = 0; \
                    Troll_str_length = 0; \
                    Troll_str_ptr = Troll_current_context->ptr; \
                    Troll_ASN1_get_object_021E0050(&Troll_str_ptr, &Troll_str_length, &Troll_str_type, &Troll_xclass, Troll_seq_end - Troll_str_ptr); \
                    if (Troll_str_type != V_ASN1_UTF8STRING) { \
                        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
                        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
                        Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
                        goto Troll_GetReceiptInformation063_Troll_bail; \
                    } \
                    Troll_value1 = ((__Troll_CFStringCreateWithBytes) Troll_Pointers[152])(NULL, (const UInt8 *) Troll_str_ptr, (CFIndex) Troll_str_length, kCFStringEncodingUTF8, false); \
                    Troll_value2 = Troll_CFDataCreate_00F6025F(NULL, (const UInt8 *) Troll_current_context->ptr, (CFIndex) Troll_length); \
                    __Troll_RECEIPT_LOG("Troll - Parsing receipt -       attribute %s%ld => %s", Troll_current_context->parent ? "--- " : "- ", Troll_attr_type, CFStringGetCStringPtr((CFStringRef) Troll_value1, CFStringGetSystemEncoding())); \
                    break; \
                } \
                case Troll_ReceiptAttributeTypeExpirationDate: \
                case Troll_InAppAttributeTypeCancellationDate: \
                case Troll_InAppAttributeTypeOriginalPurchaseDate: \
                case Troll_InAppAttributeTypePurchaseDate: \
                case Troll_InAppAttributeTypeSubscriptionExpirationDate: \
                { \
                    Troll_str_type = 0; \
                    Troll_str_length = 0; \
                    Troll_str_ptr = Troll_current_context->ptr; \
                    Troll_ASN1_get_object_021E0050(&Troll_str_ptr, &Troll_str_length, &Troll_str_type, &Troll_xclass, Troll_seq_end - Troll_str_ptr); \
                    if (Troll_str_type != V_ASN1_IA5STRING) { \
                        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
                        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
                        Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
                        goto Troll_GetReceiptInformation063_Troll_bail; \
                    } \
                    Troll_value2 = ((__Troll_CFStringCreateWithBytes) Troll_Pointers[152])(NULL, (const UInt8 *) Troll_str_ptr, (CFIndex) Troll_str_length, kCFStringEncodingASCII, false); \
                    Troll_value1 = Troll_CFDateFormatterCreateDateFromString_00F60248(NULL, Troll_formatter, (CFStringRef) Troll_value2, NULL); \
                    __Troll_RECEIPT_LOG("Troll - Parsing receipt -       attribute %s%ld => %s", Troll_current_context->parent ? "--- " : "- ", Troll_attr_type, CFStringGetCStringPtr((CFStringRef) Troll_value2, CFStringGetSystemEncoding())); \
                    break; \
                } \
                case Troll_InAppAttributeTypeQuantity: \
                case Troll_InAppAttributeTypeWebOrderLineItemId: \
                { \
                    Troll_num_type = 0; \
                    Troll_num_length = 0; \
                    Troll_num_ptr = Troll_current_context->ptr; \
                    Troll_ASN1_get_object_021E0050(&Troll_num_ptr, &Troll_num_length, &Troll_num_type, &Troll_xclass, Troll_seq_end - Troll_num_ptr); \
                    if (Troll_num_type != V_ASN1_INTEGER) { \
                        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
                        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
                        Troll_longjmp_025B00F7(Troll_JumpBuf, 1); \
                        goto Troll_GetReceiptInformation063_Troll_bail; \
                    } \
                    Troll_value = Troll_c2i_ASN1_INTEGER_021E005D(NULL, &Troll_num_ptr, Troll_num_length); \
                    Troll_number = Troll_ASN1_INTEGER_get_008A01CE(Troll_value); \
                    Troll_ASN1_INTEGER_free_004B0068(Troll_value); \
                    Troll_value1 = Troll_CFNumberCreate_00F6003D(NULL, kCFNumberLongType, &Troll_number); \
                    __Troll_RECEIPT_LOG("Troll - Parsing receipt -       attribute %s%ld => %ld", Troll_current_context->parent ? "--- " : "- ", Troll_attr_type, Troll_number); \
                    break; \
                } \
                case Troll_ReceiptAttributeTypeOpaqueValue: \
                case Troll_ReceiptAttributeTypeHash: \
                { \
                    Troll_value1 = Troll_CFDataCreate_00F6025F(NULL, (const UInt8 *) Troll_current_context->ptr, (CFIndex) Troll_length); \
                    __Troll_RECEIPT_LOG("Troll - Parsing receipt -       attribute %s%ld => [%lu bytes]", Troll_current_context->parent ? "--- " : "- ", Troll_attr_type, Troll_CFDataGetLength_00F60137((CFDataRef) Troll_value1)); \
                    break; \
                } \
                case Troll_ReceiptAttributeTypeInAppPurchase: \
                { \
                    Troll_inapp_context.ptr = Troll_current_context->ptr; \
                    Troll_inapp_context.end = Troll_inapp_context.ptr + Troll_length; \
                    Troll_inapp_context.dictionary = NULL; \
                    Troll_inapp_context.parent = Troll_current_context; \
                    Troll_current_context = &Troll_inapp_context; \
                    goto Troll_GetReceiptInformation063_Troll_key; \
                } \
                default: \
                    break; \
            } \
            if (Troll_value1) { \
                Troll_key = Troll_CFNumberCreate_00F6003D(NULL, kCFNumberIntType, &Troll_key1); \
                Troll_NZDWMPAPGHWA_01CA018E((CFMutableDictionaryRef) Troll_current_context->dictionary, Troll_key, Troll_value1); \
                Troll_CFRelease_00F60026(Troll_key); \
                Troll_CFRelease_00F60026(Troll_value1); \
            } \
            if (Troll_value2) { \
                Troll_key = Troll_CFNumberCreate_00F6003D(NULL, kCFNumberIntType, &Troll_key2); \
                Troll_NZDWMPAPGHWA_01CA018E((CFMutableDictionaryRef) Troll_current_context->dictionary, Troll_key, Troll_value2); \
                Troll_CFRelease_00F60026(Troll_key); \
                Troll_CFRelease_00F60026(Troll_value2); \
            } \
            Troll_current_context->ptr += Troll_length; \
        } \
Troll_GetReceiptInformation063_Troll_key: \
        if (!Troll_current_context->dictionary) { \
            continue; \
        } \
        if (Troll_current_context->parent) { \
            __Troll_RECEIPT_LOG("Troll - Parsing receipt - Add an InApp purchase"); \
            Troll_key1 = Troll_StoreReceiptAttributeTypeInAppPurchase; \
            Troll_key = Troll_CFNumberCreate_00F6003D(NULL, kCFNumberIntType, &Troll_key1); \
            Troll_value1 = Troll_CFDictionaryGetValue_02110018((CFDictionaryRef) Troll_current_context->parent->dictionary, Troll_key); \
            if (!Troll_value1) { \
                Troll_value1 = Troll_PKEWSSIFFWTL_00F600B5(kCFAllocatorDefault, 0, Troll_kCFTypeArrayCallBacks_02110188); \
                Troll_CFDictionarySetValue_01CA0048((CFMutableDictionaryRef) Troll_current_context->parent->dictionary, Troll_key, Troll_value1); \
                Troll_CFRelease_00F60026(Troll_value1); \
            } \
            Troll_WMWXBUDZCZZS_00F601BB((CFMutableArrayRef) Troll_value1, Troll_current_context->dictionary); \
            Troll_CFRelease_00F60026(Troll_current_context->dictionary); \
            Troll_CFRelease_00F60026(Troll_key); \
            Troll_current_context = Troll_current_context->parent; \
            Troll_current_context->ptr = Troll_inapp_context.end; \
        } \
    } \
    if (Troll_ctx->receipt_dict) Troll_CFRelease_00F60026(Troll_ctx->receipt_dict); \
    Troll_ctx->receipt_dict = Troll_receipt_context.dictionary; \
    Troll_NZDWMPAPGHWA += 224; Troll_NZDWMPAPGHWA /= 2;  \
    Troll_GFLVZNVEWUES = 105; \
Troll_GetReceiptInformation063_Troll_bail: \
    if (Troll_pkcs7) Troll_PKCS7_free_008A01DA(Troll_pkcs7); \
    if (Troll_bio_p7) Troll_BIO_free_004B0192(Troll_bio_p7); \
    if (Troll_formatter) Troll_CFRelease_00F60026(Troll_formatter); \
}
#endif


// CodeBlock CheckReceiptSignature
#ifdef DEBUG
inline static void Troll_CheckReceiptSignature06F(Troll_CheckingContext *Troll_ctx) {
    BIO *Troll_bio_p7 = NULL;
    PKCS7 *Troll_pkcs7 = NULL;
    STACK_OF(X509) *Troll_certificates = NULL;
    X509 *Troll_certificate = NULL;
    int Troll_count, Troll_index1;
    unsigned int Troll_index2;
    ASN1_OBJECT *Troll_oid = NULL;
    char *Troll_str1;
    char *Troll_str2;
    char *Troll_str3;
    char *Troll_str4;
    char *Troll_str5;
    int Troll_verify, Troll_status;
    BIO *Troll_bio_apple = NULL;
    X509 *Troll_apple = NULL;
    X509_STORE *Troll_store = NULL;
    __Troll_RECEIPT_LOG("Troll - Checking receipt signature");
    // Put the receipt data into a memory buffer
    Troll_bio_p7 = Troll_BIO_new_021E00D7(Troll_BIO_s_mem_021E00B2());
    Troll_BIO_write_008A003F(Troll_bio_p7, (void *) Troll_GFLVZNVEWUES_02110069((CFDataRef) Troll_ctx->receipt_data), (int) Troll_NZDWMPAPGHWA_01CA0137((CFDataRef) Troll_ctx->receipt_data));
    Troll_pkcs7 = Troll_d2i_PKCS7_bio_008A0142(Troll_bio_p7, NULL);
    if (!Troll_pkcs7) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B010B(Troll_JumpBuf, 1);
        Troll_ctx->receipt_dict = NULL;
        goto Troll_CheckReceiptSignature06F_Troll_bail;
    }
    if (!PKCS7_type_is_signed(Troll_pkcs7)) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B010B(Troll_JumpBuf, 1);
        Troll_ctx->receipt_dict = NULL;
        goto Troll_CheckReceiptSignature06F_Troll_bail;
    }
    if (!PKCS7_type_is_data(Troll_pkcs7->d.sign->contents)) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B010B(Troll_JumpBuf, 1);
        Troll_ctx->receipt_dict = NULL;
        goto Troll_CheckReceiptSignature06F_Troll_bail;
    }
    Troll_OpenSSL_add_all_digests_004B00EC();
    // If the Apple Root CA certificate has been loaded, then check the receipt against it.
    if (Troll_ctx->ca_data) {
        Troll_bio_apple = Troll_BIO_new_021E00D7(Troll_BIO_s_mem_021E00B2());
        Troll_BIO_write_008A003F(Troll_bio_apple, (void *) Troll_GFLVZNVEWUES_02110069((CFDataRef) Troll_ctx->ca_data), (int) Troll_NZDWMPAPGHWA_01CA0137((CFDataRef) Troll_ctx->ca_data));
        Troll_apple = Troll_d2i_X509_bio_008A0046(Troll_bio_apple, NULL);
        if (!Troll_apple) {
            __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
            Troll_longjmp_025B010B(Troll_JumpBuf, 1);
            goto Troll_CheckReceiptSignature06F_Troll_bail;
        }
        Troll_store = Troll_X509_STORE_new_004B004A();
        Troll_X509_STORE_add_cert_021E0258(Troll_store, Troll_apple);
        // Check that the PKCS7_verify function is not tampered with
        Troll_verify = Troll_PKCS7_verify_004B0266(NULL, NULL, Troll_store, NULL, NULL, 0) * 2962;
        if (Troll_verify == 2962) {
            __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
            Troll_longjmp_025B010B(Troll_JumpBuf, 1);
            goto Troll_CheckReceiptSignature06F_Troll_bail;
        }
        // Check that the PKCS7 content is signed by the Apple Root CA certificate
        Troll_verify = Troll_PKCS7_verify_004B0266(Troll_pkcs7, NULL, Troll_store, NULL, NULL, 0) * 2962;
        if (Troll_verify != 2962) {
            __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
            Troll_longjmp_025B010B(Troll_JumpBuf, 1);
            goto Troll_CheckReceiptSignature06F_Troll_bail;
        }
    }
    // Extract the certificates from the receipt.
    // One of them must be the Apple Root CA certificate with the correct fingerprint.
    Troll_verify = 0;
    Troll_certificates = Troll_pkcs7->d.sign->cert;
    Troll_count = Troll_sk_num_004B00A1((const _STACK *) Troll_certificates);
    for(Troll_index1 = 0; Troll_index1 < Troll_count; Troll_index1++) {
        Troll_certificate = (X509 *) Troll_sk_value_004B00CF((const _STACK *) Troll_certificates, Troll_index1);
        char Troll_common_name[639];
        // Check that the X509_NAME_get_text_by_NID function is not tampered with
        Troll_status = Troll_X509_NAME_get_text_by_NID_004B01D8(NULL, NID_commonName, NULL, 0);
        if (Troll_status > 0) {
            __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
            Troll_longjmp_025B010B(Troll_JumpBuf, 1);
            goto Troll_CheckReceiptSignature06F_Troll_bail;
        }
        // Retrieve the common name
        Troll_status = Troll_X509_NAME_get_text_by_NID_004B01D8(Troll_certificate->cert_info->subject, NID_commonName, Troll_common_name, 639);
        if (Troll_status <= 0) {
            __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
            Troll_longjmp_025B010B(Troll_JumpBuf, 1);
            goto Troll_CheckReceiptSignature06F_Troll_bail;
        }
        volatile unsigned int Troll_digest_length = 6; Troll_digest_length -= 2; Troll_digest_length *= 5; 
        char Troll_str2_[639];
        Troll_ObfuscationFunction00C((Troll_Strings[212]), Troll_str2_, 169, 16);
        Troll_str2 = Troll_str2_;
        const EVP_MD *Troll_digester = Troll_EVP_get_digestbyname_008A014D(Troll_str2);
        unsigned char Troll_digest[EVP_MAX_MD_SIZE];
        unsigned int Troll_len = 0;
        // Check that the X509_digest function is not tampered with
        Troll_status = Troll_X509_digest_008A007B(NULL, NULL, NULL, &Troll_len) * 2962;
        if (Troll_status == 2962 || Troll_len > 0) {
            __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
            Troll_longjmp_025B010B(Troll_JumpBuf, 1);
            goto Troll_CheckReceiptSignature06F_Troll_bail;
        }
        Troll_status = Troll_X509_digest_008A007B(Troll_certificate, Troll_digester, Troll_digest, &Troll_len) * 2962;
        if (Troll_status != 2962 || Troll_len != Troll_digest_length) {
            __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
            Troll_longjmp_025B010B(Troll_JumpBuf, 1);
            goto Troll_CheckReceiptSignature06F_Troll_bail;
        }
        char Troll_fingerprint[639];
        volatile unsigned int Troll_increment = 2; Troll_increment -= 1; Troll_increment *= 3; 
        for(Troll_index2 = 0; Troll_index2 < Troll_digest_length; Troll_index2++) {
            snprintf(&Troll_fingerprint[Troll_index2 * Troll_increment], Troll_increment + 1, "%02X:", Troll_digest[Troll_index2]);
        }
        char Troll_str3_[639];
        Troll_ObfuscationFunction007((Troll_Strings[530]), Troll_str3_, 219, 68);
        Troll_str3 = Troll_str3_;
        // Check the common name and the fingerprint
        char Troll_str1_[639];
        Troll_ObfuscationFunction00A((Troll_Strings[53]), Troll_str1_, 131, 16);
        Troll_str1 = Troll_str1_;
        volatile size_t Troll_num = 9; Troll_num -= 5; Troll_num *= 3; Troll_num += 1; 
        if (((__Troll_strncmp) Troll_Pointers[361])(Troll_common_name, Troll_str1, Troll_num) == 0 && ((__Troll_strncmp) Troll_Pointers[361])(Troll_fingerprint, Troll_str3, Troll_digest_length * Troll_increment - 1) == 0) {
            Troll_verify = 2962;
            break;
        }
    }
    // Check that the last selected certificate is right one.
    if (Troll_certificate == NULL || Troll_verify != 2962) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B010B(Troll_JumpBuf, 1);
        goto Troll_CheckReceiptSignature06F_Troll_bail;
    }
    // Check that the X509_get_ext_by_OBJ function is not tampered with
    char Troll_str4_[639];
    Troll_ObfuscationFunction005((Troll_Strings[264]), Troll_str4_, 153, 34);
    Troll_str4 = Troll_str4_;
    Troll_oid = Troll_OBJ_txt2obj_021E0063(Troll_str4, 0);
    Troll_verify = Troll_X509_get_ext_by_OBJ_008A01D1(Troll_certificate, Troll_oid, 0);
    Troll_ASN1_OBJECT_free_004B01EE(Troll_oid);
    if (Troll_verify >= 0) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B010B(Troll_JumpBuf, 1);
        goto Troll_CheckReceiptSignature06F_Troll_bail;
    }
    // Extract the signer certificate from the receipt
    // The certificate must have the extension OID "1.2.840.113635.100.6.11.1"
    char Troll_str5_[639];
    Troll_ObfuscationFunction009((Troll_Strings[210]), Troll_str5_, 97, 34);
    Troll_str5 = Troll_str5_;
    Troll_certificates = Troll_PKCS7_get0_signers_021E022E(Troll_pkcs7, NULL, 0);
    Troll_count = Troll_sk_num_004B00A1((const _STACK *) Troll_certificates);
    for(Troll_index1 = 0; Troll_index1 < Troll_count; Troll_index1++) {
        Troll_certificate = (X509 *) Troll_sk_value_004B00CF((const _STACK *) Troll_certificates, Troll_index1);
        Troll_oid = Troll_OBJ_txt2obj_021E0063(Troll_str5, 0);
        Troll_verify = Troll_X509_get_ext_by_OBJ_008A01D1(Troll_certificate, Troll_oid, 0);
        Troll_ASN1_OBJECT_free_004B01EE(Troll_oid);
        if (Troll_verify == -1) {
            sk_X509_free (Troll_certificates);
            Troll_certificates = NULL;
            continue;
        } else {
            break;
        }
    }
    if (Troll_certificate == NULL || Troll_verify < 0) {
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B010B(Troll_JumpBuf, 1);
        goto Troll_CheckReceiptSignature06F_Troll_bail;
    }
    // Global variables computation
    // From 500 to 61
    Troll_XIBODEUXAVIA += 110; Troll_XIBODEUXAVIA /= 10; 
    // From 105 to 492
    Troll_GFLVZNVEWUES -= 23; Troll_GFLVZNVEWUES *= 6; 
    // From 29 to 24
    Troll_JMEDIBVWLSXE += 19; Troll_JMEDIBVWLSXE /= 2; 
Troll_CheckReceiptSignature06F_Troll_bail:
    if (Troll_bio_p7) Troll_BIO_free_004B0192(Troll_bio_p7);
    if (Troll_pkcs7) Troll_PKCS7_free_004B018F(Troll_pkcs7);
    if (Troll_certificates) sk_X509_free (Troll_certificates);
    if (Troll_apple) Troll_X509_free_021E0095(Troll_apple);
    if (Troll_bio_apple) Troll_BIO_free_004B0192(Troll_bio_apple);
    if (Troll_store) Troll_X509_STORE_free_008A0265(Troll_store);
}
#else
#define Troll_CheckReceiptSignature06F(Troll_ctx) { \
    BIO *Troll_bio_p7 = NULL; \
    PKCS7 *Troll_pkcs7 = NULL; \
    STACK_OF(X509) *Troll_certificates = NULL; \
    X509 *Troll_certificate = NULL; \
    int Troll_count, Troll_index1; \
    unsigned int Troll_index2; \
    ASN1_OBJECT *Troll_oid = NULL; \
    char *Troll_str1; \
    char *Troll_str2; \
    char *Troll_str3; \
    char *Troll_str4; \
    char *Troll_str5; \
    int Troll_verify, Troll_status; \
    BIO *Troll_bio_apple = NULL; \
    X509 *Troll_apple = NULL; \
    X509_STORE *Troll_store = NULL; \
    __Troll_RECEIPT_LOG("Troll - Checking receipt signature"); \
    Troll_bio_p7 = Troll_BIO_new_021E00D7(Troll_BIO_s_mem_021E00B2()); \
    Troll_BIO_write_008A003F(Troll_bio_p7, (void *) Troll_GFLVZNVEWUES_02110069((CFDataRef) Troll_ctx->receipt_data), (int) Troll_NZDWMPAPGHWA_01CA0137((CFDataRef) Troll_ctx->receipt_data)); \
    Troll_pkcs7 = Troll_d2i_PKCS7_bio_008A0142(Troll_bio_p7, NULL); \
    if (!Troll_pkcs7) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
        Troll_ctx->receipt_dict = NULL; \
        goto Troll_CheckReceiptSignature06F_Troll_bail; \
    } \
    if (!PKCS7_type_is_signed(Troll_pkcs7)) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
        Troll_ctx->receipt_dict = NULL; \
        goto Troll_CheckReceiptSignature06F_Troll_bail; \
    } \
    if (!PKCS7_type_is_data(Troll_pkcs7->d.sign->contents)) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
        Troll_ctx->receipt_dict = NULL; \
        goto Troll_CheckReceiptSignature06F_Troll_bail; \
    } \
    Troll_OpenSSL_add_all_digests_004B00EC(); \
    if (Troll_ctx->ca_data) { \
        Troll_bio_apple = Troll_BIO_new_021E00D7(Troll_BIO_s_mem_021E00B2()); \
        Troll_BIO_write_008A003F(Troll_bio_apple, (void *) Troll_GFLVZNVEWUES_02110069((CFDataRef) Troll_ctx->ca_data), (int) Troll_NZDWMPAPGHWA_01CA0137((CFDataRef) Troll_ctx->ca_data)); \
        Troll_apple = Troll_d2i_X509_bio_008A0046(Troll_bio_apple, NULL); \
        if (!Troll_apple) { \
            __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
            Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
            goto Troll_CheckReceiptSignature06F_Troll_bail; \
        } \
        Troll_store = Troll_X509_STORE_new_004B004A(); \
        Troll_X509_STORE_add_cert_021E0258(Troll_store, Troll_apple); \
        Troll_verify = Troll_PKCS7_verify_004B0266(NULL, NULL, Troll_store, NULL, NULL, 0) * 2962; \
        if (Troll_verify == 2962) { \
            __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
            Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
            goto Troll_CheckReceiptSignature06F_Troll_bail; \
        } \
        Troll_verify = Troll_PKCS7_verify_004B0266(Troll_pkcs7, NULL, Troll_store, NULL, NULL, 0) * 2962; \
        if (Troll_verify != 2962) { \
            __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
            Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
            goto Troll_CheckReceiptSignature06F_Troll_bail; \
        } \
    } \
    Troll_verify = 0; \
    Troll_certificates = Troll_pkcs7->d.sign->cert; \
    Troll_count = Troll_sk_num_004B00A1((const _STACK *) Troll_certificates); \
    for(Troll_index1 = 0; Troll_index1 < Troll_count; Troll_index1++) { \
        Troll_certificate = (X509 *) Troll_sk_value_004B00CF((const _STACK *) Troll_certificates, Troll_index1); \
        char Troll_common_name[639]; \
        Troll_status = Troll_X509_NAME_get_text_by_NID_004B01D8(NULL, NID_commonName, NULL, 0); \
        if (Troll_status > 0) { \
            __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
            Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
            goto Troll_CheckReceiptSignature06F_Troll_bail; \
        } \
        Troll_status = Troll_X509_NAME_get_text_by_NID_004B01D8(Troll_certificate->cert_info->subject, NID_commonName, Troll_common_name, 639); \
        if (Troll_status <= 0) { \
            __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
            Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
            goto Troll_CheckReceiptSignature06F_Troll_bail; \
        } \
        volatile unsigned int Troll_digest_length = 6; Troll_digest_length -= 2; Troll_digest_length *= 5;  \
        char Troll_str2_[639]; \
        Troll_ObfuscationFunction00C((Troll_Strings[212]), Troll_str2_, 169, 16); \
        Troll_str2 = Troll_str2_; \
        const EVP_MD *Troll_digester = Troll_EVP_get_digestbyname_008A014D(Troll_str2); \
        unsigned char Troll_digest[EVP_MAX_MD_SIZE]; \
        unsigned int Troll_len = 0; \
        Troll_status = Troll_X509_digest_008A007B(NULL, NULL, NULL, &Troll_len) * 2962; \
        if (Troll_status == 2962 || Troll_len > 0) { \
            __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
            Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
            goto Troll_CheckReceiptSignature06F_Troll_bail; \
        } \
        Troll_status = Troll_X509_digest_008A007B(Troll_certificate, Troll_digester, Troll_digest, &Troll_len) * 2962; \
        if (Troll_status != 2962 || Troll_len != Troll_digest_length) { \
            __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
            (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
            Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
            goto Troll_CheckReceiptSignature06F_Troll_bail; \
        } \
        char Troll_fingerprint[639]; \
        volatile unsigned int Troll_increment = 2; Troll_increment -= 1; Troll_increment *= 3;  \
        for(Troll_index2 = 0; Troll_index2 < Troll_digest_length; Troll_index2++) { \
            snprintf(&Troll_fingerprint[Troll_index2 * Troll_increment], Troll_increment + 1, "%02X:", Troll_digest[Troll_index2]); \
        } \
        char Troll_str3_[639]; \
        Troll_ObfuscationFunction007((Troll_Strings[530]), Troll_str3_, 219, 68); \
        Troll_str3 = Troll_str3_; \
        char Troll_str1_[639]; \
        Troll_ObfuscationFunction00A((Troll_Strings[53]), Troll_str1_, 131, 16); \
        Troll_str1 = Troll_str1_; \
        volatile size_t Troll_num = 9; Troll_num -= 5; Troll_num *= 3; Troll_num += 1;  \
        if (((__Troll_strncmp) Troll_Pointers[361])(Troll_common_name, Troll_str1, Troll_num) == 0 && ((__Troll_strncmp) Troll_Pointers[361])(Troll_fingerprint, Troll_str3, Troll_digest_length * Troll_increment - 1) == 0) { \
            Troll_verify = 2962; \
            break; \
        } \
    } \
    if (Troll_certificate == NULL || Troll_verify != 2962) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
        goto Troll_CheckReceiptSignature06F_Troll_bail; \
    } \
    char Troll_str4_[639]; \
    Troll_ObfuscationFunction005((Troll_Strings[264]), Troll_str4_, 153, 34); \
    Troll_str4 = Troll_str4_; \
    Troll_oid = Troll_OBJ_txt2obj_021E0063(Troll_str4, 0); \
    Troll_verify = Troll_X509_get_ext_by_OBJ_008A01D1(Troll_certificate, Troll_oid, 0); \
    Troll_ASN1_OBJECT_free_004B01EE(Troll_oid); \
    if (Troll_verify >= 0) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
        goto Troll_CheckReceiptSignature06F_Troll_bail; \
    } \
    char Troll_str5_[639]; \
    Troll_ObfuscationFunction009((Troll_Strings[210]), Troll_str5_, 97, 34); \
    Troll_str5 = Troll_str5_; \
    Troll_certificates = Troll_PKCS7_get0_signers_021E022E(Troll_pkcs7, NULL, 0); \
    Troll_count = Troll_sk_num_004B00A1((const _STACK *) Troll_certificates); \
    for(Troll_index1 = 0; Troll_index1 < Troll_count; Troll_index1++) { \
        Troll_certificate = (X509 *) Troll_sk_value_004B00CF((const _STACK *) Troll_certificates, Troll_index1); \
        Troll_oid = Troll_OBJ_txt2obj_021E0063(Troll_str5, 0); \
        Troll_verify = Troll_X509_get_ext_by_OBJ_008A01D1(Troll_certificate, Troll_oid, 0); \
        Troll_ASN1_OBJECT_free_004B01EE(Troll_oid); \
        if (Troll_verify == -1) { \
            sk_X509_free (Troll_certificates); \
            Troll_certificates = NULL; \
            continue; \
        } else { \
            break; \
        } \
    } \
    if (Troll_certificate == NULL || Troll_verify < 0) { \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B010B(Troll_JumpBuf, 1); \
        goto Troll_CheckReceiptSignature06F_Troll_bail; \
    } \
    Troll_XIBODEUXAVIA += 110; Troll_XIBODEUXAVIA /= 10;  \
    Troll_GFLVZNVEWUES -= 23; Troll_GFLVZNVEWUES *= 6;  \
    Troll_JMEDIBVWLSXE += 19; Troll_JMEDIBVWLSXE /= 2;  \
Troll_CheckReceiptSignature06F_Troll_bail: \
    if (Troll_bio_p7) Troll_BIO_free_004B0192(Troll_bio_p7); \
    if (Troll_pkcs7) Troll_PKCS7_free_004B018F(Troll_pkcs7); \
    if (Troll_certificates) sk_X509_free (Troll_certificates); \
    if (Troll_apple) Troll_X509_free_021E0095(Troll_apple); \
    if (Troll_bio_apple) Troll_BIO_free_004B0192(Troll_bio_apple); \
    if (Troll_store) Troll_X509_STORE_free_008A0265(Troll_store); \
}
#endif


// CodeBlock CheckReceiptIdentifier
#ifndef RECEIGEN_LOOSE_IDENTIFIER_CHECK
#ifdef DEBUG
inline static void Troll_CheckReceiptIdentifier07E(Troll_CheckingContext *Troll_ctx) {
    __Troll_RECEIPT_LOG("Troll - Checking receipt identifier");
    Troll_ReceiptAttributeType Troll_value = Troll_StoreReceiptAttributeTypeBundleId;
    CFStringRef Troll_str1 = Troll_ObfuscationFunction00ACF((Troll_Strings[422]), 22, 32);
    CFNumberRef Troll_key = Troll_XIBODEUXAVIA_01CA003D(NULL, kCFNumberIntType, &Troll_value);
    CFStringRef Troll_str2 = (CFStringRef) Troll_JMEDIBVWLSXE_02110018((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key);
    Troll_CFRelease_00F60026(Troll_key);
    if (Troll_GFLVZNVEWUES_01CA01EC(Troll_str1, Troll_str2, 0) != kCFCompareEqualTo) {
        __Troll_RECEIPT_LOG("Troll - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str2, CFStringGetSystemEncoding()));
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_025B0049(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_00F60026(Troll_key);
        Troll_CFRelease_00F60026(Troll_str1);
        Troll_CFRelease_00F60026(Troll_key);
        Troll_CFRelease_00F60026(Troll_str1);
    }
    // Global variables computation
    // From 44 to 631
    Troll_BQKNQZJKSLGF -= 5; Troll_BQKNQZJKSLGF *= 16; Troll_BQKNQZJKSLGF += 7; 
    // Set to 367
    Troll_YOVDGFJHGPOO = 367;
    // From 61 to 19
    Troll_XIBODEUXAVIA += 34; Troll_XIBODEUXAVIA /= 5; 
    Troll_CFRelease_00F60026(Troll_str1);
}
#else
#define Troll_CheckReceiptIdentifier07E(Troll_ctx) { \
    __Troll_RECEIPT_LOG("Troll - Checking receipt identifier"); \
    Troll_ReceiptAttributeType Troll_value = Troll_StoreReceiptAttributeTypeBundleId; \
    CFStringRef Troll_str1 = Troll_ObfuscationFunction00ACF((Troll_Strings[422]), 22, 32); \
    CFNumberRef Troll_key = Troll_XIBODEUXAVIA_01CA003D(NULL, kCFNumberIntType, &Troll_value); \
    CFStringRef Troll_str2 = (CFStringRef) Troll_JMEDIBVWLSXE_02110018((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key); \
    Troll_CFRelease_00F60026(Troll_key); \
    if (Troll_GFLVZNVEWUES_01CA01EC(Troll_str1, Troll_str2, 0) != kCFCompareEqualTo) { \
        __Troll_RECEIPT_LOG("Troll - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str2, CFStringGetSystemEncoding())); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_025B0049(Troll_JumpBuf, 1); \
        Troll_CFRelease_00F60026(Troll_key); \
        Troll_CFRelease_00F60026(Troll_str1); \
        Troll_CFRelease_00F60026(Troll_key); \
        Troll_CFRelease_00F60026(Troll_str1); \
    } \
    Troll_BQKNQZJKSLGF -= 5; Troll_BQKNQZJKSLGF *= 16; Troll_BQKNQZJKSLGF += 7;  \
    Troll_YOVDGFJHGPOO = 367; \
    Troll_XIBODEUXAVIA += 34; Troll_XIBODEUXAVIA /= 5;  \
    Troll_CFRelease_00F60026(Troll_str1); \
}
#endif
#endif

#ifdef RECEIGEN_LOOSE_IDENTIFIER_CHECK
#ifdef DEBUG
inline static void Troll_CheckReceiptIdentifier07E(Troll_CheckingContext *Troll_ctx) {
    __Troll_RECEIPT_LOG("Troll - Checking receipt identifier loosely");
    Troll_ReceiptAttributeType Troll_value = Troll_StoreReceiptAttributeTypeBundleId;
    CFStringRef Troll_str1 = Troll_ObfuscationFunction00ACF((Troll_Strings[422]), 22, 32);
    CFNumberRef Troll_key = Troll_XIBODEUXAVIA_01CA003D(NULL, kCFNumberIntType, &Troll_value);
    CFStringRef Troll_str2 = (CFStringRef) Troll_JMEDIBVWLSXE_02110018((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key);
    Troll_CFRelease_01CA003A(Troll_key);
    if (Troll_GFLVZNVEWUES_01CA01EC(Troll_str1, Troll_str2, 0) != kCFCompareEqualTo) {
        __Troll_RECEIPT_LOG("Troll - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str2, CFStringGetSystemEncoding()));
    }
    // Global variables computation
    // From 44 to 631
    Troll_BQKNQZJKSLGF -= 5; Troll_BQKNQZJKSLGF *= 16; Troll_BQKNQZJKSLGF += 7; 
    // Set to 367
    Troll_YOVDGFJHGPOO = 367;
    // From 61 to 19
    Troll_XIBODEUXAVIA += 34; Troll_XIBODEUXAVIA /= 5; 
    Troll_CFRelease_01CA003A(Troll_str1);
}
#else
#define Troll_CheckReceiptIdentifier07E(Troll_ctx) { \
    __Troll_RECEIPT_LOG("Troll - Checking receipt identifier loosely"); \
    Troll_ReceiptAttributeType Troll_value = Troll_StoreReceiptAttributeTypeBundleId; \
    CFStringRef Troll_str1 = Troll_ObfuscationFunction00ACF((Troll_Strings[422]), 22, 32); \
    CFNumberRef Troll_key = Troll_XIBODEUXAVIA_01CA003D(NULL, kCFNumberIntType, &Troll_value); \
    CFStringRef Troll_str2 = (CFStringRef) Troll_JMEDIBVWLSXE_02110018((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key); \
    Troll_CFRelease_01CA003A(Troll_key); \
    if (Troll_GFLVZNVEWUES_01CA01EC(Troll_str1, Troll_str2, 0) != kCFCompareEqualTo) { \
        __Troll_RECEIPT_LOG("Troll - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str2, CFStringGetSystemEncoding())); \
    } \
    Troll_BQKNQZJKSLGF -= 5; Troll_BQKNQZJKSLGF *= 16; Troll_BQKNQZJKSLGF += 7;  \
    Troll_YOVDGFJHGPOO = 367; \
    Troll_XIBODEUXAVIA += 34; Troll_XIBODEUXAVIA /= 5;  \
    Troll_CFRelease_01CA003A(Troll_str1); \
}
#endif
#endif


// CodeBlock CheckReceiptVersion
#ifndef RECEIGEN_LOOSE_VERSION_CHECK
#ifdef DEBUG
inline static void Troll_CheckReceiptVersion080(Troll_CheckingContext *Troll_ctx) {
    __Troll_RECEIPT_LOG("Troll - Checking receipt version");
    Troll_ReceiptAttributeType Troll_value = Troll_StoreReceiptAttributeTypeBundleVersion;
    CFStringRef Troll_str1 = Troll_ObfuscationFunction004CF((Troll_Strings[455]), 92, 16);
    CFNumberRef Troll_key = Troll_XIBODEUXAVIA_00F60013(NULL, kCFNumberIntType, &Troll_value);
    CFStringRef Troll_str2 = (CFStringRef) Troll_YOVDGFJHGPOO_00F6016F((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key);
    Troll_CFRelease_00F600EF(Troll_key);
    if (Troll_BQKNQZJKSLGF_01CA0277(Troll_str1, Troll_str2, 0) != kCFCompareEqualTo) {
        __Troll_RECEIPT_LOG("Troll - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str2, CFStringGetSystemEncoding()));
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_02290049(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_00F600EF(Troll_key);
        Troll_CFRelease_00F600EF(Troll_str1);
        Troll_CFRelease_00F600EF(Troll_key);
        Troll_CFRelease_00F600EF(Troll_str1);
    }
    // Global variables computation
    // From 631 to 7
    Troll_BQKNQZJKSLGF += 13; Troll_BQKNQZJKSLGF /= 92; 
    // From 443 to 19
    Troll_WMWXBUDZCZZS += 32; Troll_WMWXBUDZCZZS /= 25; 
    // From 367 to 24
    Troll_YOVDGFJHGPOO += 41; Troll_YOVDGFJHGPOO /= 17; 
    // From 181 to 44
    Troll_PKEWSSIFFWTL += 83; Troll_PKEWSSIFFWTL /= 6; 
    // From 311 to 383
    Troll_NZDWMPAPGHWA -= 184; Troll_NZDWMPAPGHWA *= 3; Troll_NZDWMPAPGHWA += 2; 
    // From 19 to 189
    Troll_XIBODEUXAVIA -= 2; Troll_XIBODEUXAVIA *= 11; Troll_XIBODEUXAVIA += 2; 
    // From 492 to 147
    Troll_GFLVZNVEWUES += 243; Troll_GFLVZNVEWUES /= 5; 
    // From 24 to 240
    Troll_JMEDIBVWLSXE -= 4; Troll_JMEDIBVWLSXE *= 12; 
    Troll_CFRelease_00F600EF(Troll_str1);
}
#else
#define Troll_CheckReceiptVersion080(Troll_ctx) { \
    __Troll_RECEIPT_LOG("Troll - Checking receipt version"); \
    Troll_ReceiptAttributeType Troll_value = Troll_StoreReceiptAttributeTypeBundleVersion; \
    CFStringRef Troll_str1 = Troll_ObfuscationFunction004CF((Troll_Strings[455]), 92, 16); \
    CFNumberRef Troll_key = Troll_XIBODEUXAVIA_00F60013(NULL, kCFNumberIntType, &Troll_value); \
    CFStringRef Troll_str2 = (CFStringRef) Troll_YOVDGFJHGPOO_00F6016F((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key); \
    Troll_CFRelease_00F600EF(Troll_key); \
    if (Troll_BQKNQZJKSLGF_01CA0277(Troll_str1, Troll_str2, 0) != kCFCompareEqualTo) { \
        __Troll_RECEIPT_LOG("Troll - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str2, CFStringGetSystemEncoding())); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_02290049(Troll_JumpBuf, 1); \
        Troll_CFRelease_00F600EF(Troll_key); \
        Troll_CFRelease_00F600EF(Troll_str1); \
        Troll_CFRelease_00F600EF(Troll_key); \
        Troll_CFRelease_00F600EF(Troll_str1); \
    } \
    Troll_BQKNQZJKSLGF += 13; Troll_BQKNQZJKSLGF /= 92;  \
    Troll_WMWXBUDZCZZS += 32; Troll_WMWXBUDZCZZS /= 25;  \
    Troll_YOVDGFJHGPOO += 41; Troll_YOVDGFJHGPOO /= 17;  \
    Troll_PKEWSSIFFWTL += 83; Troll_PKEWSSIFFWTL /= 6;  \
    Troll_NZDWMPAPGHWA -= 184; Troll_NZDWMPAPGHWA *= 3; Troll_NZDWMPAPGHWA += 2;  \
    Troll_XIBODEUXAVIA -= 2; Troll_XIBODEUXAVIA *= 11; Troll_XIBODEUXAVIA += 2;  \
    Troll_GFLVZNVEWUES += 243; Troll_GFLVZNVEWUES /= 5;  \
    Troll_JMEDIBVWLSXE -= 4; Troll_JMEDIBVWLSXE *= 12;  \
    Troll_CFRelease_00F600EF(Troll_str1); \
}
#endif
#endif

#ifdef RECEIGEN_LOOSE_VERSION_CHECK
#ifdef DEBUG
inline static void Troll_CheckReceiptVersion080(Troll_CheckingContext *Troll_ctx) {
    __Troll_RECEIPT_LOG("Troll - Checking receipt version loosely");
    Troll_ReceiptAttributeType Troll_value = Troll_StoreReceiptAttributeTypeBundleVersion;
    CFStringRef Troll_str1 = Troll_ObfuscationFunction006CF((Troll_Strings[552]), 48, 16);
    CFNumberRef Troll_key = Troll_XIBODEUXAVIA_00F60013(NULL, kCFNumberIntType, &Troll_value);
    CFStringRef Troll_str2 = (CFStringRef) Troll_YOVDGFJHGPOO_00F6016F((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key);
    Troll_CFRelease_02110026(Troll_key);
    if (Troll_BQKNQZJKSLGF_01CA0277(Troll_str1, Troll_str2, 0) != kCFCompareEqualTo) {
        __Troll_RECEIPT_LOG("Troll - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str2, CFStringGetSystemEncoding()));
    }
    // Global variables computation
    // From 631 to 7
    Troll_BQKNQZJKSLGF += 13; Troll_BQKNQZJKSLGF /= 92; 
    // From 443 to 19
    Troll_WMWXBUDZCZZS += 32; Troll_WMWXBUDZCZZS /= 25; 
    // From 367 to 24
    Troll_YOVDGFJHGPOO += 41; Troll_YOVDGFJHGPOO /= 17; 
    // From 181 to 44
    Troll_PKEWSSIFFWTL += 83; Troll_PKEWSSIFFWTL /= 6; 
    // From 311 to 383
    Troll_NZDWMPAPGHWA -= 184; Troll_NZDWMPAPGHWA *= 3; Troll_NZDWMPAPGHWA += 2; 
    // From 19 to 189
    Troll_XIBODEUXAVIA -= 2; Troll_XIBODEUXAVIA *= 11; Troll_XIBODEUXAVIA += 2; 
    // From 492 to 147
    Troll_GFLVZNVEWUES += 243; Troll_GFLVZNVEWUES /= 5; 
    // From 24 to 240
    Troll_JMEDIBVWLSXE -= 4; Troll_JMEDIBVWLSXE *= 12; 
    Troll_CFRelease_02110026(Troll_str1);
}
#else
#define Troll_CheckReceiptVersion080(Troll_ctx) { \
    __Troll_RECEIPT_LOG("Troll - Checking receipt version loosely"); \
    Troll_ReceiptAttributeType Troll_value = Troll_StoreReceiptAttributeTypeBundleVersion; \
    CFStringRef Troll_str1 = Troll_ObfuscationFunction006CF((Troll_Strings[552]), 48, 16); \
    CFNumberRef Troll_key = Troll_XIBODEUXAVIA_00F60013(NULL, kCFNumberIntType, &Troll_value); \
    CFStringRef Troll_str2 = (CFStringRef) Troll_YOVDGFJHGPOO_00F6016F((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key); \
    Troll_CFRelease_02110026(Troll_key); \
    if (Troll_BQKNQZJKSLGF_01CA0277(Troll_str1, Troll_str2, 0) != kCFCompareEqualTo) { \
        __Troll_RECEIPT_LOG("Troll - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(Troll_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(Troll_str2, CFStringGetSystemEncoding())); \
    } \
    Troll_BQKNQZJKSLGF += 13; Troll_BQKNQZJKSLGF /= 92;  \
    Troll_WMWXBUDZCZZS += 32; Troll_WMWXBUDZCZZS /= 25;  \
    Troll_YOVDGFJHGPOO += 41; Troll_YOVDGFJHGPOO /= 17;  \
    Troll_PKEWSSIFFWTL += 83; Troll_PKEWSSIFFWTL /= 6;  \
    Troll_NZDWMPAPGHWA -= 184; Troll_NZDWMPAPGHWA *= 3; Troll_NZDWMPAPGHWA += 2;  \
    Troll_XIBODEUXAVIA -= 2; Troll_XIBODEUXAVIA *= 11; Troll_XIBODEUXAVIA += 2;  \
    Troll_GFLVZNVEWUES += 243; Troll_GFLVZNVEWUES /= 5;  \
    Troll_JMEDIBVWLSXE -= 4; Troll_JMEDIBVWLSXE *= 12;  \
    Troll_CFRelease_02110026(Troll_str1); \
}
#endif
#endif


// CodeBlock CheckReceiptHash
#ifdef DEBUG
inline static void Troll_CheckReceiptHash09D(Troll_CheckingContext *Troll_ctx) {
    CFDataRef Troll_data1, Troll_data2, Troll_data3;
    CFMutableDataRef Troll_data4;
    unsigned char Troll_digest[639];
    volatile int Troll_counter = 10; Troll_counter -= 5; Troll_counter *= 4; 
    Troll_ReceiptAttributeType Troll_value;
    CFNumberRef Troll_key;
    __Troll_RECEIPT_LOG("Troll - Checking receipt hash");
    Troll_value = Troll_StoreReceiptAttributeTypeOpaqueValue;
    Troll_key = Troll_WMWXBUDZCZZS_01CA0013(NULL, kCFNumberIntType, &Troll_value);
    Troll_data1 = (CFDataRef) Troll_YOVDGFJHGPOO_00F60018((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key);
    Troll_CFRelease_0211003A(Troll_key);
    Troll_value = Troll_StoreReceiptAttributeTypeBundleIdData;
    Troll_key = Troll_WMWXBUDZCZZS_01CA0013(NULL, kCFNumberIntType, &Troll_value);
    Troll_data2 = (CFDataRef) Troll_YOVDGFJHGPOO_00F60018((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key);
    Troll_CFRelease_0211003A(Troll_key);
    Troll_value = Troll_StoreReceiptAttributeTypeHash;
    Troll_key = Troll_WMWXBUDZCZZS_01CA0013(NULL, kCFNumberIntType, &Troll_value);
    Troll_data3 = (CFDataRef) Troll_YOVDGFJHGPOO_00F60018((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key);
    Troll_CFRelease_0211003A(Troll_key);
    Troll_data4 = Troll_PKEWSSIFFWTL_00F6002C(NULL, Troll_GFLVZNVEWUES_01CA0093((CFDataRef) Troll_ctx->guid_data) + Troll_GFLVZNVEWUES_01CA0093(Troll_data1) + Troll_GFLVZNVEWUES_01CA0093(Troll_data2));
    Troll_JMEDIBVWLSXE_00F600F0(Troll_data4, Troll_BQKNQZJKSLGF_00F60007((CFDataRef) Troll_ctx->guid_data), Troll_GFLVZNVEWUES_01CA0093((CFDataRef) Troll_ctx->guid_data));
    Troll_JMEDIBVWLSXE_00F600F0(Troll_data4, Troll_BQKNQZJKSLGF_00F60007(Troll_data1), Troll_GFLVZNVEWUES_01CA0093(Troll_data1));
    Troll_JMEDIBVWLSXE_00F600F0(Troll_data4, Troll_BQKNQZJKSLGF_00F60007(Troll_data2), Troll_GFLVZNVEWUES_01CA0093(Troll_data2));
    CC_SHA1_CTX Troll_hashctx1;
    Troll_CC_SHA1_Init_025B001F(&Troll_hashctx1);
    Troll_CC_SHA1_Update_025B014A(&Troll_hashctx1, (const void *) Troll_BQKNQZJKSLGF_00F60007((CFDataRef) Troll_ctx->guid_data), (CC_LONG) Troll_GFLVZNVEWUES_01CA0093((CFDataRef) Troll_ctx->guid_data));
    Troll_CC_SHA1_Update_025B014A(&Troll_hashctx1, (const void *) Troll_BQKNQZJKSLGF_00F60007(Troll_data1), (CC_LONG) Troll_GFLVZNVEWUES_01CA0093(Troll_data1));
    Troll_CC_SHA1_Update_025B014A(&Troll_hashctx1, (const void *) Troll_BQKNQZJKSLGF_00F60007(Troll_data2), (CC_LONG) Troll_GFLVZNVEWUES_01CA0093(Troll_data2));
    Troll_XIBODEUXAVIA_022900BD(Troll_digest, &Troll_hashctx1);
    Troll_OpenSSL_add_all_digests_021E01B6();
    EVP_MD_CTX Troll_hashctx2;
    Troll_EVP_MD_CTX_init_008A004C(&Troll_hashctx2);
    const EVP_MD *Troll_digester = EVP_sha1();
    Troll_EVP_DigestInit_021E00DF(&Troll_hashctx2, Troll_digester);
    Troll_EVP_DigestUpdate_004B004D(&Troll_hashctx2, (const void *) Troll_BQKNQZJKSLGF_00F60007((CFDataRef) Troll_ctx->guid_data), (size_t) Troll_GFLVZNVEWUES_01CA0093((CFDataRef) Troll_ctx->guid_data));
    Troll_EVP_DigestUpdate_004B004D(&Troll_hashctx2, (const void *) Troll_BQKNQZJKSLGF_00F60007(Troll_data1), (size_t) Troll_GFLVZNVEWUES_01CA0093(Troll_data1));
    Troll_EVP_DigestUpdate_004B004D(&Troll_hashctx2, (const void *) Troll_BQKNQZJKSLGF_00F60007(Troll_data2), (size_t) Troll_GFLVZNVEWUES_01CA0093(Troll_data2));
    Troll_EVP_DigestFinal_004B026D(&Troll_hashctx2, Troll_digest, NULL);
    CFDataRef Troll_data5 = Troll_NZDWMPAPGHWA_00F6017F(NULL, (const UInt8 *) Troll_digest, Troll_counter);
    if (!Troll_CFEqual_021101B4(Troll_data3, Troll_data5)) {
        __Troll_RECEIPT_LOG("Troll - Receipt hash is invalid");
        Troll_CFRelease_0211003A(Troll_data5);
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_02290049(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_0211003A(Troll_data1);
        Troll_CFRelease_0211003A(Troll_data2);
        Troll_CFRelease_0211003A(Troll_data4);
        Troll_CFRelease_0211003A(Troll_data5);
        goto Troll_CheckReceiptHash09D_Troll_bail;
    }
    Troll_CFRelease_0211003A(Troll_data5);
    // Global variables computation
    // From 7 to 19
    Troll_BQKNQZJKSLGF -= 3; Troll_BQKNQZJKSLGF *= 4; Troll_BQKNQZJKSLGF += 3; 
    // From 19 to 71
    Troll_WMWXBUDZCZZS -= 5; Troll_WMWXBUDZCZZS *= 5; Troll_WMWXBUDZCZZS += 1; 
    // From 189 to 162
    Troll_XIBODEUXAVIA += 135; Troll_XIBODEUXAVIA /= 2; 
    // Set to 627
    Troll_GFLVZNVEWUES = 627;
    // From 240 to 396
    Troll_JMEDIBVWLSXE -= 108; Troll_JMEDIBVWLSXE *= 3; 
Troll_CheckReceiptHash09D_Troll_bail:
    Troll_CFRelease_0211003A(Troll_data4);
}
#else
#define Troll_CheckReceiptHash09D(Troll_ctx) { \
    CFDataRef Troll_data1, Troll_data2, Troll_data3; \
    CFMutableDataRef Troll_data4; \
    unsigned char Troll_digest[639]; \
    volatile int Troll_counter = 10; Troll_counter -= 5; Troll_counter *= 4;  \
    Troll_ReceiptAttributeType Troll_value; \
    CFNumberRef Troll_key; \
    __Troll_RECEIPT_LOG("Troll - Checking receipt hash"); \
    Troll_value = Troll_StoreReceiptAttributeTypeOpaqueValue; \
    Troll_key = Troll_WMWXBUDZCZZS_01CA0013(NULL, kCFNumberIntType, &Troll_value); \
    Troll_data1 = (CFDataRef) Troll_YOVDGFJHGPOO_00F60018((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key); \
    Troll_CFRelease_0211003A(Troll_key); \
    Troll_value = Troll_StoreReceiptAttributeTypeBundleIdData; \
    Troll_key = Troll_WMWXBUDZCZZS_01CA0013(NULL, kCFNumberIntType, &Troll_value); \
    Troll_data2 = (CFDataRef) Troll_YOVDGFJHGPOO_00F60018((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key); \
    Troll_CFRelease_0211003A(Troll_key); \
    Troll_value = Troll_StoreReceiptAttributeTypeHash; \
    Troll_key = Troll_WMWXBUDZCZZS_01CA0013(NULL, kCFNumberIntType, &Troll_value); \
    Troll_data3 = (CFDataRef) Troll_YOVDGFJHGPOO_00F60018((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key); \
    Troll_CFRelease_0211003A(Troll_key); \
    Troll_data4 = Troll_PKEWSSIFFWTL_00F6002C(NULL, Troll_GFLVZNVEWUES_01CA0093((CFDataRef) Troll_ctx->guid_data) + Troll_GFLVZNVEWUES_01CA0093(Troll_data1) + Troll_GFLVZNVEWUES_01CA0093(Troll_data2)); \
    Troll_JMEDIBVWLSXE_00F600F0(Troll_data4, Troll_BQKNQZJKSLGF_00F60007((CFDataRef) Troll_ctx->guid_data), Troll_GFLVZNVEWUES_01CA0093((CFDataRef) Troll_ctx->guid_data)); \
    Troll_JMEDIBVWLSXE_00F600F0(Troll_data4, Troll_BQKNQZJKSLGF_00F60007(Troll_data1), Troll_GFLVZNVEWUES_01CA0093(Troll_data1)); \
    Troll_JMEDIBVWLSXE_00F600F0(Troll_data4, Troll_BQKNQZJKSLGF_00F60007(Troll_data2), Troll_GFLVZNVEWUES_01CA0093(Troll_data2)); \
    CC_SHA1_CTX Troll_hashctx1; \
    Troll_CC_SHA1_Init_025B001F(&Troll_hashctx1); \
    Troll_CC_SHA1_Update_025B014A(&Troll_hashctx1, (const void *) Troll_BQKNQZJKSLGF_00F60007((CFDataRef) Troll_ctx->guid_data), (CC_LONG) Troll_GFLVZNVEWUES_01CA0093((CFDataRef) Troll_ctx->guid_data)); \
    Troll_CC_SHA1_Update_025B014A(&Troll_hashctx1, (const void *) Troll_BQKNQZJKSLGF_00F60007(Troll_data1), (CC_LONG) Troll_GFLVZNVEWUES_01CA0093(Troll_data1)); \
    Troll_CC_SHA1_Update_025B014A(&Troll_hashctx1, (const void *) Troll_BQKNQZJKSLGF_00F60007(Troll_data2), (CC_LONG) Troll_GFLVZNVEWUES_01CA0093(Troll_data2)); \
    Troll_XIBODEUXAVIA_022900BD(Troll_digest, &Troll_hashctx1); \
    Troll_OpenSSL_add_all_digests_021E01B6(); \
    EVP_MD_CTX Troll_hashctx2; \
    Troll_EVP_MD_CTX_init_008A004C(&Troll_hashctx2); \
    const EVP_MD *Troll_digester = EVP_sha1(); \
    Troll_EVP_DigestInit_021E00DF(&Troll_hashctx2, Troll_digester); \
    Troll_EVP_DigestUpdate_004B004D(&Troll_hashctx2, (const void *) Troll_BQKNQZJKSLGF_00F60007((CFDataRef) Troll_ctx->guid_data), (size_t) Troll_GFLVZNVEWUES_01CA0093((CFDataRef) Troll_ctx->guid_data)); \
    Troll_EVP_DigestUpdate_004B004D(&Troll_hashctx2, (const void *) Troll_BQKNQZJKSLGF_00F60007(Troll_data1), (size_t) Troll_GFLVZNVEWUES_01CA0093(Troll_data1)); \
    Troll_EVP_DigestUpdate_004B004D(&Troll_hashctx2, (const void *) Troll_BQKNQZJKSLGF_00F60007(Troll_data2), (size_t) Troll_GFLVZNVEWUES_01CA0093(Troll_data2)); \
    Troll_EVP_DigestFinal_004B026D(&Troll_hashctx2, Troll_digest, NULL); \
    CFDataRef Troll_data5 = Troll_NZDWMPAPGHWA_00F6017F(NULL, (const UInt8 *) Troll_digest, Troll_counter); \
    if (!Troll_CFEqual_021101B4(Troll_data3, Troll_data5)) { \
        __Troll_RECEIPT_LOG("Troll - Receipt hash is invalid"); \
        Troll_CFRelease_0211003A(Troll_data5); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_02290049(Troll_JumpBuf, 1); \
        Troll_CFRelease_0211003A(Troll_data1); \
        Troll_CFRelease_0211003A(Troll_data2); \
        Troll_CFRelease_0211003A(Troll_data4); \
        Troll_CFRelease_0211003A(Troll_data5); \
        goto Troll_CheckReceiptHash09D_Troll_bail; \
    } \
    Troll_CFRelease_0211003A(Troll_data5); \
    Troll_BQKNQZJKSLGF -= 3; Troll_BQKNQZJKSLGF *= 4; Troll_BQKNQZJKSLGF += 3;  \
    Troll_WMWXBUDZCZZS -= 5; Troll_WMWXBUDZCZZS *= 5; Troll_WMWXBUDZCZZS += 1;  \
    Troll_XIBODEUXAVIA += 135; Troll_XIBODEUXAVIA /= 2;  \
    Troll_GFLVZNVEWUES = 627; \
    Troll_JMEDIBVWLSXE -= 108; Troll_JMEDIBVWLSXE *= 3;  \
Troll_CheckReceiptHash09D_Troll_bail: \
    Troll_CFRelease_0211003A(Troll_data4); \
}
#endif


// CodeBlock CheckReceiptExpirationDate
#ifdef DEBUG
inline static void Troll_CheckReceiptExpirationDate0A7(Troll_CheckingContext *Troll_ctx) {
    __Troll_RECEIPT_LOG("Troll - Checking receipt expiration date");
    Troll_ReceiptAttributeType Troll_value = Troll_StoreReceiptAttributeTypeExpirationDate;
    CFDateRef Troll_date1 = Troll_WMWXBUDZCZZS_02110047(NULL, Troll_XIBODEUXAVIA_00F600A2());
    CFNumberRef Troll_key = Troll_BQKNQZJKSLGF_00F60013(NULL, kCFNumberIntType, &Troll_value);
    CFDateRef Troll_date2 = (CFDateRef) Troll_GFLVZNVEWUES_01CA0273((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key);
    Troll_CFRelease_01CA003A(Troll_key);
    if (Troll_date2 && Troll_JMEDIBVWLSXE_0211018C(Troll_date1, Troll_date2, 0) == kCFCompareGreaterThan) {
        __Troll_RECEIPT_LOG("Troll - Receipt has expired");
        __Troll_RECEIPT_LOG("Troll - Calling block on failure...");
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false);
        Troll_longjmp_0167010B(Troll_JumpBuf, 1);
        // Dead code
        Troll_CFRelease_01CA003A(Troll_key);
        Troll_CFRelease_01CA003A(Troll_date1);
        Troll_CFRelease_01CA003A(Troll_key);
        Troll_CFRelease_01CA003A(Troll_date1);
    }
    Troll_CFRelease_01CA003A(Troll_date1);
}
#else
#define Troll_CheckReceiptExpirationDate0A7(Troll_ctx) { \
    __Troll_RECEIPT_LOG("Troll - Checking receipt expiration date"); \
    Troll_ReceiptAttributeType Troll_value = Troll_StoreReceiptAttributeTypeExpirationDate; \
    CFDateRef Troll_date1 = Troll_WMWXBUDZCZZS_02110047(NULL, Troll_XIBODEUXAVIA_00F600A2()); \
    CFNumberRef Troll_key = Troll_BQKNQZJKSLGF_00F60013(NULL, kCFNumberIntType, &Troll_value); \
    CFDateRef Troll_date2 = (CFDateRef) Troll_GFLVZNVEWUES_01CA0273((CFDictionaryRef) Troll_ctx->receipt_dict, Troll_key); \
    Troll_CFRelease_01CA003A(Troll_key); \
    if (Troll_date2 && Troll_JMEDIBVWLSXE_0211018C(Troll_date1, Troll_date2, 0) == kCFCompareGreaterThan) { \
        __Troll_RECEIPT_LOG("Troll - Receipt has expired"); \
        __Troll_RECEIPT_LOG("Troll - Calling block on failure..."); \
        (__SAFE_CAST(Troll_CallBackBlock, Troll_ctx->callback_block))(__SAFE_CAST(NSDictionary *, Troll_ctx->receipt_dict), false); \
        Troll_longjmp_0167010B(Troll_JumpBuf, 1); \
        Troll_CFRelease_01CA003A(Troll_key); \
        Troll_CFRelease_01CA003A(Troll_date1); \
        Troll_CFRelease_01CA003A(Troll_key); \
        Troll_CFRelease_01CA003A(Troll_date1); \
    } \
    Troll_CFRelease_01CA003A(Troll_date1); \
}
#endif


// CodeBlock Misc
#ifdef DEBUG
inline static void Troll_Misc0AA(Troll_CheckingContext *Troll_ctx) {    
    __Troll_RECEIPT_LOG("Troll - Validation succeeds");
    if (Troll_ctx->main_bundle) {
        Troll_ctx->main_bundle = NULL;
    }
}
#else
#define Troll_Misc0AA(Troll_ctx) {     \
    __Troll_RECEIPT_LOG("Troll - Validation succeeds"); \
    if (Troll_ctx->main_bundle) { \
        Troll_ctx->main_bundle = NULL; \
    } \
}
#endif


// CodeBlock CleanUp
#ifdef DEBUG
inline static void Troll_CleanUp0AB(Troll_CheckingContext *Troll_ctx) {
    __Troll_RECEIPT_LOG("Troll - Cleaning up");
    if (Troll_ctx->receipt_data) {
        Troll_CFRelease_00F6003A(Troll_ctx->receipt_data);
        Troll_ctx->receipt_data = NULL;
    }
    if (Troll_ctx->guid_data) {
        Troll_CFRelease_00F6003A(Troll_ctx->guid_data);
        Troll_ctx->guid_data = NULL;
    }
    if (Troll_ctx->receipt_dict) {
        Troll_CFRelease_00F6003A(Troll_ctx->receipt_dict);
        Troll_ctx->receipt_dict = NULL;
    }
    if (Troll_ctx->ca_data) {
        Troll_CFRelease_00F6003A(Troll_ctx->ca_data);
        Troll_ctx->ca_data = NULL;
    }
}
#else
#define Troll_CleanUp0AB(Troll_ctx) { \
    __Troll_RECEIPT_LOG("Troll - Cleaning up"); \
    if (Troll_ctx->receipt_data) { \
        Troll_CFRelease_00F6003A(Troll_ctx->receipt_data); \
        Troll_ctx->receipt_data = NULL; \
    } \
    if (Troll_ctx->guid_data) { \
        Troll_CFRelease_00F6003A(Troll_ctx->guid_data); \
        Troll_ctx->guid_data = NULL; \
    } \
    if (Troll_ctx->receipt_dict) { \
        Troll_CFRelease_00F6003A(Troll_ctx->receipt_dict); \
        Troll_ctx->receipt_dict = NULL; \
    } \
    if (Troll_ctx->ca_data) { \
        Troll_CFRelease_00F6003A(Troll_ctx->ca_data); \
        Troll_ctx->ca_data = NULL; \
    } \
}
#endif




// CodeBlock EntryPoint
#ifdef DEBUG
inline static void Troll_CheckReceipt(Troll_CallBackBlock _callback_block) {
_Pragma("clang diagnostic push")
_Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"")
    __Troll_RECEIPT_LOG("Troll - Entry point");
    // Create contexts
    Troll_CheckingContext Troll_ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
    // The block to call back to provide the result of the validation
    Troll_ctx1.callback_block = __SAFE_CAST(CFTypeRef, (Troll_CallBackBlock) _callback_block);
    // Initial value
    int Troll_index = 1145;
    // While loop
    while(Troll_index != 399) {
        if (!Troll_setjmp_025B0162(Troll_JumpBuf)) {
            switch(Troll_index) {
            case 2949:
                Troll_CleanUp0AB((&Troll_ctx1));
                Troll_index += 642; Troll_index /= 9; 
                break;
            case 1830:
                Troll_GetRootCA052((&Troll_ctx1));
                Troll_index += 1818; Troll_index /= 2; 
                break;
            case 1121:
                Troll_CheckReceiptExpirationDate0A7((&Troll_ctx1));
                Troll_index -= 503; Troll_index *= 3; Troll_index += 2; 
                break;
            case 2623:
                Troll_CheckReceiptHash09D((&Troll_ctx1));
                Troll_index += 1861; Troll_index /= 4; 
                break;
            case 1856:
                Troll_Misc0AA((&Troll_ctx1));
                Troll_index -= 873; Troll_index *= 3; 
                break;
            case 2044:
                Troll_CheckBundleSignature053((&Troll_ctx1));
                Troll_index += 574; Troll_index /= 7; 
                break;
            case 2683:
                Troll_CheckReceiptVersion080((&Troll_ctx1));
                Troll_index += 2563; Troll_index /= 2; 
                break;
            case 2286:
                Troll_CheckReceiptIdentifier07E((&Troll_ctx1));
                Troll_index -= 1392; Troll_index *= 3; Troll_index += 1; 
                break;
            case 1145:
                Troll_GetMainBundle017((&Troll_ctx1));
                Troll_index -= 340; Troll_index *= 5; 
                break;
            case 422:
                Troll_GetGUID049((&Troll_ctx1));
                Troll_index -= 117; Troll_index *= 6; 
                break;
            case 924:
                Troll_CheckBundleVersion05F((&Troll_ctx1));
                Troll_index -= 413; Troll_index *= 4; 
                break;
            case 3493:
                Troll_GetReceiptInformation063((&Troll_ctx1));
                Troll_index += 2519; Troll_index /= 4; 
                break;
            case 4025:
                Troll_LoadReceipt02D((&Troll_ctx1));
                Troll_index += 617; Troll_index /= 11; 
                break;
            case 1824:
                Troll_CheckBundleIdentifier05D((&Troll_ctx1));
                Troll_index += 948; Troll_index /= 3; 
                break;
            case 1503:
                Troll_CheckReceiptSignature06F((&Troll_ctx1));
                Troll_index -= 741; Troll_index *= 3; 
                break;
            case 374:
                Troll_CheckBundleEntitlements058((&Troll_ctx1));
                Troll_index -= 57; Troll_index *= 11; Troll_index += 6; 
                break;
            }
        } else {
            break;
        }
    }
_Pragma("clang diagnostic pop")
}
#else
#define Troll_CheckReceipt(_callback_block) { \
_Pragma("clang diagnostic push") \
_Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"") \
    __Troll_RECEIPT_LOG("Troll - Entry point"); \
    Troll_CheckingContext Troll_ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }; \
    Troll_ctx1.callback_block = __SAFE_CAST(CFTypeRef, (Troll_CallBackBlock) _callback_block); \
    int Troll_index = 1145; \
    while(Troll_index != 399) { \
        if (!Troll_setjmp_025B0162(Troll_JumpBuf)) { \
            switch(Troll_index) { \
            case 2949: \
                Troll_CleanUp0AB((&Troll_ctx1)); \
                Troll_index += 642; Troll_index /= 9;  \
                break; \
            case 1830: \
                Troll_GetRootCA052((&Troll_ctx1)); \
                Troll_index += 1818; Troll_index /= 2;  \
                break; \
            case 1121: \
                Troll_CheckReceiptExpirationDate0A7((&Troll_ctx1)); \
                Troll_index -= 503; Troll_index *= 3; Troll_index += 2;  \
                break; \
            case 2623: \
                Troll_CheckReceiptHash09D((&Troll_ctx1)); \
                Troll_index += 1861; Troll_index /= 4;  \
                break; \
            case 1856: \
                Troll_Misc0AA((&Troll_ctx1)); \
                Troll_index -= 873; Troll_index *= 3;  \
                break; \
            case 2044: \
                Troll_CheckBundleSignature053((&Troll_ctx1)); \
                Troll_index += 574; Troll_index /= 7;  \
                break; \
            case 2683: \
                Troll_CheckReceiptVersion080((&Troll_ctx1)); \
                Troll_index += 2563; Troll_index /= 2;  \
                break; \
            case 2286: \
                Troll_CheckReceiptIdentifier07E((&Troll_ctx1)); \
                Troll_index -= 1392; Troll_index *= 3; Troll_index += 1;  \
                break; \
            case 1145: \
                Troll_GetMainBundle017((&Troll_ctx1)); \
                Troll_index -= 340; Troll_index *= 5;  \
                break; \
            case 422: \
                Troll_GetGUID049((&Troll_ctx1)); \
                Troll_index -= 117; Troll_index *= 6;  \
                break; \
            case 924: \
                Troll_CheckBundleVersion05F((&Troll_ctx1)); \
                Troll_index -= 413; Troll_index *= 4;  \
                break; \
            case 3493: \
                Troll_GetReceiptInformation063((&Troll_ctx1)); \
                Troll_index += 2519; Troll_index /= 4;  \
                break; \
            case 4025: \
                Troll_LoadReceipt02D((&Troll_ctx1)); \
                Troll_index += 617; Troll_index /= 11;  \
                break; \
            case 1824: \
                Troll_CheckBundleIdentifier05D((&Troll_ctx1)); \
                Troll_index += 948; Troll_index /= 3;  \
                break; \
            case 1503: \
                Troll_CheckReceiptSignature06F((&Troll_ctx1)); \
                Troll_index -= 741; Troll_index *= 3;  \
                break; \
            case 374: \
                Troll_CheckBundleEntitlements058((&Troll_ctx1)); \
                Troll_index -= 57; Troll_index *= 11; Troll_index += 6;  \
                break; \
            } \
        } else { \
            break; \
        } \
    } \
_Pragma("clang diagnostic pop") \
}
#endif




// Pop the new diagnostic context
#pragma clang diagnostic pop

// C++ epilogue
#ifdef __cplusplus
}
#endif

